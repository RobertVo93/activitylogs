{"version":3,"sources":["service/common-api.service.ts","share-components/DynamicForm/questions/question-dropdown.ts","share-components/DynamicForm/questions/question-textarea.ts","share-components/DynamicForm/questions/question-textbox.ts","share-components/DynamicForm/questions/question-daterange.ts","share-components/DynamicForm/questions/question-reference.ts","share-components/DynamicForm/questions/question-datetime.ts","share-components/DynamicForm/questions/question-radiobutton.ts","share-components/DynamicForm/questions/question-ckeditor.ts","share-components/Ckeditor/Ckeditor.jsx","share-components/DynamicForm/DynamicForm.tsx","share-components/DynamicForm/index.ts","share-components/Variables/BreakLine/BreakLine.tsx","share-components/Variables/DropdownList/DropDownPropsStates.ts","share-components/Variables/DropdownList/DropdownList.tsx","share-components/Variables/ReferenceList/ReferencePropsStates.ts","share-components/Variables/ReferenceList/Reference.service.ts","share-components/Variables/ReferenceList/ReferenceList.tsx","share-components/Variables/DateTime/DateTimePropsStates.ts","share-components/Variables/DateTime/DateTime.tsx","share-components/Variables/RadioButton/RadioButton.tsx","share-components/DynamicForm/form.config.ts","serviceWorker.ts","components/About/About.tsx","components/Home/Home.tsx","components/UI/Toolbar/Toolbar.tsx","redux/store/user/actions.ts","redux/store/user/types.ts","components/Contact/Contact.tsx","components/Auth/SignUp/SignUpPropsStates.ts","components/Auth/SignUp/SignUp.tsx","class/common/keyValue.ts","configuration/config.ts","components/Management/Users/User.service.ts","class/user.ts","components/Management/Users/UserPropsStates.ts","components/Management/Users/User.tsx","share-components/Table/Filter/Filter.jsx","share-components/Table/Selection/RowSelection.jsx","share-components/Table/Pagination/TablePaginationActions.jsx","share-components/Table/Filter/GlobalFilter.jsx","share-components/Table/Toolbar/TableToolbar.jsx","share-components/Table/Table.jsx","redux/containers/Users/UserContainer.tsx","components/Management/Activities/Activity.service.ts","class/project.ts","class/activity.ts","components/Management/Activities/ActivityPropsState.ts","share-components/CommentLog/comment.ts","share-components/CommentLog/CommentLogPropsStates.ts","share-components/CommentLog/CommentLog.tsx","service/common.service.ts","components/Management/Activities/Activity.tsx","redux/containers/Activities/ActivityContainer.tsx","redux/store/activity/actions.ts","redux/store/activity/types.ts","components/Auth/Login/LoginPropsStates.ts","components/Auth/Login/Login.tsx","components/Management/KnowledgeBase/KnowledgeBase.service.ts","class/knowledgeBase.ts","components/Management/KnowledgeBase/KnowledgeBasePropsState.ts","components/Management/KnowledgeBase/KnowledgeBase.tsx","redux/containers/KnowledgeBases/KnowledgeBaseContainer.tsx","redux/store/knowledgeBase/actions.ts","redux/store/knowledgeBase/types.ts","components/Management/KnowledgeArticle/KnowledgeArticle.service.ts","class/knowledgeArticle.ts","components/Management/KnowledgeArticle/KnowledgeArticlePropsState.ts","share-components/DocumentViewer/DocumentViewer.tsx","components/Management/KnowledgeArticle/KnowledgeArticle.tsx","redux/containers/KnowledgeArticles/KnowledgeArticleContainer.tsx","redux/store/knowledgeArticle/actions.ts","redux/store/knowledgeArticle/types.ts","components/Management/Project/Project.service.ts","components/Management/Project/ProjectPropsState.ts","components/Management/Project/Project.tsx","redux/containers/Projects/ProjectContainer.tsx","redux/store/project/actions.ts","redux/store/project/types.ts","redux/store/request/actions.ts","redux/store/request/types.ts","share-components/SecureRoute/SecureRoute.tsx","share-components/Page401/Page401.tsx","App.tsx","components/Footer/Footer.tsx","redux/store/user/reducers.ts","redux/store/activity/reducers.ts","redux/store/request/reducers.ts","redux/store/knowledgeBase/reducers.ts","redux/store/knowledgeArticle/reducers.ts","redux/store/project/reducers.ts","redux/store/index.ts","components/Common/Spinner/LoadingSpinner.tsx","components/Common/Alert/GlobalAlert.tsx","index.tsx","share-components/DynamicForm/questions/question-base.ts","configuration/api.config.ts","share-components/Variables/DateRange/date-range.ts","share-components/Variables/DateRange/DateRangePropsStates.ts","share-components/Variables/DateRange/DateRange.tsx"],"names":["commonAPI","config","numberOfRequest","api","this","axios","create","getUri","bind","request","get","delete","head","post","put","patch","url","data","response","error","apiConfig","DropdownQuestion","options","controlType","FormConfig","questionControlType","dropdown","QuestionBase","TextAreaQuestion","type","textarea","TextboxQuestion","textbox","DateRangeQuestion","dateRange","ReferenceQuestion","reference","CkeditorQuestion","ckeditor","ContainerDiv","styled","div","ReactCkeditor","editor","ClassicEditor","props","onInit","console","log","onChange","event","getData","dataChange","ckeditorKey","onBlur","onFocus","React","Component","DangerText","color","fontStyle","Margin0","margin","DynamicForm","formConfig","state","originalListFields","listFields","errors","disableSubmitButton","renderErrorMessage","renderQuestion","validateForm","handleChange","onSelectionChangeCallback","onSelectionReferenceListChange","onselectionDateRangeChange","onCkeditorChange","onselectionDateTimeChange","onRadioSelectionChange","ListFields","forEach","val","key","value","setState","JSON","parse","stringify","disabled","valid","e","newDateRange","referenceKey","newDate","dateTime","selected","dropdownKey","target","name","str","element","key1","validators","formValidators","require","push","errorMessage","minLength","length","maxLength","key2","_id","key3","key4","startDate","endDate","radiobutton","key5","datetime","key6","questionKey","style","map","err","i","question","className","htmlFor","hidden","data-text","label","readOnly","readonly","id","rows","onSelectionChange","multiple","serverUrl","displayField","filterCondition","onSubmit","preventDefault","OnSubmitCallback","field","BreakLine","cssProperties","initialDropDownStates","originalSelected","searchKey","icon","fontSize","checkedIcon","CustomDropDown","onCloseDropdown","onChangeDropdown","filter","reason","Autocomplete","onClose","disableCloseOnSelect","autoSelect","autoHighlight","getOptionLabel","option","renderOption","Fragment","Checkbox","marginRight","checked","width","renderInput","params","TextField","variant","placeholder","initialReferenceStates","ReferenceService","getByUrl","res","success","ReferenceList","referenceService","allReference","displayedData","newObj","p","indexOf","Object","keys","opt","ind","paddingRight","initialDateTimeStates","originalDateTime","undefined","DateTimeDiv","DateTime","handleChangeDateTime","date","dateFormat","minDate","Date","showTimeSelect","timeFormat","RadioButton","RadioGroup","aria-label","FormControlLabel","control","Radio","email","inputTypeDef","button","checkbox","datetimeLocal","file","image","month","number","password","radio","range","reset","search","submit","tel","text","time","week","Boolean","window","location","hostname","match","About","src","process","alt","title","href","rel","frameBorder","border","allowFullScreen","Home","opacity","backgroundColor","aria-hidden","height","Toolbar","logout","renderManagementLink","renderProfileLink","renderServiceLink","logoutUser","user","data-toggle","aria-expanded","firstName","lastName","to","onClick","result","zIndex","data-target","aria-controls","data-app-modern-menu","MapDispatchToProps","meta","connect","store","currentUser","Contact","data-form-type","action","method","data-form-title","data-form-email","data-form-alert","data-form-alert-danger","data-for","data-form-field","required","initialSignUpState","repassword","address","phone","redirectLoginPage","mandatoryFields","Container","LoginDiv","CustomTextBox","display","borderRadius","boxShadow","lineHeight","padding","TextCenter","textAlign","LinkA","a","SignUp","handleLogin","LoginRedirectLink","OnRegister","KeyValue","obj","Config","apiServiceURL","server","serverAPI","users","login","register","todo","activities","knowledgeBases","knowledgeArticles","projects","commonMessage","loginError","userNotFound","signUpError","alertVariants","primary","secondar","danger","warning","info","light","dark","activityStatus","defaultDropDownOptions","all","none","datetimeFormat","yyyyMMdd","ddMMyyyy","localStorageKey","appState","UserServiceApi","configs","axiosConfig","userLogin","userRegister","getAllUsers","getById","credentials","then","localStorage","setItem","catch","objs","User","userId","token","initialUserState","UserComponent","userService","getQuestion","handleSubmit","form","updateUser","questions","order","sort","b","withRouter","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","stopPropagation","SelectColumnFilter","useMemo","Set","row","values","add","fuzzyTextFilterFn","matchSorter","autoRemove","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","classes","useTheme","page","rowsPerPage","onChangePage","IconButton","direction","Math","ceil","max","position","shape","fade","palette","common","white","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","InputBase","input","inputProps","useToolbarStyles","formControl","minWidth","maxWidth","paddingLeft","highlight","secondary","main","lighten","flex","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","TableToolbar","numSelected","deleteRecordHandler","addRecordHandler","TableName","allColumns","showAddRecord","clsx","Tooltip","Typography","FormControl","InputLabel","Select","labelId","Input","renderValue","join","MenuItem","getToggleHiddenProps","ListItemText","Table","columns","fetchData","controlledPageCount","pageCount","skipPageReset","selectedId","showSelection","filterTypes","fuzzyText","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetPage","initialState","hiddenColumns","useGlobalFilter","useFilters","useSortBy","usePagination","useRowSelect","hooks","unshift","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","gotoPage","setPageSize","pageIndex","pageSize","selectedRowIds","TableContainer","selectedRowIndex","x","parseInt","selectedRecord","_","includes","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","canFilter","columnDisableGlobalFilter","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","colSpan","SelectProps","native","newPage","onChangeRowsPerPage","Number","ActionsComponent","UserContainer","allUser","userList","isLoading","getUserByFilter","deleteUserHandler","storeUser","pagination","startRow","endRow","slice","records","confirm","deleteRecords","accessor","original","exact","path","payload","ActivityService","getAllData","Project","manager","members","comments","createdBy","createdDate","updatedBy","updatedDate","comment","Activity","description","implemetationPlan","project","planDate","actualDate","status","assignedTo","ODateRange","initialActivityStates","activity","isEditRecord","Comment","userComment","commentDate","initialCommentStates","newComment","LeftDiv","RightDiv","ButtonCustom","ContainerInlineBlock","CommentDiv","CommentLog","handleSubmitComment","renderCommentTitle","commentedUser","toUTCString","onSubmitComment","dangerouslySetInnerHTML","__html","reverse","com","renderCommentRawHTML","CommonService","format","year","getFullYear","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","replace","toString","fixedFormatTwoDigit","object1","object2","obj1","obj2","entries","CommentLeftStyle","CommentRightStyle","CommentHeaderStyle","CommentBreakLineStyle","paddingTop","borderBottom","TextCenterStyle","ActivityComponent","activityService","commonService","renderCommentLog","convertFormToObject","getActivityUpdated","update","createNew","activityChanged","activityId","nComment","loginUser","updateComment","reload","ReactDOMServer","renderToString","convertDateToStringByFormat","currentAct","formAct","searchBar","ActivityContainer","allActivity","activityList","redirectCreateNew","getActivityByFilter","deleteActivityHandler","addActivityHandler","redirectToCreateNew","storeActivities","acts","initialLoginState","rememberMe","redirectForgotPassword","redirectRegisterPage","LinkDiv","Login","handleChangeByClick","handleForgotPassowrd","handleRegisterPage","ForgotPasswordRedirectLink","RegisterPageRedirectLink","OnLogin","KnowledgeBaseService","KnowledgeBase","owner","initialKnowledgeBaseStates","knowledgeBase","KnowledgeBaseComponent","knowledgeBaseService","getKnowledgeBaseUpdated","knowledgeBaseChanged","knowledgeBaseId","KnowledgeBaseContainer","allKnowledgeBase","knowledgeBaseList","getKnowledgeBaseByFilter","deleteKnowledgeBaseHandler","addKnowledgeBaseHandler","storeKnowledgeBases","KnowledgeArticleService","KnowledgeArticle","shortDescription","contents","reviewer","version","initialKnowledgeArticleStates","knowledgeArticle","DownloadContainerDiv","dropdownStyle","fontWeight","DocumentViewer","printWindow","open","document","write","close","print","Dropdown","Toggle","Menu","Item","handleOnclick","fontFamily","PreviewContainerDiv","KnowledgeArticleComponent","knowledgeArticleService","Button","contentStyle","overflow","KnowledgeArticleContainer","allKnowledgeArticle","knowledgeArticleList","getKnowledgeArticleByFilter","deleteKnowledgeArticleHandler","addKnowledgeArticleHandler","storeKnowledgeArticles","ProjectService","initialProjectStates","ProjectComponent","projectService","getProjectUpdated","projectId","projectChanged","record","ProjectContainer","allProject","projectList","getProjectByFilter","deleteProjectHandler","addProjectHandler","storeProjects","updateRequest","noRequests","updateAlert","alert","SecureRoute","isUnauthorize","component","Route","Page401","minHeight","App","redirectLogin","redirectHome","handleOnSubmitLoginForm","handleOnSubmitRegisterForm","handleRenderRedirectRouter","username","show","newUser","mapDispatchToProps","Footer","REACT_APP_ACTIVITY_LOGS_SERVER","alertConfig","persistConfig","storage","rootReducer","combineReducers","persistedReducer","persistReducer","middlewares","thunkMiddleware","middlewareConfig","interceptors","req","getState","dispatch","getSourceAction","Authorization","middleWareEnhancer","applyMiddleware","axiosMiddleware","createStore","composeWithDevTools","persistor","persistStore","override","css","LoadingSpinner","size","loading","PureComponent","CloseButton","AlertStyle","GlobalAlert","setTimeout","timeKeepAlive","Alert","handleOnCloseButton","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message","qs","timeout","baseURL","Accept","paramsSerializer","indices","initialDateRangeStates","originalDateRange","StartDateDiv","EndDateDiv","DateRange","handleChangeStartDate","handleChangeEndDate","maxDate"],"mappings":"4LAkMaA,EAAY,I,WAlKrB,WAAmBC,GAA8B,yBARjDC,qBAQgD,OAPhDC,SAOgD,EAC5CC,KAAKD,IAAME,IAAMC,OAAOL,GACxBG,KAAKF,gBAAkB,EAEvBE,KAAKG,OAASH,KAAKG,OAAOC,KAAKJ,MAC/BA,KAAKK,QAAUL,KAAKK,QAAQD,KAAKJ,MACjCA,KAAKM,IAAMN,KAAKM,IAAIF,KAAKJ,MACzBA,KAAKO,OAASP,KAAKO,OAAOH,KAAKJ,MAC/BA,KAAKQ,KAAOR,KAAKQ,KAAKJ,KAAKJ,MAC3BA,KAAKS,KAAOT,KAAKS,KAAKL,KAAKJ,MAC3BA,KAAKU,IAAMV,KAAKU,IAAIN,KAAKJ,MACzBA,KAAKW,MAAQX,KAAKW,MAAMP,KAAKJ,M,mDAUnBH,GACV,OAAOG,KAAKD,IAAII,OAAON,K,8BAwBaA,GACpC,OAAOG,KAAKD,IAAIM,QAAQR,K,0BAcQe,EAAaf,GAC7C,OAAOG,KAAKD,IAAIO,IAAIM,EAAKf,K,6BAcUe,EAAaf,GAChD,OAAOG,KAAKD,IAAIQ,OAAOK,EAAKf,K,2BAcKe,EAAaf,GAC9C,OAAOG,KAAKD,IAAIS,KAAKI,EAAKf,K,2BAgBUe,EAAaC,EAAUhB,GAC3D,OAAOG,KAAKD,IAAIU,KAAKG,EAAKC,EAAMhB,K,0BAgBGe,EAAaC,EAAUhB,GAC1D,OAAOG,KAAKD,IAAIW,IAAIE,EAAKC,EAAMhB,K,4BAgBMe,EAAaC,EAAUhB,GAC5D,OAAOG,KAAKD,IAAIY,MAAMC,EAAKC,EAAMhB,K,8BAUnBiB,GACd,OAAOA,EAASD,O,4BAGPE,GACT,MAAMA,M,KAIW,CAAQC,M,oKC/LpBC,EAAb,kDAIE,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAJRC,YAAc,GAGY,EAF1BD,QAA0C,GAIxC,EAAKA,QAAUA,EAAO,SAAe,GACrC,EAAKC,aAAc,IAAIC,KAAaC,oBAAoBC,SAHhC,EAJ5B,UAAsCC,M,8GCAzBC,EAAb,kDAIE,WAAYN,GAAe,IAAD,8BACxB,cAAMA,IAJRC,YAAc,GAGY,EAF1BM,UAE0B,EAExB,EAAKA,KAAOP,EAAO,MAAY,GAC/B,EAAKC,aAAc,IAAIC,KAAaC,oBAAoBK,SAHhC,EAJ5B,UAAsCH,M,8GCAzBI,EAAb,kDAIE,WAAYT,GAAe,IAAD,8BACxB,cAAMA,IAJRC,YAAc,GAGY,EAF1BM,UAE0B,EAExB,EAAKA,KAAOP,EAAO,MAAY,GAC/B,EAAKC,aAAc,IAAIC,KAAaC,oBAAoBO,QAHhC,EAJ5B,UAAqCL,M,8GCCxBM,EAAb,kDAGE,WAAYX,GAAe,IAAD,8BACxB,cAAMA,IAHRC,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBS,UAFhC,EAH5B,UAAuCP,M,8GCD1BQ,EAAb,kDAGE,WAAYb,GAAe,IAAD,8BACxB,cAAMA,IAHRC,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBW,UAFhC,EAH5B,UAAuCT,M,4ECADA,K,4ECAGA,K,8GCA5BU,EAAb,kDAGE,WAAYf,GAAe,IAAD,8BACxB,cAAMA,IAHRC,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBa,SAFhC,EAH5B,UAAsCX,M,0RCItC,IAAMY,EAAeC,IAAOC,IAAV,KAILC,EAAb,uKAEc,IAAD,OACL,OACI,kBAACH,EAAD,KACI,kBAAC,IAAD,CACII,OAAQC,IACR3B,KAAMb,KAAKyC,MAAM5B,KACjB6B,OAAQ,SAAAH,GAEJI,QAAQC,IAAI,0BAA2BL,IAE3CM,SAAU,SAACC,EAAOP,GACd,IAAM1B,EAAO0B,EAAOQ,UACpBJ,QAAQC,IAAI,CAAEE,QAAOP,SAAQ1B,SAC7B,EAAK4B,MAAMO,WAAWnC,EAAM,EAAK4B,MAAMQ,cAE3CC,OAAQ,SAACJ,EAAOP,GACZI,QAAQC,IAAI,QAASL,IAEzBY,QAAS,SAACL,EAAOP,GACbI,QAAQC,IAAI,SAAUL,WArB9C,GAAmCa,IAAMC,W,uECEzC,IAAMlB,EAAeC,IAAOC,IAAV,KAEZiB,EAAkC,CACpCC,MAAO,MACPC,UAAW,UAETC,EAA+B,CACjCC,OAAQ,GAECC,EAAb,kDAEI,WAAYlB,GAA0B,IAAD,8BACjC,cAAMA,IAFVmB,gBACqC,EAGjC,EAAKA,WAAa,IAAIxC,IACtB,EAAKyC,MAAQ,CACTC,mBAAoB,GACpBC,WAAY,GACZC,OAAQ,GACRC,qBAAqB,GAGzB,EAAKC,mBAAqB,EAAKA,mBAAmB9D,KAAxB,gBAC1B,EAAK+D,eAAiB,EAAKA,eAAe/D,KAApB,gBACtB,EAAKgE,aAAe,EAAKA,aAAahE,KAAlB,gBAEpB,EAAKiE,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKkE,0BAA4B,EAAKA,0BAA0BlE,KAA/B,gBACjC,EAAKmE,+BAAiC,EAAKA,+BAA+BnE,KAApC,gBACtC,EAAKoE,2BAA6B,EAAKA,2BAA2BpE,KAAhC,gBAClC,EAAKqE,iBAAmB,EAAKA,iBAAiBrE,KAAtB,gBACxB,EAAKsE,0BAA4B,EAAKA,0BAA0BtE,KAA/B,gBACjC,EAAKuE,uBAAyB,EAAKA,uBAAuBvE,KAA5B,gBArBG,EAFzC,gEA4BQ,IAAI2D,EAAmC,GACvC/D,KAAKyC,MAAMmC,WAAWC,SAAQ,SAACC,GAC3Bf,EAAWe,EAAIC,KAAOD,EAAIE,SAE9BhF,KAAKiF,SAAS,CACVlB,WAAYA,EACZD,mBAAoBoB,KAAKC,MAAMD,KAAKE,UAAUrB,QAlC1D,2CAsC0B,IAAD,OAEbA,EAAmC,GACvC/D,KAAKyC,MAAMmC,WAAWC,SAAQ,SAACC,GAC3Bf,EAAWe,EAAIC,KAAOD,EAAIE,SAG1BE,KAAKE,UAAUpF,KAAK6D,MAAMC,sBAAwBoB,KAAKE,UAAUrB,IACjE/D,KAAKiF,SAAS,CACVlB,WAAYA,EACZD,mBAAoBoB,KAAKC,MAAMD,KAAKE,UAAUrB,MAC/C,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBAvDpB,iDAiE+BuB,GAAqB,IAAD,OACvCxB,EAAa/D,KAAK6D,MAAME,WACxByB,EAA2BD,EAAEzD,UACjCiC,EAAWwB,EAAEE,cAAgBD,EAC7BxF,KAAKiF,SAAS,CACVlB,WAAYA,IACb,WAAO,IAAD,EACmB,EAAKK,eAAvBJ,EADD,EACCA,OACFqB,GAFC,EACSC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBA5EhB,6CAqF2BgB,GAA2B,IAAD,OACzCjB,EAAa/D,KAAK6D,MAAME,WAC5BA,EAAWiB,EAAMS,cAAgBT,EAAMA,MAAQE,KAAKC,MAAMH,EAAMA,OAASA,EAAMA,MAE/EhF,KAAKiF,SAAgB,CACjBlB,eACD,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBAjGhB,gDA0G8BuB,GAAoB,IAAD,OACrCxB,EAAa/D,KAAK6D,MAAME,WACxB2B,EAAUH,EAAEI,SAChB5B,EAAWwB,EAAEE,cAAgBC,EAE7B1F,KAAKiF,SAAS,CACVlB,WAAYA,IACb,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBAvHhB,qDAgImCuB,GAAqB,IAAD,OAC3CxB,EAAa/D,KAAK6D,MAAME,WAC5BA,EAAWwB,EAAEE,cAAgBF,EAAEK,SAE/B5F,KAAKiF,SAAS,CACVlB,eACD,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBA5IhB,gDAqJ8BuB,GAAoB,IAAD,OACrCxB,EAAa/D,KAAK6D,MAAME,WAC5BA,EAAWwB,EAAEM,aAAeN,EAAEK,SAE9B5F,KAAKiF,SAAgB,CACjBlB,eACD,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBAjKhB,mCA0KiBlB,GAAa,IAAD,SACGA,EAAMgD,OAAtBC,EADa,EACbA,KAAMf,EADO,EACPA,MACVjB,EAAa/D,KAAK6D,MAAME,WAC5BA,EAAWgC,GAAQf,EAEnBhF,KAAKiF,SAAgB,CACjBlB,eACD,WAAM,MAEmB,EAAKK,eAAvBJ,EAFD,EAECA,OACFqB,GAHC,EAESC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBAvLhB,uCAiMqBgC,EAAajB,GAAc,IAAD,OACnChB,EAAa/D,KAAK6D,MAAME,WAC5BA,EAAWgB,GAAOiB,EAClBhG,KAAKiF,SAAgB,CACjBlB,eACD,WAAO,IAAD,EACmB,EAAKK,eAAvBJ,EADD,EACCA,OACFqB,GAFC,EACSC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gBA3MhB,qCAmNoB,IAAD,OACPsB,GAAQ,EACRtB,EAAoC,GAuIxC,IAAK,IAAIe,KAtIT/E,KAAKyC,MAAMmC,WAAWC,SAAQ,SAAAoB,GAE1B,OADAjC,EAAOiC,EAAQlB,KAAO,GACdkB,EAAQ9E,aAEZ,KAAK,EAAKyC,WAAWvC,oBAAoBO,QACzC,KAAK,EAAKgC,WAAWvC,oBAAoBK,SACrC,IAAK,IAAIwE,KAAQD,EAAQE,WACrB,OAAQD,GAEJ,KAAK,EAAKtC,WAAWwC,eAAeC,QAC1B,EAAKxC,MAAME,WAAWkC,EAAQlB,MAA+C,KAAvC,EAAKlB,MAAME,WAAWkC,EAAQlB,MACtEf,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWD,GAAMK,cAGjC,MAEJ,KAAK,EAAK3C,WAAWwC,eAAeI,UAC1B,EAAK3C,MAAME,WAAWkC,EAAQlB,MAAQ,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAK0B,QAAUR,EAAQE,WAAWpB,GAAKC,OAC7GhB,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWD,GAAMK,cAGjC,MAEJ,KAAK,EAAK3C,WAAWwC,eAAeM,UAC1B,EAAK7C,MAAME,WAAWkC,EAAQlB,MAAQ,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAK0B,QAAUR,EAAQE,WAAWpB,GAAKC,OAC7GhB,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWD,GAAMK,cAQ7C,MAEJ,KAAK,EAAK3C,WAAWvC,oBAAoBW,UACrC,IAAK,IAAI2E,KAAQV,EAAQE,WACrB,OAAQQ,GAEJ,KAAK,EAAK/C,WAAWwC,eAAeC,QAC3B,EAAKxC,MAAME,WAAWkC,EAAQlB,MAAkD,MAA1C,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAK6B,KAC1E5C,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWQ,GAAMJ,cAQ7C,MAEJ,KAAK,EAAK3C,WAAWvC,oBAAoBC,SACrC,IAAK,IAAIuF,KAAQZ,EAAQE,WACrB,OAAQU,GAEJ,KAAK,EAAKjD,WAAWwC,eAAeC,QAE3B,EAAKxC,MAAME,WAAWkC,EAAQlB,MAC3B,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAKA,KACO,IAA3C,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAKA,KAEtCf,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWU,GAAMN,cAQ7C,MAEJ,KAAK,EAAK3C,WAAWvC,oBAAoBS,UACrC,IAAK,IAAIgF,KAAQb,EAAQE,WACrB,OAAQW,GACJ,KAAK,EAAKlD,WAAWwC,eAAeC,QAE3B,EAAKxC,MAAME,WAAWkC,EAAQlB,MACiB,MAAhD,EAAKlB,MAAME,WAAWkC,EAAQlB,KAAKgC,WACW,MAA9C,EAAKlD,MAAME,WAAWkC,EAAQlB,KAAKiC,SACnChD,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWW,GAAMP,cAQ7C,MAEJ,KAAK,EAAK3C,WAAWvC,oBAAoB4F,YACrC,IAAK,IAAIC,KAAQjB,EAAQE,WACrB,OAAQe,GAEJ,KAAK,EAAKtD,WAAWwC,eAAeC,QAC3B,EAAKxC,MAAME,WAAWkC,EAAQlB,MAC/Bf,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWe,GAAMX,cAQ7C,MAEJ,KAAK,EAAK3C,WAAWvC,oBAAoB8F,SACrC,IAAK,IAAIC,KAAQnB,EAAQE,WACrB,OAAQiB,GAEJ,KAAK,EAAKxD,WAAWwC,eAAeC,QAC3B,EAAKxC,MAAME,WAAWkC,EAAQlB,MAC/Bf,EAAOiC,EAAQlB,KAAKuB,KAChBL,EAAQE,WAAWiB,GAAMb,mBAezCvC,EACZ,GAAIA,EAAOe,GAAK0B,OAAS,EAAG,CACxBnB,GAAQ,EACR,MAGR,MAAO,CAAEtB,SAAQsB,WAlWzB,yCAyWuB+B,GAEf,IAAIrD,EAAShE,KAAK6D,MAAMG,OAAOqD,GAE/B,GAAKrD,EAEL,OACI,yBAAKsD,MAAOhE,GAEJU,EAAOuD,KAAI,SAACC,EAAKC,GAAN,OACP,yBAAK1C,IAAK0C,GACN,8BAAOD,UApXnC,qCAgYmBE,GAEX,OAAQA,EAASvG,aAEb,KAAKnB,KAAK4D,WAAWvC,oBAAoBO,QACrC,OACI,8BAAUmD,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,2BAAOJ,UAAU,eACb9E,SAAU7C,KAAKqE,aACf2D,SAAUN,EAASO,SACnBxG,KAAMiG,EAASjG,KACfsE,KAAM2B,EAAS3C,IACfC,MAAOhF,KAAK6D,MAAME,WAAW2D,EAAS3C,MAAQ,GAC9CmD,GAAIR,EAAS3C,MAChB/E,KAAKkE,mBAAmBwD,EAAS3C,MAI9C,KAAK/E,KAAK4D,WAAWvC,oBAAoBK,SACrC,OACI,8BAAUqD,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,8BAAUJ,UAAU,eAChB9E,SAAU7C,KAAKqE,aACf2D,SAAUN,EAASO,SACnBE,KAAMT,EAASS,KACfpC,KAAM2B,EAAS3C,IACfC,MAAOhF,KAAK6D,MAAME,WAAW2D,EAAS3C,KACtCmD,GAAIR,EAAS3C,MAChB/E,KAAKkE,mBAAmBwD,EAAS3C,MAI9C,KAAK/E,KAAK4D,WAAWvC,oBAAoBC,SACrC,OACI,8BAAUyD,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,kBAAC,IAAD,CACInC,SAAU8B,EAAS1C,MACnBa,YAAa6B,EAAS3C,IACtBqD,kBAAmBpI,KAAKsE,0BACxBpD,QAASwG,EAASxG,QAClBmH,SAAUX,EAASW,WAEtBrI,KAAKkE,mBAAmBwD,EAAS3C,MAI9C,KAAK/E,KAAK4D,WAAWvC,oBAAoBW,UACrC,OACI,8BAAU+C,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAIvH,kBAAC,IAAD,CAAeO,UAAWZ,EAASY,UAC/BC,aAAcb,EAASa,aACvBxE,WAAY2D,EAAS3D,WACrByE,gBAAiBd,EAASc,gBAC1B/C,aAAciC,EAAS3C,IACvBa,SAAU8B,EAAS1C,MACnBoD,kBAAmBpI,KAAKuE,+BACxB8D,SAAUX,EAASW,WAI1BrI,KAAKkE,mBAAmBwD,EAAS3C,MAG9C,KAAK/E,KAAK4D,WAAWvC,oBAAoBS,UACrC,OACI,8BAAUiD,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,kBAAC,IAAD,CAAWtC,aAAciC,EAAS3C,IAC9BjD,UAAW4F,EAAS1C,MACpBoD,kBAAmBpI,KAAKwE,6BAE3BxE,KAAKkE,mBAAmBwD,EAAS3C,MAG9C,KAAK/E,KAAK4D,WAAWvC,oBAAoBa,SACrC,OACI,8BAAU6C,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,kBAAC,EAAD,CACIlH,KAAM6G,EAAS1C,MACfhC,WAAYhD,KAAKyE,iBACjBxB,YAAayE,EAAS3C,MAEzB/E,KAAKkE,mBAAmBwD,EAAS3C,MAI9C,KAAK/E,KAAK4D,WAAWvC,oBAAoB8F,SACrC,OACI,8BAAUpC,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,kBAAC,IAAD,CAAUtC,aAAciC,EAAS3C,IAC7BY,SAAU+B,EAAS1C,MACnBoD,kBAAmBpI,KAAK0E,4BAE3B1E,KAAKkE,mBAAmBwD,EAAS3C,MAI9C,KAAK/E,KAAK4D,WAAWvC,oBAAoB4F,YACrC,OACI,8BAAUlC,IAAK2C,EAAS3C,IAAK4C,UAAU,cACnC,2BAAOC,QAASF,EAAS3C,KACrB,0BAAM8C,QAASH,EAASvB,WAAT,SAAiCmB,MAAOhE,GAAvD,MAA4E,0BAAMwE,YAAWJ,EAASK,OAAQL,EAASK,QAE3H,kBAAC,IAAD,CAAaK,kBAAmBpI,KAAK2E,uBACjCc,aAAciC,EAAS3C,IACvB7D,QAASwG,EAASxG,UACrBlB,KAAKkE,mBAAmBwD,EAAS3C,SAhgB1D,+BAwgBc,IAAD,OACL,OACI,kBAAC,EAAD,KACI,0BAAM0D,SAAU,SAAClD,GAAQA,EAAEmD,iBAAkB,EAAKjG,MAAMkG,iBAAiB,EAAK9E,SACzE7D,KAAKyC,MAAMmC,WAAW2C,KAAI,SAACqB,EAAOnB,GAAR,OACvB,EAAKtD,eAAeyE,MAExB,2BAAOtB,MAAO7D,EACVhC,KAAK,SACLuD,MAAM,SACNK,SAAUrF,KAAK6D,MAAMI,oBACrB0D,UAAU,oCAnhBlC,GAAiCvE,IAAMC,Y,gCCtBvC,+kC,0kBCEA,IAAMlB,EAAeC,IAAOC,IAAV,KAQLwG,EAAb,uKAGQ,OACI7I,KAAKyC,MAAMqG,cAEP,yBAAKxB,MAAOtH,KAAKyC,MAAMqG,gBAIvB,kBAAC3G,EAAD,UAVhB,GAA+BiB,IAAMC,W,eCOxB0F,EAAwC,CACjDlD,YAAa,GACbmD,iBAAkB,KAElBpD,SAAU,KACVqD,UAAW,I,+DCdTC,G,OAAO,kBAAC,IAAD,CAA0BC,SAAS,WAC1CC,EAAc,kBAAC,IAAD,CAAcD,SAAS,UAE9BE,EAAb,kDACI,WAAY5G,GAAuB,IAAD,8BAC9B,cAAMA,IAEDoB,MAAQkF,EACb,EAAKO,gBAAkB,EAAKA,gBAAgBlJ,KAArB,gBACvB,EAAKmJ,iBAAmB,EAAKA,iBAAiBnJ,KAAtB,gBALM,EADtC,gEAWQ,IAAIwF,EAAW5F,KAAK6D,MAAM+B,SACtB5F,KAAKyC,MAAMmD,WACXA,EAAW5F,KAAKyC,MAAMmD,UAGtB5F,KAAKyC,MAAM4F,WACXzC,EAAW,GACX5F,KAAKyC,MAAMvB,QAAQ2D,SAAQ,SAACG,GACpBY,GAAmG,IAAtFA,EAAmB4D,QAAO,SAAC1E,GAAU,OAAOA,EAAG,MAAYE,EAAK,OAAWyB,QACxFb,EAASU,KAAKtB,OAI1BhF,KAAKiF,SAAS,CACVW,SAAUA,EACVoD,iBAAkB9D,KAAKC,MAAMD,KAAKE,UAAUQ,IAC5CC,YAAa7F,KAAKyC,MAAMoD,gBA3BpC,2CA+B0B,IAAD,OAEjB,GAAIX,KAAKE,UAAUpF,KAAK6D,MAAMmF,oBAAsB9D,KAAKE,UAAUpF,KAAKyC,MAAMmD,UAAW,CAErF,IAAIA,EAAW5F,KAAKyC,MAAMmD,SACtB5F,KAAKyC,MAAM4F,WACXzC,EAAW,GACX5F,KAAKyC,MAAMvB,QAAQ2D,SAAQ,SAACG,GACpB,EAAKvC,MAAMmD,UAA8G,IAAjG,EAAKnD,MAAMmD,SAAmB4D,QAAO,SAAC1E,GAAU,OAAOA,EAAG,MAAYE,EAAK,OAAWyB,QAC9Gb,EAASU,KAAKtB,OAK1BhF,KAAKiF,SAAS,CACVW,SAAUA,EACVoD,iBAAkB9D,KAAKC,MAAMD,KAAKE,UAAUQ,SA/C5D,sCAyDoB9C,EAA8B2G,GAE1CzJ,KAAKyC,MAAM2F,kBAAkBpI,KAAK6D,SA3D1C,uCAoEqBf,EAA8BkC,EAAYyE,GAAmC,IAAD,OACzFzJ,KAAKiF,SAAS,CACVW,SAAUZ,IACX,WACC,EAAKvC,MAAM2F,kBAAkB,EAAKvE,YAxE9C,+BA4Ec,IAAD,OACL,OACI,kBAAC6F,EAAA,EAAD,CACIrB,SAAUrI,KAAKyC,MAAM4F,SACrBH,GAAG,mBACHP,UAAU,aACV3C,MAAQhF,KAAKyC,MAAM4F,WAAarI,KAAK6D,MAAM+B,SAAY,GAAK5F,KAAK6D,MAAM+B,SACvE+D,QAAS3J,KAAKsJ,gBACdzG,SAAU7C,KAAKuJ,iBACfrI,QAASlB,KAAKyC,MAAMvB,QACpB0I,qBAAsB5J,KAAKyC,MAAM4F,SACjCwB,YAAU,EACVC,eAAa,EACbC,eAAgB,SAACC,GAAD,OAAYA,EAAM,MAAYA,EAAM,MAAY,IAChEC,aAAc,SAACD,EAAD,OAAWpE,EAAX,EAAWA,SAAX,OACV,kBAAC,IAAMsE,SAAP,KAEQ,EAAKzH,MAAM4F,SAEH,kBAAC8B,EAAA,EAAD,CACIjB,KAAMA,EACNE,YAAaA,EACb9B,MAAO,CAAE8C,YAAa,GACtBC,QAASzE,IAIhB,GAET,8BAAOoE,EAAOhF,SAGtBsC,MAAO,CAAEgD,MAAO,QAChBC,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,QAAQ,WAAW3C,MAAM,sBAAsB4C,YAAY,iCA9GtG,GAAoCvH,IAAMC,W,wBCO7BuH,EAA0C,CACnDnF,aAAc,GACduD,iBAAkB,KAClBpD,SAAU,KACV/E,KAAM,I,iBClBGgK,EAAb,WACI,WAAYhL,GAA6B,oBACrCG,KAAK8K,SAAW9K,KAAK8K,SAAS1K,KAAKJ,MAF3C,8FAQ0BY,GAR1B,gGAUoDhB,IAAUU,IAA+BM,GAV7F,cAUkBmK,EAVlB,yBAWmBnL,IAAUoL,QAAQD,IAXrC,kK,QCMM7B,EAAO,kBAAC,IAAD,CAA0BC,SAAS,UAC1CC,EAAc,kBAAC,IAAD,CAAcD,SAAS,UAC9B8B,EAAb,kDAEI,WAAYxI,GAAwB,IAAD,8BAC/B,cAAMA,IAFVyI,sBACmC,EAG/B,EAAKrH,MAAQ+G,EACb,EAAKM,iBAAmB,IAAIL,EAAiB7J,KAC7C,EAAKsI,gBAAkB,EAAKA,gBAAgBlJ,KAArB,gBACvB,EAAKmJ,iBAAmB,EAAKA,iBAAiBnJ,KAAtB,gBANO,EAFvC,kMAaYwF,EAAW5F,KAAK6D,MAAM+B,SACtB5F,KAAKyC,MAAMmD,WACXA,EAAW5F,KAAKyC,MAAMmD,UAflC,SAiBiC5F,KAAKkL,iBAAiBJ,SAAS9K,KAAKyC,MAAM6F,WAjB3E,OAiBY6C,EAjBZ,OAkBYC,EAAuB,GAC3BD,EAAatG,SAAQ,SAAAoB,UACVA,EAAO,iBACPA,EAAO,mBACPA,EAAO,iBACPA,EAAO,YACd,IAAIoF,EAASnG,KAAKC,MAAMD,KAAKE,UAAUa,IAEvC,GAAI,EAAKxD,MAAMsB,WAAY,CACvB,IAAK,IAAIuH,KAAKD,GACgC,IAAtC,EAAK5I,MAAMsB,WAAWwH,QAAQD,IAAmB,QAANA,GAAeA,IAAM,EAAK7I,MAAM8F,qBACpE8C,EAAOC,GAGtBF,EAAc9E,KAAK+E,OAIvBrL,KAAKyC,MAAM4F,WACXzC,EAAW,GACXwF,EAAcvG,SAAQ,SAACG,GACfY,GAAmG,IAAtFA,EAAmB4D,QAAO,SAAC1E,GAAU,OAAOA,EAAG,MAAYE,EAAK,OAAWyB,QACxFb,EAASU,KAAKtB,OAK1BhF,KAAKiF,SAAS,CACVW,SAAUA,EACVoD,iBAAkB9D,KAAKC,MAAMD,KAAKE,UAAUQ,IAC5CH,aAAczF,KAAKyC,MAAMgD,aACzB5E,KAAMuK,IAjDlB,iJAqD0B,IAAD,OAEjB,GAAIlG,KAAKE,UAAUpF,KAAK6D,MAAMmF,oBAAsB9D,KAAKE,UAAUpF,KAAKyC,MAAMmD,UAAW,CAErF,IAAIA,EAAW5F,KAAKyC,MAAMmD,SACtB5F,KAAKyC,MAAM4F,WACXzC,EAAW,GACX5F,KAAK6D,MAAMhD,KAAKgE,SAAQ,SAACG,GACjB,EAAKvC,MAAMmD,UAA8G,IAAjG,EAAKnD,MAAMmD,SAAmB4D,QAAO,SAAC1E,GAAU,OAAOA,EAAG,MAAYE,EAAK,OAAWyB,QAC9Gb,EAASU,KAAKtB,OAI1BhF,KAAKiF,SAAS,CACVW,SAAUA,EACVoD,iBAAkB9D,KAAKC,MAAMD,KAAKE,UAAUQ,SApE5D,sCA8EoB9C,EAA8B2G,GAE1CzJ,KAAKyC,MAAM2F,kBAAkBpI,KAAK6D,SAhF1C,uCAyFqBf,EAA8BkC,EAAYyE,GAAmC,IAAD,OACzFzJ,KAAKiF,SAAS,CACVW,SAAUZ,IACX,WACC,EAAKvC,MAAM2F,kBAAkB,EAAKvE,YA7F9C,+BAiGc,IAAD,OACL,OACI,kBAAC6F,EAAA,EAAD,CACIrB,SAAUrI,KAAKyC,MAAM4F,SACrBH,GAAG,mBACHP,UAAU,aACV3C,MAAQhF,KAAKyC,MAAM4F,WAAarI,KAAK6D,MAAM+B,SAAY,GAAK5F,KAAK6D,MAAM+B,SACvE+D,QAAS3J,KAAKsJ,gBACdzG,SAAU7C,KAAKuJ,iBACfrI,QAASlB,KAAK6D,MAAMhD,KACpB+I,qBAAsB5J,KAAKyC,MAAM4F,SACjCwB,YAAU,EACVC,eAAa,EACbC,eAAgB,SAACC,GAAD,OAAYA,EAAO,EAAKvH,MAAM8F,eAC9C0B,aAAc,SAACD,EAAD,OAAWpE,EAAX,EAAWA,SAAX,OACV,kBAAC,IAAMsE,SAAP,KAEQ,EAAKzH,MAAM4F,SAEH,kBAAC8B,EAAA,EAAD,CACIjB,KAAMA,EACNE,YAAaA,EACb9B,MAAO,CAAE8C,YAAa,GACtBC,QAASzE,IAIhB,GAGL4F,OAAOC,KAAKzB,GAAQR,QAAO,SAAC1E,GACxB,MAAe,QAARA,KACRyC,KAAI,SAACmE,EAAKC,GAAN,OACH,0BAAMhE,UAAU,aAAaL,MAAO,CAAEsE,aAAc,QAAU7G,IAAK4G,GAAM3B,EAAO0B,SAKhGpE,MAAO,CAAEgD,MAAO,QAChBC,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,QAAQ,WAAW3C,MAAM,sBAAsB4C,YAAY,iCAzItG,GAAmCvH,IAAMC,W,iBCA5BwI,G,OAAwC,CACjDpG,aAAc,GACdqG,sBAAkBC,EAClBpG,cAAUoG,I,qNCJd,IAAM5J,EAAeC,IAAOC,IAAV,KAGZ2J,EAAc5J,IAAOC,IAAV,KAIJ4J,EAAb,kDACI,WAAYxJ,GAAuB,IAAD,8BAC9B,cAAMA,IACDoB,MAAQgI,EACb,EAAKK,qBAAuB,EAAKA,qBAAqB9L,KAA1B,gBAHE,EADtC,gEAQQ,IAAIuF,EAAW3F,KAAKyC,MAAMkD,SAAW3F,KAAKyC,MAAMkD,cAAWoG,EAC3D/L,KAAKiF,SAAS,CACVQ,aAAczF,KAAKyC,MAAMgD,aACzBE,SAAUA,EACVmG,iBAAkB9L,KAAKyC,MAAMkD,SAAWT,KAAKC,MAAMD,KAAKE,UAAUO,SAAaoG,MAZ3F,2CAiBW/L,KAAKyC,MAAMkD,UAENT,KAAKE,UAAUpF,KAAK6D,MAAMiI,oBAAsB5G,KAAKE,UAAUpF,KAAKyC,MAAMkD,WAC1E3F,KAAKiF,SAAS,CACVU,SAAU3F,KAAKyC,MAAMkD,SACrBmG,iBAAkB5G,KAAKC,MAAMD,KAAKE,UAAUpF,KAAKyC,MAAMkD,eAtB3E,2CAgCyBwG,GAAa,IAAD,OAC7BxJ,QAAQC,IAAIuJ,GACZnM,KAAKiF,SAAS,CACVU,SAAUwG,IACX,WACC,EAAK1J,MAAM2F,kBAAkB,EAAKvE,YArC9C,+BA0CQ,OACI,kBAAC,EAAD,KACI,kBAACmI,EAAD,KACI,kBAAC,IAAD,CACII,WAAW,oBACXC,QAAS,IAAIC,KACb1G,SAAU5F,KAAK6D,MAAM8B,SACrB4G,gBAAc,EACdC,WAAW,QACX3J,SAAU7C,KAAKkM,6BAnDvC,GAA8B9I,IAAMC,W,2BCJvBoJ,EAAb,kDACI,WAAYhK,GAA0B,IAAD,8BACjC,cAAMA,IACDoB,MAAQ,CACTmB,MAAO,KACPS,aAAc,EAAKhD,MAAMgD,cAG7B,EAAKpB,aAAe,EAAKA,aAAajE,KAAlB,gBAPa,EADzC,yDAeiB0C,GAA6C,IAAD,OACrD9C,KAAKiF,SAAS,CACVD,MAAQlC,EAAMgD,OAA4Bd,QAC3C,WACC,EAAKvC,MAAM2F,kBAAkB,EAAKvE,YAnB9C,+BAuBc,IAAD,EACL,OACI,kBAAC6I,EAAA,EAAD,CAAYC,aAAW,SACnB5G,KAAK,UACLf,MAAOhF,KAAK6D,MAAMmB,MAClBnC,SAAU7C,KAAKqE,cAHnB,UAKQrE,KAAKyC,MAAMvB,eALnB,aAKQ,EAAoBqG,KAAI,SAACzC,GAAD,OACpB,kBAAC8H,EAAA,EAAD,CAAkB5H,MAAOE,KAAKE,UAAUN,GACpCC,IAAG,UAAKD,EAAIC,IAAT,gBACH8H,QAAS,kBAACC,EAAA,EAAD,MACT/E,MAAOjD,EAAIE,gBAlCvC,GAAiC5B,IAAMC,Y,qKCd1BjC,EAAb,sCACIgF,eAAiB,CACbC,QAAS,WACTG,UAAW,YACXE,UAAW,YACXqG,MAAO,SALf,KAQIC,aAAe,CACXC,OAAQ,SACRC,SAAU,WACV3J,MAAO,QACP4I,KAAM,OACNhF,SAAU,WACVgG,cAAe,iBACfJ,MAAO,QACPK,KAAM,OACNvF,OAAQ,SACRwF,MAAO,QACPC,MAAO,QACPC,OAAQ,SACRC,SAAU,WACVC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,IAAK,MACLC,KAAM,OACNC,KAAM,OACNpN,IAAK,MACLqN,KAAM,QA/Bd,KAkCI5M,oBAAsB,CAClBO,QAAS,UACTF,SAAU,WACVJ,SAAU,WACVU,UAAW,YACXF,UAAW,YACXI,SAAU,WACViF,SAAU,WACVF,YAAa,iB,mMC9BDiH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oGCjBOC,G,OAAb,uKAUQ,OACI,yBAAKjH,MALY,CACjBgD,MAAO,MACP5G,OAAQ,SAIJ,6BAASiE,UAAU,uBAAuBO,GAAG,WACzC,yBAAKP,UAAU,0BACX,wBAAIA,UAAU,oDAAd,oBAGA,wBAAIA,UAAU,iEAAd,kLAGA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAK6G,IAAG,UAAKC,gBAAL,4BAAuDC,IAAI,GAAGC,MAAM,MAEhF,yBAAKhH,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,iBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGiH,KAAK,+BAA+BC,IAAI,sBAAsB/I,OAAO,UACpE,0BAAM6B,UAAU,kEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,wCAAwC9I,OAAO,UAC7E,0BAAM6B,UAAU,qEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,uCAAuC9I,OAAO,UAC5E,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,sCAAsC9I,OAAO,UAC3E,0BAAM6B,UAAU,oEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAK6G,IAAG,UAAKC,gBAAL,4BAAuDC,IAAI,GAAGC,MAAM,MAEhF,yBAAKhH,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,kBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGkH,IAAI,sBAAsBD,KAAK,+BAA+B9I,OAAO,UACpE,0BAAM6B,UAAU,kEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,wCAAwC9I,OAAO,UAC7E,0BAAM6B,UAAU,qEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,uCAAuC9I,OAAO,UAC5E,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,sCAAsC9I,OAAO,UAC3E,0BAAM6B,UAAU,oEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAK6G,IAAG,UAAKC,gBAAL,4BAAuDC,IAAI,GAAGC,MAAM,MAEhF,yBAAKhH,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,gBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGkH,IAAI,sBAAsBD,KAAK,+BAA+B9I,OAAO,UACpE,0BAAM6B,UAAU,kEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,wCAAwC9I,OAAO,UAC7E,0BAAM6B,UAAU,qEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,uCAAuC9I,OAAO,UAC5E,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,sCAAsC9I,OAAO,UAC3E,0BAAM6B,UAAU,oEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAK6G,IAAG,UAAKC,gBAAL,4BAAuDC,IAAI,GAAGC,MAAM,MAEhF,yBAAKhH,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,gBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGkH,IAAI,sBAAsBD,KAAK,+BAA+B9I,OAAO,UACpE,0BAAM6B,UAAU,kEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,wCAAwC9I,OAAO,UAC7E,0BAAM6B,UAAU,qEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,uCAAuC9I,OAAO,UAC5E,0BAAM6B,UAAU,mEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,sCAAsC9I,OAAO,UAC3E,0BAAM6B,UAAU,oEAEpB,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,wEAQ5C,6BAASA,UAAU,sBAAsBO,GAAG,UACxC,yBAAKP,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,4BAAQgH,MAAM,aAAaG,YAAY,IAAIxH,MA9JjD,CAClByH,OAAQ,GA6JiFP,IAAI,gIAAoIQ,iBAAe,cAjK5P,GAA2B5L,IAAMC,YCCpB4L,G,OAAb,uKASQ,OACI,6BACI,6BAAStH,UAAU,wDAAwDO,GAAG,aAC1E,yBAAKP,UAAU,cAAcL,MAVzB,CACZ4H,QAAS,MACTC,gBAAiB,qBAST,yBAAKxH,UAAU,0BACX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,6DAAd,WAGA,uBAAGA,UAAU,2CAAb,gCAMZ,yBAAKA,UAAU,2BAA2ByH,cAAY,QAClD,uBAAGR,KAAK,WACJ,uBAAGjH,UAAU,8BAIzB,6BAASA,UAAU,yBAAyBO,GAAG,aAC3C,yBAAKP,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6BACX,wBAAIA,UAAU,8DAAd,oBAGA,yBAAKA,UAAU,mCACX,uBAAGA,UAAU,sCAAb,kMAKR,yBAAKA,UAAU,aAAaL,MAtCxB,CACpBgD,MAAO,SAsCa,4BAAQqE,MAAM,kBAAkBhH,UAAU,qBAAqB6G,IAAI,mFAA+FlE,MAAM,OAAO+E,OAAO,MAAMP,YAAY,IAAIE,iBAAe,QAK3O,6BAASrH,UAAU,+BAA+BO,GAAG,mBACjD,yBAAKP,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6BACX,wBAAIA,UAAU,kCAAd,gCAGA,wBAAIA,UAAU,iEAAd,gFAMZ,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAK+G,IAAI,IAAIF,IAAG,UAAKC,gBAAL,+BAEpB,uBAAG9G,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,wBAnLxC,GAA0BvE,IAAMC,Y,ICU1BiM,E,kDACF,WAAY7M,GAAsB,IAAD,8BAC7B,cAAMA,IAED8M,OAAS,EAAKA,OAAOnP,KAAZ,gBACd,EAAKoP,qBAAuB,EAAKA,qBAAqBpP,KAA1B,gBAC5B,EAAKqP,kBAAoB,EAAKA,kBAAkBrP,KAAvB,gBACzB,EAAKsP,kBAAoB,EAAKA,kBAAkBtP,KAAvB,gBANI,E,qDAa7BJ,KAAKyC,MAAMkN,e,0CA6BX,OAxB2B,MAAvB3P,KAAKyC,MAAMmN,KAAKhJ,KAAuC,KAAxB5G,KAAKyC,MAAMmN,KAAKhJ,IAE3C,wBAAIe,UAAU,qBACV,uBAAGiH,KAAK,gBAAgBjH,UAAU,qDAAqDkI,cAAY,mBAAmBC,gBAAc,SAChI,0BAAMnI,UAAU,4CAAkD3H,KAAKyC,MAAMmN,KAAKG,UADtF,IACkG/P,KAAKyC,MAAMmN,KAAKI,UAElH,yBAAKrI,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAE,iBAAYjQ,KAAKyC,MAAMmN,KAAKhJ,MAAnF,WACA,kBAAC,IAAD,CAAMe,UAAU,qCAAqCsI,GAAG,SAASC,QAASlQ,KAAKuP,QAA/E,YASR,wBAAI5H,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAG,UAAxD,Y,6CAaZ,IAAIE,EAiBJ,OAhB2B,MAAvBnQ,KAAKyC,MAAMmN,KAAKhJ,KAAuC,KAAxB5G,KAAKyC,MAAMmN,KAAKhJ,MAC/CuJ,EACI,wBAAIxI,UAAU,qBACV,uBAAGiH,KAAK,gBAAgBjH,UAAU,qDAAqDkI,cAAY,mBAAmBC,gBAAc,SAApI,cAGA,yBAAKnI,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAG,wBAAxD,YACA,kBAAC,IAAD,CAAMtI,UAAU,qCAAqCsI,GAAG,0BAAxD,cACA,kBAAC,IAAD,CAAMtI,UAAU,qCAAqCsI,GAAG,8BAAxD,mBACA,kBAAC,IAAD,CAAMtI,UAAU,qCAAqCsI,GAAG,iCAAxD,sBACA,kBAAC,IAAD,CAAMtI,UAAU,qCAAqCsI,GAAG,UAAxD,YAKTE,I,0CAOP,IAAIA,EAQJ,OAP2B,MAAvBnQ,KAAKyC,MAAMmN,KAAKhJ,KAAuC,KAAxB5G,KAAKyC,MAAMmN,KAAKhJ,MAC/CuJ,EACI,wBAAIxI,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAG,YAAxD,cAILE,I,4EAWP,OACI,6BAASxI,UAAU,sBAAsBO,GAAG,UAAUZ,MAAO,CAAC8I,OAAQ,MAClE,yBAAKzI,UAAU,2GACX,4BAAQA,UAAU,sCAAsClG,KAAK,SAASoO,cAAY,WAAWQ,cAAY,0BAA0BC,gBAAc,yBAAyBR,gBAAc,QAAQnD,aAAW,qBACvM,yBAAKhF,UAAU,aACX,+BACA,+BACA,+BACA,iCAGR,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,eACZ,uBAAGiH,KAAK,KACJ,yBAAKJ,IAAG,UAAKC,gBAAL,iCAA4DC,IAAI,UAAUC,MAAM,GAAGrH,MAlBtG,CACb+H,OAAQ,cAoBQ,0BAAM1H,UAAU,uBACZ,uBAAGA,UAAU,sCAAsCiH,KAAK,KAAxD,cAMZ,yBAAKjH,UAAU,2BAA2BO,GAAG,0BACzC,wBAAIP,UAAU,0BAA0B4I,uBAAqB,QACzD,wBAAI5I,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAG,SAAxD,SAGAjQ,KAAKwP,uBAGLxP,KAAK0P,oBAET,wBAAI/H,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCsI,GAAG,UAAxD,aAGAjQ,KAAKyP,qBAGb,yBAAK9H,UAAU,kCACX,kBAAC,IAAD,CAAMA,UAAU,8CAA8CsI,GAAG,YAAjE,sB,GAzIN7M,IAAMC,WAuJtBmN,EAAqB,CACvBb,WCnJG,WACL,MAAO,CACLlO,KCfuB,cDgBvBgP,KAAM,MDmJKC,eATU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KAAKgB,eAOgBJ,EAA1BE,CAA8CpB,GGtKhDuB,EAAb,uKAMQ,OACI,yBAAKlJ,UAAU,qBACX,6BAASA,UAAU,mCAAmCO,GAAG,WACrD,yBAAKP,UAAU,aACX,yBAAKL,MARC,CAClBgD,MAAO,MACP5G,OAAQ,SAOQ,6BACI,wBAAIiE,UAAU,6CAAd,eAGA,6BACI,yBAAKA,UAAU,8BACX,0BAAMA,UAAU,oBACZ,0BAAMA,UAAU,8BAEpB,wBAAIA,UAAU,0DAAd,iCAIJ,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,wCAAd,oCAGA,uBAAGA,UAAU,iDAAb,8BAC+B,6BAD/B,2CAMR,yBAAKmJ,iBAAe,WAChB,0BAAMC,OAAO,wBAAwBC,OAAO,OAAOrJ,UAAU,4BAA4BsJ,kBAAgB,iBACrG,2BAAOxP,KAAK,SAASsE,KAAK,QAAQmL,kBAAgB,OAAOlM,MAAM,qIAC/D,yBAAK2C,UAAU,OACX,yBAAKE,QAAQ,EAAMsJ,kBAAgB,GAAGxJ,UAAU,8BAAhD,oCAGA,yBAAKE,QAAQ,EAAMuJ,yBAAuB,GAAGzJ,UAAU,+BAE3D,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBAAuB0J,WAAS,QAC3C,2BAAO5P,KAAK,OAAOsE,KAAK,OAAO4E,YAAY,YAAY2G,kBAAgB,OAAOC,UAAU,EAAM5J,UAAU,+BAA+BO,GAAG,kBAE9I,yBAAKP,UAAU,uBAAuB0J,WAAS,SAC3C,2BAAO5P,KAAK,OAAOsE,KAAK,QAAQ4E,YAAY,QAAQ2G,kBAAgB,QAAQC,UAAU,EAAM5J,UAAU,+BAA+BO,GAAG,mBAE5I,yBAAKmJ,WAAS,QAAQ1J,UAAU,yBAC5B,2BAAOlG,KAAK,OAAOsE,KAAK,QAAQ4E,YAAY,QAAQ2G,kBAAgB,QAAQ3J,UAAU,+BAA+B4J,UAAU,EAAMrJ,GAAG,mBAE5I,yBAAKmJ,WAAS,UAAU1J,UAAU,yBAC9B,8BAAU5B,KAAK,UAAU4E,YAAY,UAAU2G,kBAAgB,UAAU3J,UAAU,+BAA+BO,GAAG,qBAEzH,yBAAKP,UAAU,gDACX,4BAAQlG,KAAK,SAASkG,UAAU,sCAAhC,6BAzDhD,GAA6BvE,IAAMC,W,wBCkBtBmO,EAAkC,CAC9CzB,UAAW,GACXC,SAAU,GACVjD,MAAO,GACPS,SAAU,GACViE,WAAY,GACZC,QAAS,GACTC,MAAO,GACPC,mBAAmB,EACnB3N,qBAAqB,EACrBD,OAAQ,CACP+L,UAAW,yBACXC,SAAU,wBACVjD,MAAO,oBACPS,SAAU,uBACViE,WAAY,2BAEbI,gBAAiB,CAChB9B,WAAW,EACXC,UAAU,EACVjD,OAAO,EACPS,UAAU,EACViE,YAAY,I,4bCnCd,IAAMK,EAAY1P,IAAOC,IAAV,KAKT0P,EAAW3P,IAAOC,IAAV,KAOR2P,EAAqC,CACvCC,QAAS,QACT3H,MAAO,OACP4H,aAAc,SACd/C,gBAAiB,UACjBgD,UAAW,OACX5O,MAAO,UACP6O,WAAY,KACZC,QAAS,eACThD,OAAQ,sBACRN,OAAQ,qBAENtL,EAA+B,CACjCC,OAAQ,GAEN4O,EAAkC,CACpCC,UAAW,UAETjP,EAAkC,CACpCC,MAAO,MACPC,UAAW,UAETgP,EAAQpQ,IAAOqQ,EAAV,KAGUC,E,kDACjB,WAAYjQ,GAAoB,IAAD,8BAC3B,cAAMA,IAGDoB,MAAQ2N,EAGb,EAAKnN,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKgE,aAAe,EAAKA,aAAahE,KAAlB,gBACpB,EAAKuS,YAAc,EAAKA,YAAYvS,KAAjB,gBACnB,EAAK8D,mBAAqB,EAAKA,mBAAmB9D,KAAxB,gBAVC,E,yDAiBlB0C,GAAa,IAAD,OACrBA,EAAM4F,iBADe,MAEG5F,EAAMgD,OAAtBC,EAFa,EAEbA,KAAMf,EAFO,EAEPA,MACdhF,KAAKiF,SAAL,eACKc,EAAOf,IACT,WAAO,IAAD,EACmB,EAAKZ,eAAvBJ,EADD,EACCA,OACFqB,GAFC,EACSC,MAEd,EAAKL,SAAS,CACVhB,oBAAqBoB,EACrBrB,gB,qCASR,IAAIsB,GAAQ,EACRtB,EAAkC,GAUtC,IAAK,IAAIe,KATTf,EAAM,UAAgBhE,KAAK6D,MAAMkM,UAAUtJ,OAAS,EAAI,GAAK,yBAC7DzC,EAAM,SAAehE,KAAK6D,MAAMmM,SAASvJ,OAAS,EAAI,GAAK,wBAC3DzC,EAAM,MAAYhE,KAAK6D,MAAMkJ,MAAMtG,OAAS,EAAI,GAAK,oBACrDzC,EAAM,SAAehE,KAAK6D,MAAM2J,SAAS/G,OAAS,EAAI,GAAK,uBAC3DzC,EAAM,WAAiBhE,KAAK6D,MAAM4N,WAAWhL,OAAS,EAAI,GAAK,0BACjC,KAA3BzG,KAAK6D,MAAM4N,YAAsBzR,KAAK6D,MAAM2J,WAAaxN,KAAK6D,MAAM4N,aACnEzN,EAAOyN,WAAa,0CAGRzN,EACZ,GAAIA,EAAOe,GAAK0B,OAAS,EAAG,CACxBnB,GAAQ,EACR,MAGR,MAAO,CAAEtB,SAAQsB,W,yCAOF+B,GAEf,IAAIrD,EAAShE,KAAK6D,MAAMG,OAAOqD,GAE/B,GAAKrD,GAAqB,KAAXA,EAEf,OACI,yBAAKsD,MAAOhE,GAEJ,yBAAKyB,IAAKsC,GACN,8BAAOrD,O,oCAWvBhE,KAAKiF,SAAS,CACV2M,mBAAmB,M,+BAIjB,IAAD,OACL,OAAI5R,KAAK6D,MAAM+N,kBACJ,kBAAC,IAAD,CAAUtL,MAAM,EAAM2J,GAAIjQ,KAAKyC,MAAMmQ,oBAG5C,kBAACd,EAAD,KACI,kBAACC,EAAD,KACI,0BAAMtJ,SAAU,SAAClD,GAAQA,EAAEmD,iBAAkB,EAAKjG,MAAMoQ,WAAW,EAAKhP,SACpE,wBAAIyD,MAAOgL,GAAX,WAEA,yBAAK3K,UAAU,cACX,2BAAOC,QAAQ,aACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,cAAhB,eAEtC,2BAAO/B,KAAK,YACRtE,KAAK,OACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,eACf3K,KAAKkE,mBAAmB,cAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,YACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,aAAhB,cAEtC,2BAAO/B,KAAK,WACRtE,KAAK,OACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,cACf3K,KAAKkE,mBAAmB,aAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,SACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,iBAAhB,kBAEtC,2BAAO/B,KAAK,QACRtE,KAAK,QACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,gBACf3K,KAAKkE,mBAAmB,UAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,YACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,YAAhB,aAEtC,2BAAO/B,KAAK,WACRtE,KAAK,WACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,mBACf3K,KAAKkE,mBAAmB,aAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,cACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,eAAhB,gBAEtC,2BAAO/B,KAAK,aACRtE,KAAK,WACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,sBACf3K,KAAKkE,mBAAmB,eAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,WACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,WAAhB,YAEtC,2BAAO/B,KAAK,UACRtE,KAAK,OACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,kBACf3K,KAAKkE,mBAAmB,YAG7B,yBAAKyD,UAAU,cACX,2BAAOC,QAAQ,SACX,0BAAMN,MAAOhE,GAAb,MAAkC,0BAAMwE,YAAU,SAAhB,UAEtC,2BAAO/B,KAAK,QACRtE,KAAK,OACLoB,SAAU7C,KAAKqE,aACfiD,MAAO0K,EACPrH,YAAY,uBACf3K,KAAKkE,mBAAmB,UAG7B,4BAAQoD,MAAO7D,EACX4B,SAAUrF,KAAK6D,MAAMI,oBACrBxC,KAAK,SACLkG,UAAU,6BAHd,WAMA,uBAAGA,UAAU,8BAAb,sBACuB,kBAAC6K,EAAD,CAAOtC,QAASlQ,KAAK2S,aAArB,kB,GA5LXtP,aC3CvByP,EACT,WAAYC,GAAgB,yBAI5BhO,SAJ2B,OAK3BC,WAL2B,EACvBhF,KAAK+E,IAAMgO,EAAMA,EAAIhO,IAAM,KAC3B/E,KAAKgF,MAAQ+N,EAAMA,EAAI/N,MAAQ,MCD1BgO,EAAb,sCACIC,cAAgB,CACZC,OAAO,GAAD,OAAKzE,6CACX0E,UAAU,GAAD,OAAK1E,4CAAL,QACT2E,MAAM,GAAD,OAAK3E,4CAAL,cACL4E,MAAM,GAAD,OAAK5E,4CAAL,cACL6E,SAAS,GAAD,OAAI7E,4CAAJ,iBACR8E,KAAK,GAAD,OAAK9E,4CAAL,cACJ+E,WAAW,GAAD,OAAK/E,4CAAL,mBACVgF,eAAe,GAAD,OAAKhF,4CAAL,uBACdiF,kBAAkB,GAAD,OAAKjF,4CAAL,0BACjBkF,SAAS,GAAD,OAAKlF,4CAAL,kBAXhB,KAcImF,cAAgB,CACZC,WAAY,iBACZC,aAAc,oBACdC,YAAa,qBAjBrB,KAoBIC,cAAgB,CACZC,QAAS,UACTC,SAAU,YACVlJ,QAAS,UACTmJ,OAAQ,SACRC,QAAS,UACTC,KAAM,OACNC,MAAO,QACPC,KAAM,QA5Bd,KA+BIC,eAAqB,CACjB,KAAQ,IAAI1B,EAAS,CAAC/N,IAAK,EAAGC,MAAO,SACrC,WAAc,IAAI8N,EAAS,CAAC/N,IAAK,EAAGC,MAAO,gBAC3C,UAAa,IAAI8N,EAAS,CAAC/N,IAAK,EAAGC,MAAO,cAC1C,UAAa,IAAI8N,EAAS,CAAC/N,IAAK,EAAGC,MAAO,YAC1C,OAAU,IAAI8N,EAAS,CAAC/N,IAAK,EAAGC,MAAO,WACvC,UAAa,IAAI8N,EAAS,CAAC/N,IAAK,EAAGC,MAAO,eArClD,KAwCIyP,uBAAyB,CACrBC,IAAK,IAAI5B,EAAS,CAAC/N,KAAM,EAAGC,MAAO,YACnC2P,KAAM,IAAI7B,EAAS,CAAC/N,IAAK,EAAGC,MAAO,cA1C3C,KA6CI4P,eAAiB,CACbC,SAAU,aACVC,SAAU,cA/ClB,KAkDIC,gBAAkB,CACdC,SAAU,sB,QCjCLC,EAAb,WAGI,WAAYC,GAA8B,yBAF1CrV,YAEyC,OADzCsV,iBACyC,EAWrCnV,KAAKoV,UAAYpV,KAAKoV,UAAUhV,KAAKJ,MACrCA,KAAKqV,aAAerV,KAAKqV,aAAajV,KAAKJ,MAC3CA,KAAKsV,YAActV,KAAKsV,YAAYlV,KAAKJ,MACzCA,KAAKuV,QAAUvV,KAAKuV,QAAQnV,KAAKJ,MACjCA,KAAKH,OAAS,IAAImT,EAClBhT,KAAKmV,YAAcD,EAnB3B,sDAsBqBM,GACb,OAAO5V,IAAUa,KAAsDT,KAAKH,OAAOoT,cAAcI,MAAOmC,GACnGC,MAAK,SAAC1K,GAGH,OADA2K,aAAaC,QAAQ,eAAgBzQ,KAAKE,UAAU2F,IAC7CnL,IAAUoL,QAAQD,QA3BzC,mCA+BwB6E,GAChB,OAAOhQ,IAAUa,KAA+CT,KAAKH,OAAOoT,cAAcK,SAAU1D,GAC/F6F,MAAK,SAAC1K,GAGH,OADA2K,aAAaC,QAAQ,eAAgBzQ,KAAKE,UAAU2F,IAC7CnL,IAAUoL,QAAQD,MAE5B6K,OAAM,SAAC7U,GACJ,MAAMA,OAvCtB,iCA2CsB6O,GACd,OAAOhQ,IAAUc,IAA8CV,KAAKH,OAAOoT,cAAcG,MAAOxD,GAC3F6F,MAAK,SAAC1K,GACH,OAAOnL,IAAUoL,QAAQD,MAE5B6K,OAAM,SAAC7U,GACJ,MAAMA,OAjDtB,6EAqD+B8U,GArD/B,uFAuDY7V,KAAKmV,YAAYtU,KAAOgV,EAvDpC,SAwD8BjW,IAAUW,OAAV,UAAoBP,KAAKH,OAAOoT,cAAcO,YAAcxT,KAAKmV,aAxD/F,cAwDkBpK,EAxDlB,yBAyDmBnL,IAAUoL,QAAQD,IAzDrC,wUAkEqDnL,IAAUU,IAAiCN,KAAKH,OAAOoT,cAAcG,OAlE1H,cAkEkBrI,EAlElB,yBAmEmBnL,IAAUoL,QAAQD,IAnErC,wLAyEmB7C,GACX,OAAOtI,IAAUU,IAAV,UAA4CN,KAAKH,OAAOoT,cAAcG,MAAtE,YAA+ElL,IAAMuN,KAAK7V,IAAUoL,aA1EnH,K,QCpBa8K,EACT,WAAY/C,GAAW,yBAWvBnM,SAXsB,OAYtBmP,YAZsB,OAatBhJ,WAbsB,OActBS,cAdsB,OAetBuC,eAfsB,OAgBtBC,cAhBsB,OAiBtB2B,WAjBsB,OAkBtBD,aAlBsB,OAmBtBsE,WAnBsB,EAClBhW,KAAK4G,IAAcmM,GAAOA,EAAInM,IAAcmM,EAAInM,IAAM,KACtD5G,KAAK+V,OAAchD,GAAOA,EAAIgD,OAAchD,EAAIgD,OAAS,GACzD/V,KAAK+M,MAAcgG,GAAOA,EAAIhG,MAAcgG,EAAIhG,MAAQ,GACxD/M,KAAKwN,SAAcuF,GAAOA,EAAIvF,SAAcuF,EAAIvF,SAAW,GAC3DxN,KAAK+P,UAAcgD,GAAOA,EAAIhD,UAAcgD,EAAIhD,UAAY,GAC5D/P,KAAKgQ,SAAc+C,GAAOA,EAAI/C,SAAc+C,EAAI/C,SAAW,GAC3DhQ,KAAK2R,MAAcoB,GAAOA,EAAIpB,MAAcoB,EAAIpB,MAAQ,GACxD3R,KAAK0R,QAAcqB,GAAOA,EAAIrB,QAAcqB,EAAIrB,QAAU,GAC1D1R,KAAKgW,MAAcjD,GAAOA,EAAIiD,MAAcjD,EAAIiD,MAAQ,ICCnDC,EAAgC,CACzCrG,KAAM,IAAIkG,G,uKCDd,IAAM3T,EAAeC,IAAOC,IAAV,KAOZ6T,E,kDAGF,WAAYzT,GAAmB,IAAD,8BAC1B,cAAMA,IAHV0T,iBAE8B,IAD9BvS,gBAC8B,EAG1B,EAAKC,MAAQoS,EACb,EAAKE,YAAc,IAAIlB,EAAejU,KACtC,EAAK4C,WAAa,IAAIxC,aAEtB,EAAKgV,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,aAAe,EAAKA,aAAajW,KAAlB,gBARM,E,gMAYTJ,KAAKmW,YAAYZ,QAAQvV,KAAKyC,MAAM6L,MAAM9D,OAAjB,Q,OAAtCoF,E,OACJ5P,KAAKiF,SAAS,CACV2K,KAAMA,I,yIAID0G,GACT,IAAI1G,EAAO,IAAIkG,EAAKQ,EAAKvS,YACzBpB,QAAQC,IAAIgN,GACZ5P,KAAKmW,YAAYI,WAAW3G,GAAM6F,MAAK,SAACtF,GACpCxN,QAAQC,IAAIuN,MAEfyF,OAAM,SAACpO,GACJ7E,QAAQC,IAAI4E,Q,kCAIRoI,GACR,IAAI4G,EAAoC,GACpCrQ,EAA+C,GA0DnD,OAvDAqQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,QACLgD,MAAO,QACP/C,MAAO4K,EAAK7C,MACZtL,KAAMzB,KAAK4D,WAAWoJ,aAAaD,MACnC9E,UAAU,EACVwO,MAAO,MAIXtQ,EAAWnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,2BAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,YACLgD,MAAO,aACP/C,MAAO4K,EAAKG,UACZ5J,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,OAIXtQ,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,0BAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,WACLgD,MAAO,YACP/C,MAAO4K,EAAKI,SACZ7J,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,MAIXD,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,UACLgD,MAAO,UACP/C,MAAO4K,EAAK8B,QACZjQ,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,MAIXD,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,QACLgD,MAAO,QACP/C,MAAO4K,EAAK+B,MACZlQ,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,MAEJD,EAAUE,MAAK,SAACjE,EAAEkE,GAAH,OAAQlE,EAAEgE,MAAQE,EAAEF,W,+BAI1C,IAAID,EAAYxW,KAAKoW,YAAYpW,KAAK6D,MAAM+L,MAC5C,OACI,kBAACzN,EAAD,KACI,kBAACwB,EAAA,YAAD,CAAaiB,WAAY4R,EAAW7N,iBAAkB3I,KAAKqW,oB,GAnG/CjT,IAAMC,WAyGnBuT,cAAWV,G,oCCtHnB,SAASW,GAAT,GAEH,IAAD,IADCC,OAAUC,EACX,EADWA,YAAaC,EACxB,EADwBA,gBAAiBC,EACzC,EADyCA,UAElCC,EAAQF,EAAgBvQ,OAE9B,OACI,2BACIzB,MAAO+R,GAAe,GACtB7G,QAAS,SAAA3K,GAAC,OAAGA,EAAE4R,mBACftU,SAAU,SAAA0C,GACN0R,EAAU1R,EAAEO,OAAOd,YAAS+G,IAEhCpB,YAAW,iBAAYuM,EAAZ,iBAOhB,SAASE,GAAT,GAEH,IAAD,IADCN,OAAUC,EACX,EADWA,YAAaE,EACxB,EADwBA,UAAWD,EACnC,EADmCA,gBAAiB9O,EACpD,EADoDA,GAI7ChH,EAAUkC,IAAMiU,SAAQ,WAC1B,IAAMnW,EAAU,IAAIoW,IAMpB,OALAN,EAAgBnS,SAAQ,SAAA0S,GACE,KAAnBA,EAAIC,OAAOtP,IACVhH,EAAQuW,IAAIF,EAAIC,OAAOtP,OAGxB,aAAIhH,EAAQsW,YACpB,CAACtP,EAAI8O,IAGR,OACI,4BACIhS,MAAO+R,EACP7G,QAAS,SAAA3K,GAAC,OAAGA,EAAE4R,mBACftU,SAAU,SAAA0C,GACN0R,EAAU1R,EAAEO,OAAOd,YAAS+G,KAGhC,4BAAQ/G,MAAM,IAAd,OACC9D,EAAQqG,KAAI,SAACyC,EAAQvC,GAAT,OACT,4BAAQ1C,IAAK0C,EAAGzC,MAAOgF,GAClBA,OA+Fd,SAAS0N,GAAkBvP,EAAMD,EAAI6O,GACxC,OAAOY,aAAYxP,EAAM4O,EAAa,CAAEtL,KAAM,CAAC,SAAA8L,GAAG,OAAIA,EAAIC,OAAOtP,OAIrEwP,GAAkBE,WAAa,SAAA9S,GAAG,OAAKA,G,wBCpJ1B+S,GAAwBzU,IAAM0U,YACvC,WAA6BC,GAAS,IAAnCC,EAAkC,EAAlCA,cAAkBC,EAAgB,kCAC3BC,EAAa9U,IAAM+U,SACnBC,EAAcL,GAAOG,EAM3B,OAJA9U,IAAMiV,WAAU,WACZD,EAAYE,QAAQN,cAAgBA,IACrC,CAACI,EAAaJ,IAGb,oCACI,kBAAC7N,GAAA,EAAD,eAAU1I,KAAK,WAAWsW,IAAKK,GAAiBH,Q,2MCJ1DM,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,WAAY,EACZC,WAAYH,EAAMI,QAAQ,UA0EfC,GAtEgB,SAAArW,GAC7B,IAAMsW,EAAUR,KACVE,EAAQO,eACN9B,EAA2CzU,EAA3CyU,MAAO+B,EAAoCxW,EAApCwW,KAAMC,EAA8BzW,EAA9ByW,YAAaC,EAAiB1W,EAAjB0W,aAkBlC,OACE,yBAAKxR,UAAWoR,EAAQL,MACtB,kBAACU,GAAA,EAAD,CACElJ,QAnB6B,SAAApN,GACjCqW,EAAarW,EAAO,IAmBhBuC,SAAmB,IAAT4T,EACVtM,aAAW,cAEU,QAApB8L,EAAMY,UAAsB,kBAAC,KAAD,MAAmB,kBAAC,KAAD,OAElD,kBAACD,GAAA,EAAD,CACElJ,QAtBwB,SAAApN,GAC5BqW,EAAarW,EAAOmW,EAAO,IAsBvB5T,SAAmB,IAAT4T,EACVtM,aAAW,iBAEU,QAApB8L,EAAMY,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,OAGJ,kBAACD,GAAA,EAAD,CACElJ,QA7BwB,SAAApN,GAC5BqW,EAAarW,EAAOmW,EAAO,IA6BvB5T,SAAU4T,GAAQK,KAAKC,KAAKrC,EAAQgC,GAAe,EACnDvM,aAAW,aAEU,QAApB8L,EAAMY,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,OAGJ,kBAACD,GAAA,EAAD,CACElJ,QApC4B,SAAApN,GAChCqW,EAAarW,EAAOwW,KAAKE,IAAI,EAAGF,KAAKC,KAAKrC,EAAQgC,GAAe,KAoC7D7T,SAAU4T,GAAQK,KAAKC,KAAKrC,EAAQgC,GAAe,EACnDvM,aAAW,aAEU,QAApB8L,EAAMY,UAAsB,kBAAC,KAAD,MAAoB,kBAAC,KAAD,S,oLCnEnDd,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrC7K,OAAO,aACL6L,SAAU,WACVvH,aAAcuG,EAAMiB,MAAMxH,aAC1B/C,gBAAiBwK,aAAKlB,EAAMmB,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACT3K,gBAAiBwK,aAAKlB,EAAMmB,QAAQC,OAAOC,MAAO,MAEpD1P,YAAaqO,EAAMI,QAAQ,GAC3BD,WAAY,EACZtO,MAAO,QACNmO,EAAMsB,YAAYC,GAAG,MAAQ,CAC5BpB,WAAYH,EAAMI,QAAQ,GAC1BvO,MAAO,SAGX2P,WAAY,CACV3P,MAAOmO,EAAMI,QAAQ,GACrBxJ,OAAQ,OACRoK,SAAU,WACVS,cAAe,OACfjI,QAAS,OACTkI,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACT9W,MAAO,WAET+W,WAAW,aACTjI,QAASoG,EAAMI,QAAQ,EAAG,EAAG,EAAG,GAChC0B,WAAY9B,EAAM+B,YAAYta,OAAO,SACrCoK,MAAO,QACNmO,EAAMsB,YAAYC,GAAG,MAAQ,CAC5B1P,MAAO,UA2CEmQ,GAtCM,SAAC,GAIf,IAHLC,EAGI,EAHJA,sBAGI,IAFJC,oBAEI,MAFW,GAEX,EADJC,EACI,EADJA,gBAEM7B,EAAUR,KACVrB,EAAQwD,EAAsBjU,OAMpC,OACE,yBAAKkB,UAAWoR,EAAQnL,QACtB,yBAAKjG,UAAWoR,EAAQkB,YACtB,kBAAC,KAAD,OAEF,kBAACY,GAAA,EAAD,CACE7V,MAAO2V,GAAgB,GACvB9X,SAAU,SAAA0C,GACRqV,EAAgBrV,EAAEO,OAAOd,YAAS+G,IAEpCpB,YAAW,UAAKuM,EAAL,eACX6B,QAAS,CACPL,KAAMK,EAAQsB,UACdS,MAAO/B,EAAQuB,YAEjBS,WAAY,CAAE,aAAc,cC1D9BC,GAAmBxC,cAAW,SAAAC,GAAK,MAAK,CAC7CwC,YAAa,CACZvX,OAAQ+U,EAAMI,QAAQ,GACtBqC,SAAU,IACVC,SAAU,KAEXzC,KAAM,CACL0C,YAAa3C,EAAMI,QAAQ,GAC3BjN,aAAc6M,EAAMI,QAAQ,IAE7BwC,UACwB,UAAvB5C,EAAMmB,QAAQnY,KACX,CACD8B,MAAOkV,EAAMmB,QAAQ0B,UAAUC,KAC/BpM,gBAAiBqM,aAAQ/C,EAAMmB,QAAQ0B,UAAUhH,MAAO,MAEvD,CACD/Q,MAAOkV,EAAMmB,QAAQ7L,KAAKkG,QAC1B9E,gBAAiBsJ,EAAMmB,QAAQ0B,UAAU/G,MAE5C5F,MAAO,CACN8M,KAAM,gBAMFC,GAAY,CACjBC,WAAY,CACXrU,MAAO,CACNsU,UAAWC,IACXvR,MAAO,OAmGKwR,GA9FM,SAAArZ,GACpB,IAAMsW,EAAUiC,KAEfe,EASGtZ,EATHsZ,YACAC,EAQGvZ,EARHuZ,oBACAC,EAOGxZ,EAPHwZ,iBACAvB,EAMGjY,EANHiY,sBACAE,EAKGnY,EALHmY,gBAP4B,EAYzBnY,EAJHkY,oBAR4B,MAQb,GARa,IAYzBlY,EAHHyZ,iBAT4B,MAShB,GATgB,EAU5BC,EAEG1Z,EAFH0Z,WACAC,EACG3Z,EADH2Z,cAED,OACC,kBAAC,KAAD,CACCzU,UAAW0U,aAAKtD,EAAQL,KAAT,eACbK,EAAQsC,UAAYU,EAAc,KAInCK,EAEE,kBAACE,GAAA,EAAD,CAAS3N,MAAM,OACd,kBAACyK,GAAA,EAAD,CAAYzM,aAAW,MAAMuD,QAAS+L,GACrC,kBAAC,KAAD,QAIF,8BAIFF,EAAc,EACd,kBAACQ,GAAA,EAAD,CACC5U,UAAWoR,EAAQpK,MACnBpL,MAAM,UACNmH,QAAQ,aAEPqR,EALF,aAQC,kBAACQ,GAAA,EAAD,CAAY5U,UAAWoR,EAAQpK,MAAOjE,QAAQ,KAAKxC,GAAG,cAEpDgU,GAKHH,EAAc,EACd,kBAACO,GAAA,EAAD,CAAS3N,MAAM,UACd,kBAACyK,GAAA,EAAD,CAAYzM,aAAW,SAASuD,QAAS8L,GACxC,kBAAC,KAAD,QAID,kBAAC,GAAD,CACCtB,sBAAuBA,EACvBC,aAAcA,EACdC,gBAAiBA,IAIpB,kBAAC4B,GAAA,EAAD,CAAa7U,UAAWoR,EAAQkC,aAC/B,kBAACwB,GAAA,EAAD,CAAYvU,GAAG,yBAAf,WACA,kBAACwU,GAAA,EAAD,CACCC,QAAQ,wBACRzU,GAAG,yBACHG,UAAQ,EACRrD,MAAO,CAAC,kBACR8V,MAAO,kBAAC8B,GAAA,EAAD,MACPC,YAAa,SAACjX,GAAD,OAAcA,EAASkX,KAAK,OACzCpB,UAAWA,IAEVS,EAAW5U,KAAI,SAAAuP,GAAM,OACrB,kBAACiG,GAAA,EAAD,CAAUhY,IAAK+R,EAAO5O,GAAIlD,MAAO8R,EAAO5O,IACvC,kBAACiC,GAAA,EAAa2M,EAAOkG,wBACrB,kBAACC,GAAA,EAAD,CAAchJ,QAAS6C,EAAO5O,a,OC3G9B,SAASgV,GAAT,GAWH,IAVAC,EAUD,EAVCA,QACAtc,EASD,EATCA,KACAuc,EAQD,EARCA,UACWC,EAOZ,EAPCC,UAOD,IANCC,qBAMD,aALCvB,2BAKD,MALuB,SAACwB,KAKxB,MAJCvB,wBAID,MAJoB,aAIpB,MAHCC,iBAGD,MAHa,GAGb,MAFCuB,qBAED,aADCrB,qBACD,SACOsB,EAActa,IAAMiU,SACtB,iBAAO,CAEHsG,UAAWnU,GAGXuE,KAAM,SAAC5F,EAAMD,EAAI6O,GACb,OAAO5O,EAAKqB,QAAO,SAAA+N,GACf,IAAMqG,EAAWrG,EAAIC,OAAOtP,GAC5B,YAAoB6D,IAAb6R,GACDC,OAAOD,GACJE,cACAC,WAAWF,OAAO9G,GAAa+G,sBAKpD,IAGEE,EAAgB5a,IAAMiU,SACxB,iBAAO,CAEH4G,OAAQzU,MAEZ,IA1BL,EAyCK0U,mBACA,CACIf,UACAtc,OACAmd,gBACAN,cACAS,eAAgBZ,EAChBD,UAAWD,EACXe,aAAc,CACVC,cAAe,CAAC,YAAa,cAAe,YAAa,iBAIjEC,kBACAC,aACAC,YACAC,gBACAC,gBACA,SAAAC,GACIA,EAAMxC,WAAW7V,MAAK,SAAA6W,GAoBlB,OAnBIM,GACAN,EAAQyB,QAAQ,CACZ1W,GAAI,YAGJ2W,OAAQ,gBAAGC,EAAH,EAAGA,8BAAH,OACJ,yBAAKxX,MAAO,CAAEiL,UAAW,WACrB,kBAACsF,GAA0BiH,OAKnCC,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OACF,yBAAKjQ,MAAO,CAAEiL,UAAW,WACrB,kBAACsF,GAA0BN,EAAIyH,iCAKxC7B,QAlDf8B,EA9BL,EA8BKA,cACAC,EA/BL,EA+BKA,kBACAC,EAhCL,EAgCKA,aACAC,EAjCL,EAiCKA,WACAnG,EAlCL,EAkCKA,KACAoG,EAnCL,EAmCKA,SACAC,EApCL,EAoCKA,YACAnD,EArCL,EAqCKA,WACAzB,EAtCL,EAsCKA,sBACAE,EAvCL,EAuCKA,gBAvCL,IAwCK/W,MAAS0b,EAxCd,EAwCcA,UAAWC,EAxCzB,EAwCyBA,SAAUC,EAxCnC,EAwCmCA,eAAgB9E,EAxCnD,EAwCmDA,aA8ClDvX,IAAMiV,WAAU,WACZ+E,EAAU,CAAEmC,YAAWC,eACxB,CAACpC,EAAWmC,EAAWC,IAsB1B,OACI,kBAACE,GAAA,EAAD,CAAgB/X,UAAU,cACtB,kBAAC,GAAD,CACIyU,cAAeA,EACfL,YAAavQ,OAAOC,KAAKgU,GAAgBhZ,OACzCuV,oBAhBmB,WAE3B,IAAI2D,EAAmBnU,OAAOC,KAAKgU,GAAgBlY,KAAI,SAAAqY,GAAC,OAAIC,SAASD,EAAG,OAEpEE,EAAiBjf,EAAK2I,QAAO,SAACuW,EAAGtY,GACjC,OAAOkY,EAAiBK,SAASvY,MAGrCuU,EAAoB8D,IASZ7D,iBAAkBA,EAClBC,UAAWA,EACXxB,sBAAuBA,EACvBE,gBAAiBA,EACjBD,aAAcA,EACdwB,WAAYA,IAEhB,kBAAC,KAAD,iBAAc8C,IAAd,CAA+BtX,UAAU,uBACrC,kBAACsY,GAAA,EAAD,KACKd,EAAa5X,KAAI,SAAA2Y,GAAW,OACzB,kBAACC,GAAA,EAAaD,EAAYE,sBACrBF,EAAYG,QAAQ9Y,KAAI,SAAAuP,GAAM,OAC3B,kBAACwJ,GAAA,EACsB,cAAdxJ,EAAO5O,GACN4O,EAAOyJ,iBACPzJ,EAAOyJ,eAAezJ,EAAO0J,wBAElC1J,EAAO2J,OAAO,UACA,cAAd3J,EAAO5O,GACJ,kBAACwY,GAAA,EAAD,CACIC,OAAQ7J,EAAO8J,SAEfvH,UAAWvC,EAAO+J,aAAe,OAAS,QAE9C,KACJ,yBAAKlZ,UAAU,uBACTmP,EAAOgK,YAAchK,EAAOiK,0BAA6BjK,EAAO2J,OAAO,UAAY,eAO7G,kBAACO,GAAA,EAAc9B,IACVjG,EAAK1R,KAAI,SAACgQ,EAAK9P,GAEZ,OADA2X,EAAW7H,GAEP,kBAAC4I,GAAA,EAAa5I,EAAI0J,cACb1J,EAAI2J,MAAM3Z,KAAI,SAAA4Z,GACX,OACI,kBAACb,GAAA,EAAca,EAAKC,eACfD,EAAKV,OAAO,iBAQzC,kBAACY,GAAA,EAAD,CAAa1Z,UAAU,cACnB,kBAACwY,GAAA,EAAD,KACI,kBAACmB,GAAA,EAAD,CASIC,QAAS,IACTrK,MAAOmG,EACPnE,YAAasG,EACbvG,KAAMsG,EACNiC,YAAa,CACTzG,WAAY,CAAE,aAAc,iBAC5B0G,QAAQ,GAEZtI,aAzFC,SAACrW,EAAO4e,GAC7BrC,EAASqC,IAyFWC,oBA9FQ,SAAA7e,GAC5Bwc,EAAYsC,OAAO9e,EAAMgD,OAAOd,SA8FZ6c,iBAAkB/I,S,8GChM9C,IAAM3W,GAAeC,IAAOC,IAAV,MAGZyf,G,kDAEF,WAAYrf,GAA4B,IAAD,8BACnC,cAAMA,IAFV0T,iBACuC,EAGnC,EAAKtS,MAAQ,CACTke,QAAS,GACTC,SAAU,GACVC,WAAW,EACX1E,eAAe,GAEnB,EAAKpH,YAAc,IAAIlB,EAAejU,KACtC,EAAKkhB,gBAAkB,EAAKA,gBAAgB9hB,KAArB,gBACvB,EAAK+hB,kBAAoB,EAAKA,kBAAkB/hB,KAAvB,gBAXU,E,gMAejBJ,KAAKmW,YAAYb,c,OAA/BlC,E,OACJpT,KAAKyC,MAAM2f,UAAUhP,GACrBpT,KAAKiF,SAAS,CAAE8c,QAAS3O,I,qLAGPiP,G,8EAClBriB,KAAKiF,SAAS,CACVgd,WAAW,IAGM,KADjB7O,EAAQpT,KAAK6D,MAAMke,SACbtb,O,gCACQzG,KAAKmW,YAAYb,c,OAA/BlC,E,OACApT,KAAKyC,MAAM2f,UAAUhP,G,OAEnBkP,EAAWD,EAAW7C,SAAW6C,EAAW9C,UAC5CgD,EAASD,EAAWD,EAAW7C,SACrCxf,KAAKiF,SAAS,CACV8c,QAAS3O,EACT4O,SAAU5O,EAAMoP,MAAMF,EAAUC,GAChCN,WAAW,I,yLAIKQ,G,qEAChBtU,OAAOuU,QAAQ,iD,gCACT1iB,KAAKmW,YAAYwM,cAAcF,G,sIAKzC,IAAMtF,EAAU,CACZ,CACI0B,OAAQ,QACR+D,SAAU,QACV7D,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAMtH,GAAE,gBAAWsH,EAAIsL,SAASjc,MAAQ2Q,EAAIsL,SAAS9V,SAE3F,CACI8R,OAAQ,aACR+D,SAAU,aAEd,CACI/D,OAAQ,YACR+D,SAAU,YAEd,CACI/D,OAAQ,QACR+D,SAAU,SAEd,CACI/D,OAAQ,UACR+D,SAAU,YAElB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UACd,kBAAC,GAAD,CAAcpb,UAAU,aACpB,kBAAC,GAAD,CAAOwV,QAASA,EACZtc,KAAMb,KAAK6D,MAAMke,QACjBzE,UAAWtd,KAAK6D,MAAMke,QAAQtb,OAC9B2W,UAAW,aACXpB,oBAAqBhc,KAAKmiB,kBAC1BjG,UAAU,YAItB,kBAAC,IAAD,CAAO6G,KAAI,kBACP,kBAAC,EAAD,Y,GAnFQ1f,aAiGtBmN,GAAqB,CACvB4R,UjB1HG,SAAmBhP,GACxB,MAAO,CACL3R,KCAsB,aDCtBuhB,QAAS5P,KiB0HE1C,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZoS,SAAUrR,EAAMf,QAQiBY,GAA1BE,CAA8CoR,ICzHhDmB,I,OAAb,WAGI,aAAe,yBAFf/N,aAEc,OADdC,iBACc,EACVnV,KAAKkV,QAAU,IAAIlC,EACnBhT,KAAKmV,YAAcnU,IAEnBhB,KAAKkjB,WAAaljB,KAAKkjB,WAAW9iB,KAAKJ,MACvCA,KAAKuV,QAAUvV,KAAKuV,QAAQnV,KAAKJ,MARzC,kMAgByDJ,IAAUU,IAAIN,KAAKkV,QAAQjC,cAAcO,YAhBlG,cAgBkBzI,EAhBlB,yBAiBmBnL,IAAUoL,QAAQD,IAjBrC,iOA4ByB7C,GA5BzB,gGA8BuDtI,IAAUU,IAAV,UAAiBN,KAAKkV,QAAQjC,cAAcO,WAA5C,YAA0DtL,IA9BjH,cA8BkB6C,EA9BlB,yBA+BmBnL,IAAUoL,QAAQD,IA/BrC,oOAsC2BgI,GAtC3B,gGAwC8BnT,IAAUa,KAAV,UAAkBT,KAAKkV,QAAQjC,cAAcO,YAAcT,GAxCzF,cAwCkBhI,EAxClB,yBAyCmBnL,IAAUoL,QAAQD,IAzCrC,iOAgDwBgI,GAhDxB,gGAkD8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcO,YAAcT,GAlDxF,cAkDkBhI,EAlDlB,yBAmDmBnL,IAAUoL,QAAQD,IAnDrC,wOA0D+BgI,GA1D/B,gGA4D8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcO,WAA5C,aAAmET,GA5DjG,cA4DkBhI,EA5DlB,yBA6DmBnL,IAAUoL,QAAQD,IA7DrC,wOAoE+B8K,GApE/B,uFAsEY7V,KAAKmV,YAAYtU,KAAOgV,EAtEpC,SAuE8BjW,IAAUW,OAAV,UAAoBP,KAAKkV,QAAQjC,cAAcO,YAAcxT,KAAKmV,aAvEhG,cAuEkBpK,EAvElB,yBAwEmBnL,IAAUoL,QAAQD,IAxErC,mK,kBCLaoY,GACT,WAAYpQ,GAAU,yBAYtBnM,SAZqB,OAarBb,UAbqB,OAcrBqd,aAdqB,OAerBC,aAfqB,OAgBrBC,cAhBqB,OAkBrBC,eAlBqB,OAmBrBC,iBAnBqB,OAoBrBC,eApBqB,OAqBrBC,iBArBqB,EACjB1jB,KAAK4G,IAAMmM,EAAMA,EAAInM,IAAM,KAC3B5G,KAAK+F,KAAOgN,EAAMA,EAAIhN,KAAO,GAC7B/F,KAAKojB,QAAUrQ,EAAMA,EAAIqQ,QAAU,IAAItN,EACvC9V,KAAKqjB,QAAUtQ,EAAMA,EAAIsQ,QAAU,GACnCrjB,KAAKsjB,SAAWvQ,EAAMA,EAAI4Q,QAAU,GAEpC3jB,KAAKujB,UAAaxQ,EAAMA,EAAIwQ,UAAY,IAAIzN,EAC5C9V,KAAKwjB,YAAezQ,EAAMA,EAAIyQ,YAAa,IAAIlX,KAC/CtM,KAAKyjB,UAAa1Q,EAAMA,EAAI0Q,UAAY,IAAI3N,EAC5C9V,KAAK0jB,YAAe3Q,EAAMA,EAAI2Q,YAAc,IAAIpX,MCP3CsX,GACT,WAAY7Q,GAAU,yBAgBtBnM,SAhBqB,OAiBrBid,iBAjBqB,OAkBrBC,uBAlBqB,OAmBrBC,aAnBqB,OAoBrBC,cApBqB,OAqBrBC,gBArBqB,OAsBrBC,YAtBqB,OAuBrBC,gBAvBqB,OAwBrBb,cAxBqB,OA0BrBC,eA1BqB,OA2BrBC,iBA3BqB,OA4BrBC,eA5BqB,OA6BrBC,iBA7BqB,EACjB1jB,KAAK4G,IAAMmM,EAAMA,EAAInM,IAAM,KAC3B5G,KAAK6jB,YAAc9Q,EAAMA,EAAI8Q,YAAc,GAC3C7jB,KAAK8jB,kBAAoB/Q,EAAMA,EAAI+Q,kBAAoB,GACvD9jB,KAAK+jB,QAAUhR,EAAMA,EAAIgR,QAAU,IAAIZ,GACvCnjB,KAAKgkB,SAAWjR,EAAMA,EAAIiR,SAAW,IAAII,KACzCpkB,KAAKikB,WAAalR,EAAMA,EAAIkR,WAAa,IAAIG,KAC7CpkB,KAAKkkB,OAASnR,EAAMA,EAAImR,OAAS,IAAIpR,EACrC9S,KAAKmkB,WAAapR,EAAMA,EAAIoR,WAAa,IAAIrO,EAC7C9V,KAAKsjB,SAAWvQ,EAAMA,EAAI4Q,QAAU,GAEpC3jB,KAAKujB,UAAaxQ,EAAMA,EAAIwQ,UAAY,IAAIzN,EAC5C9V,KAAKwjB,YAAezQ,EAAMA,EAAIyQ,YAAa,IAAIlX,KAC/CtM,KAAKyjB,UAAa1Q,EAAMA,EAAI0Q,UAAY,IAAI3N,EAC5C9V,KAAK0jB,YAAe3Q,EAAMA,EAAI2Q,YAAc,IAAIpX,MCR3C+X,GAAwC,CACjDrgB,OAAQ,GACRsgB,SAAU,IAAIV,GACdW,cAAc,G,SCdLC,GACT,WAAYzR,GAAW,yBAMvBjN,YANsB,OAOtB6d,aAPsB,OAQtBc,iBARsB,OAStBC,iBATsB,EAClB1kB,KAAK8F,OAASiN,EAAMA,EAAIjN,OAAS,KACjC9F,KAAK2jB,QAAU5Q,EAAMA,EAAI4Q,QAAU,KACnC3jB,KAAKykB,YAAc1R,EAAMA,EAAI0R,YAAc,KAC3CzkB,KAAK0kB,YAAc3R,EAAMA,EAAI2R,YAAc,MCItCC,GAAsC,CAC/CrB,SAAU,GACVsB,WAAY,I,o1BCRhB,IAAMC,GAAUziB,IAAOC,IAAV,MAGPyiB,GAAW1iB,IAAOC,IAAV,MAGRF,GAAeC,IAAOC,IAAV,MAGZ0iB,GAAe3iB,IAAO6K,OAAV,MASZ+X,GAAuB5iB,IAAOC,IAAV,MAMpB4iB,GAAa7iB,IAAOC,IAAV,MAMH6iB,GAAb,kDACI,WAAYziB,GAAsB,IAAD,8BAC7B,cAAMA,IAEDoB,MAAQ8gB,GACb,EAAKtgB,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAK+kB,oBAAsB,EAAKA,oBAAoB/kB,KAAzB,gBAC3B,EAAKglB,mBAAqB,EAAKA,mBAAmBhlB,KAAxB,gBANG,EADrC,gEAWWJ,KAAKyC,MAAM6gB,UACVtjB,KAAKiF,SAAS,CACVqe,SAAUtjB,KAAKyC,MAAM6gB,aAbrC,mCAsBiB/d,GACTvF,KAAKiF,SAAS,CACV2f,WAAYrf,EAAEO,OAAOd,UAxBjC,4CA+B2B,IAAD,OAEdsT,EAAU,IAAIhM,KACdgX,EAAWtjB,KAAK6D,MAAMyf,SACtBsB,EAAa,IAAIJ,GAAQ,CACzBC,YAAazkB,KAAKyC,MAAM4iB,cACxB1B,QAAS3jB,KAAK6D,MAAM+gB,WACpBF,YAAapM,EAAQgN,gBAEzBhC,EAAShd,KAAKse,GACd5kB,KAAKiF,SAAS,CACVqe,SAAUA,EACVsB,WAAY,KACb,WACC,EAAKniB,MAAM8iB,gBAAgB,EAAK1hB,YA7C5C,2CAqDQ,IAAIsM,EAMJ,OALGnQ,KAAK6D,MAAMyf,SAAS7c,OAAS,IAC5B0J,EACI,4CAAkBnQ,KAAK6D,MAAMyf,SAAS7c,OAAtC,OAGD0J,IA3Df,2CAkEyBwT,GACjB,OACI,yBAAK6B,wBAAyB,CAACC,OAAQ9B,OApEnD,+BAwEc,IAAD,OACL,OACI,kBAAC,GAAD,KACI,yBAAKhc,UAAU,eACX,qCAAU,8BAAU3C,MAAOhF,KAAK6D,MAAM+gB,WAAY/hB,SAAU7C,KAAKqE,aAAcsD,UAAU,eAAeQ,KAAM,KAC9G,kBAAC6c,GAAD,KACI,kBAACD,GAAD,CAAc7U,QAASlQ,KAAKmlB,qBAA5B,UAGR,yBAAKxd,UAAU,gBAEP3H,KAAKolB,qBAGLplB,KAAK6D,MAAMyf,SAASd,MAAM,GAAGkD,UAAUne,KAAI,SAACoe,EAAKha,GAAN,OACvC,kBAACsZ,GAAD,CAAYtd,UAAU,UAAU5C,IAAK4G,GACjC,kBAACqZ,GAAD,CAAsBrd,UAAU,kBAC5B,kBAACkd,GAAD,CAASld,UAAU,gBAAnB,UAEOge,EAAIlB,YAAY1U,UAFvB,YAEoC4V,EAAIlB,YAAYzU,WAGpD,kBAAC8U,GAAD,CAAUnd,UAAU,gBAEZge,EAAIjB,cAIhB,yBAAK/c,UAAU,mBAEP,EAAKie,qBAAqBD,EAAIhC,oBAtGtE,GAAgCvgB,IAAMC,WCnCzBwiB,GAAb,oHAOgC1Z,EAAY2Z,GACpC,IACIC,EAAO5Z,EAAK6Z,cACZ1Y,EAAQnB,EAAK8Z,WAAa,EAC1BC,EAAM/Z,EAAKga,UACXC,EAAOja,EAAKka,WACZC,EAASna,EAAKoa,aACdC,EAASra,EAAKsa,aAOlB,OANSX,EAAOY,QAAQ,OAAQX,EAAKY,YAChCD,QAAQ,KAAM1mB,KAAK4mB,oBAAoBtZ,IACvCoZ,QAAQ,KAAM1mB,KAAK4mB,oBAAoBV,IACvCQ,QAAQ,KAAM1mB,KAAK4mB,oBAAoBR,IACvCM,QAAQ,MAAO1mB,KAAK4mB,oBAAoBN,IACxCI,QAAQ,KAAM1mB,KAAK4mB,oBAAoBJ,MApBpD,0CA4BwBjZ,GAGhB,OADSA,EAAS,GAAM,IAAMA,EAAOoZ,WAAcpZ,EAAOoZ,aA9BlE,uCAuCwBE,EAAYC,GAK5B,IAJA,IAAI3W,GAAkB,EAElB4W,EAA6B,GAC7BC,EAA6B,GACjC,MAAyBxb,OAAOyb,QAAQJ,GAAxC,eAAkD,CAAC,IAAD,sBAAxC9hB,EAAwC,KAAnCC,EAAmC,KAC9C+hB,EAAKhiB,GAAOC,EAEhB,cAAyBwG,OAAOyb,QAAQH,GAAxC,eAAkD,CAAC,IAAD,sBAAxC/hB,EAAwC,KAAnCC,EAAmC,KAC9CgiB,EAAKjiB,GAAOC,EAGhB,IAAK,IAAIsG,KAAKyb,EACV,GAAI7hB,KAAKE,UAAU2hB,EAAKzb,MAAQpG,KAAKE,UAAU4hB,EAAK1b,IAAK,CACrD6E,GAAS,EACT,MAGR,OAAOA,MAzDf,K,mOCmBA,IAAMhO,GAAeC,IAAOC,IAAV,MAQZ6kB,GAAwC,CAC1C5c,MAAO,MACP2H,QAAS,eACTM,UAAW,QACX3G,aAAc,QAEZub,GAAyC,CAC3C7c,MAAO,MACP2H,QAAS,eACTM,UAAW,OACX6I,YAAa,QAEXgM,GAA0C,CAC5C7U,UAAW,OACX6I,YAAa,QAEXiM,GAA6C,CAC/C3jB,OAAQ,OACR4jB,WAAY,OACZC,aAAc,uBACdjd,MAAO,OAELkd,GAAuC,CACzCjV,UAAW,SACX6I,YAAa,QAEXqM,G,kDAKF,WAAYhlB,GAAuB,IAAD,8BAC9B,cAAMA,IALV5C,YAIkC,IAHlC6nB,qBAGkC,IAFlC9jB,gBAEkC,IADlC+jB,mBACkC,EAG9B,EAAK9jB,MAAQwgB,GACb,EAAKzgB,WAAa,IAAIxC,aACtB,EAAKvB,OAAS,IAAImT,EAClB,EAAK0U,gBAAkB,IAAIzE,GAC3B,EAAK0E,cAAgB,IAAI9B,GAEzB,EAAKzP,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,aAAe,EAAKA,aAAajW,KAAlB,gBACpB,EAAK+kB,oBAAsB,EAAKA,oBAAoB/kB,KAAzB,gBAC3B,EAAKwnB,iBAAmB,EAAKA,iBAAiBxnB,KAAtB,gBACxB,EAAKynB,oBAAsB,EAAKA,oBAAoBznB,KAAzB,gBAC3B,EAAK0nB,mBAAqB,EAAKA,mBAAmB1nB,KAAxB,gBAdI,E,mLAmBX,cADFJ,KAAKyC,MAAM6L,MAAM9D,OAAjB,W,gCAEQxK,KAAK0nB,gBAAgBnS,QAAQvV,KAAKyC,MAAM6L,MAAM9D,OAAjB,Y,OAA9C8Z,E,OACJtkB,KAAKiF,SAAS,CACVqf,SAAUA,EACVC,cAAc,I,kLASPjO,G,0FAEXgO,EAAWtkB,KAAK6nB,oBAAoBvR,IAC5ByN,iBACDO,EAASP,QAAQT,gBACjBgB,EAASP,QAAQV,UAGxBrjB,KAAK6D,MAAM0gB,a,gCACCvkB,KAAK0nB,gBAAgBK,OAAOzD,G,OAAxCvZ,E,+CAGY/K,KAAK0nB,gBAAgBM,UAAU1D,G,QAA3CvZ,E,eAIoB,MADpBkd,EAAkBjoB,KAAK8nB,mBAAmBxD,MAEtC4D,EAAaloB,KAAK6D,MAAM0gB,aAAeD,EAAS1d,IAAMmE,EAEtDod,EAAW,IAAI3D,GAAQ,CACvB1e,OAAQoiB,EACRvE,QAASsE,EACTxD,YAAazkB,KAAKyC,MAAM2lB,UACxB1D,aAAa,IAAIpY,MAAOgZ,gBAE5BhB,EAAShB,SAAShd,KAAK6hB,GAEvBnoB,KAAK0nB,gBAAgBW,cAAc/D,EAAShB,UACvC7N,MAAK,SAACtF,GACA,EAAKtM,MAAM0gB,aACV,EAAKtf,SAAS,CACVqf,SAAUA,IAIdnW,OAAOC,SAASka,QAAO,MAI9B1S,OAAM,SAACpO,GAEJ7E,QAAQC,IAAI4E,O,iJAUT8c,GACf,IAAInU,EAAS,GAwKb,OAtKIjL,KAAKE,UAAUpF,KAAK6D,MAAMygB,YAAcpf,KAAKE,UAAUkf,KACnDpf,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAAST,eAAiB3e,KAAKE,UAAUkf,EAAST,cAC5E1T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,iBAEJ,yBAAK9f,MAAOkgB,IAEJlD,EAAST,aAGjB,kBAAC,KAAD,CAAW/a,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASR,qBAAuB5e,KAAKE,UAAUkf,EAASR,oBAClF3T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,wBAEJ,yBAAK9f,MAAOkgB,IAEJlD,EAASR,mBAGjB,kBAAC,KAAD,CAAWhb,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASP,WAAa7e,KAAKE,UAAUkf,EAASP,UACxE5T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,YACA,yCAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACM7C,EAASP,SAAWO,EAASP,QAAQnd,IAAtC,UACM0d,EAASP,QAAQhe,MAClB,KAId,kBAAC,KAAD,CAAW+C,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASJ,UAAYhf,KAAKE,UAAUkf,EAASJ,SACvE/T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,WACA,wCAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACK7C,EAASJ,OAAT,UACMI,EAASJ,OAAOlf,OACjB,KAId,kBAAC,KAAD,CAAW8D,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASH,cAAgBjf,KAAKE,UAAUkf,EAASH,aAC3EhU,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,gBACA,6CAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACM7C,EAASH,YAAcG,EAASH,WAAWvd,IAA5C,UACM0d,EAASH,WAAWpU,UAD1B,YACuCuU,EAASH,WAAWnU,UACtD,KAId,kBAAC,KAAD,CAAWlH,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASN,YAAc9e,KAAKE,UAAUkf,EAASN,WACzE7T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,cACA,2CACA,0CAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACK7C,EAASN,SAASjd,UACf/G,KAAK2nB,cAAcc,4BAA4BnE,EAASN,SAASjd,UAAW/G,KAAKH,OAAO+U,eAAeC,UACrG,IAGV,6BACKyP,EAASN,SAAShd,QACfhH,KAAK2nB,cAAcc,4BAA4BnE,EAASN,SAAShd,QAAShH,KAAKH,OAAO+U,eAAeC,UACnG,KAId,kBAAC,KAAD,CAAW/L,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMygB,SAASL,cAAgB/e,KAAKE,UAAUkf,EAASL,aAC3E9T,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,gBACA,2CACA,0CAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACK7C,EAASL,WAAWld,UACjB/G,KAAK2nB,cAAcc,4BAA4BnE,EAASL,WAAWld,UAAW/G,KAAKH,OAAO+U,eAAeC,UACvG,IAGV,6BACKyP,EAASL,WAAWjd,QACjBhH,KAAK2nB,cAAcc,4BAA4BnE,EAASL,WAAWjd,QAAShH,KAAKH,OAAO+U,eAAeC,UACrG,KAId,kBAAC,KAAD,CAAW/L,cAAeue,SAMvClX,EAAO2M,KAAK,M,0CAOHxG,GAChB,IAAIoS,EAAa1oB,KAAK6D,MAAMygB,SACxBqE,EAAU,IAAI/E,GAAStN,EAAKvS,YAOhC,OANA4kB,EAAQ/hB,IAAM8hB,EAAW9hB,IACzB+hB,EAAQrF,SAAWoF,EAAWpF,SAC9BqF,EAAQpF,UAAYmF,EAAWnF,UAC/BoF,EAAQnF,YAAckF,EAAWlF,YACjCmF,EAAQlF,UAAYiF,EAAWjF,UAC/BkF,EAAQjF,YAAcgF,EAAWhF,YAC1BiF,I,0CAOSrS,GAAsB,IAAD,OACjCgO,EAAWtkB,KAAK6D,MAAMygB,SAC1BA,EAAShB,SAAWhN,EAAKgN,SACzBgB,EAAShB,SAASze,SAAQ,SAACC,GACvBA,EAAIgB,OAASwe,EAAS1d,OAEtB5G,KAAK6D,MAAM0gB,cACXvkB,KAAK0nB,gBAAgBW,cAAc/D,EAAShB,UACvC7N,MAAK,SAACtF,GACH,EAAKlL,SAAS,CACVqf,SAAUA,OAGjB1O,OAAM,SAACpO,GACJ7E,QAAQC,IAAI4E,Q,kCAShB8c,GAAqB,IAAD,OACxB9N,EAAiC,GACjCrQ,EAA+C,IAEnDA,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,4BAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,cACLgD,MAAO,cACP/C,MAAOsf,EAAST,YAChB1d,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,OAIXtQ,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,oCAElBiQ,EAAUlQ,KAAK,IAAI9E,mBAAiB,CAChCuD,IAAK,oBACLgD,MAAO,qBACP/C,MAAOsf,EAASR,kBAChB3d,WAAYA,EACZgC,KAAM,EACNsO,MAAO,MAIXD,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,UACLgD,MAAO,UACP/C,MAAOsf,EAASP,QAChBzb,UAAWtI,KAAKH,OAAOoT,cAAcU,SACrCpL,aAAc,OACdxE,WAAY,CAAC,QACb6kB,WAAW,EACXnS,MAAO,MAGX,IAAIvV,EAAsB,GAC1BsK,OAAOC,KAAKzL,KAAKH,OAAO2U,gBAAgB3P,SAAQ,SAAC6G,EAAKC,GAClDzK,EAAQoF,KAAK,EAAKzG,OAAO2U,eAAe9I,QAE5CxK,EAAUA,EAAQwV,MAAK,SAACjE,EAAGkE,GAAJ,OAAUlE,EAAE1N,IAAM4R,EAAE5R,QACnC6Z,QAAQ5e,KAAKH,OAAO4U,uBAAuBE,OAEnDxO,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,uBAElBiQ,EAAUlQ,KAAK,IAAIrF,mBAAiB,CAChC8D,IAAK,SACLgD,MAAO,SACP/C,MAAOsf,EAASJ,OAChB/d,WAAYA,EACZjF,QAASA,EACT0nB,WAAW,EACXnS,MAAO,MAIXD,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,aACLgD,MAAO,cACP/C,MAAOsf,EAASH,WAChB7b,UAAWtI,KAAKH,OAAOoT,cAAcG,MACrC7K,aAAc,QACdxE,WAAY,CAAC,QAAS,YAAa,YACnC6kB,WAAW,EACXnS,MAAO,MAKX,IAAI3U,EAAYwiB,EAASN,SA0BzB,OAzBAliB,EAAUiF,UAAYjF,EAAUiF,UAAY,IAAIuF,KAAKxK,EAAUiF,gBAAagF,EAC5EjK,EAAUkF,QAAUlF,EAAUkF,QAAU,IAAIsF,KAAKxK,EAAUkF,cAAW+E,GACtE5F,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,0BAElBiQ,EAAUlQ,KAAK,IAAIzE,oBAAkB,CACjCkD,IAAK,WACLgD,MAAO,OACP/C,MAAOlD,EACPqE,WAAYA,EACZsQ,MAAO,OAIX3U,EAAYwiB,EAASL,YACXld,UAAYjF,EAAUiF,UAAY,IAAIuF,KAAKxK,EAAUiF,gBAAagF,EAC5EjK,EAAUkF,QAAUlF,EAAUkF,QAAU,IAAIsF,KAAKxK,EAAUkF,cAAW+E,EACtEyK,EAAUlQ,KAAK,IAAIzE,oBAAkB,CACjCkD,IAAK,aACLgD,MAAO,SACP/C,MAAOlD,EACP2U,MAAO,MAEJD,EAAUE,MAAK,SAACjE,EAAEkE,GAAH,OAAQlE,EAAEgE,MAAQE,EAAEF,W,yCAO1C,IAAItG,EAWJ,OAVInQ,KAAK6D,MAAM0gB,eACXpU,EACI,6BACI,kBAAC,KAAD,MACA,kBAAC,GAAD,CAAYkV,cAAerlB,KAAKyC,MAAM2lB,UAClC9E,SAAUtjB,KAAK6D,MAAMygB,SAAShB,SAC9BiC,gBAAiBvlB,KAAKmlB,wBAI/BhV,I,+BAIP,IAAIqG,EAAYxW,KAAKoW,YAAYpW,KAAK6D,MAAMygB,UAC5C,OACI,kBAAC,GAAD,KACI,kBAAC3gB,EAAA,YAAD,CAAaiB,WAAY4R,EAAW7N,iBAAkB3I,KAAKqW,eAEvDrW,KAAK4nB,wB,GArbOxkB,IAAMC,WA4bvBuT,eAAW6Q,I,8GCtd1B,IAAMtlB,GAAeC,IAAOC,IAAV,MAIZwmB,G,kDAIF,WAAYpmB,GAAgC,IAAD,8BACvC,cAAMA,IAJVilB,qBAG2C,IAF3C7nB,YAE2C,IAD3C8nB,mBAC2C,EAGvC,EAAK9jB,MAAQ,CACTilB,YAAa,GACbC,aAAc,GACd9G,WAAW,EACX+G,mBAAmB,GAEvB,EAAKtB,gBAAkB,IAAIzE,GAC3B,EAAK0E,cAAgB,IAAI9B,GACzB,EAAKhmB,OAAS,IAAImT,EAElB,EAAKiW,oBAAsB,EAAKA,oBAAoB7oB,KAAzB,gBAC3B,EAAK8oB,sBAAwB,EAAKA,sBAAsB9oB,KAA3B,gBAC7B,EAAK+oB,mBAAqB,EAAKA,mBAAmB/oB,KAAxB,gBAC1B,EAAKgpB,oBAAsB,EAAKA,oBAAoBhpB,KAAzB,gBAhBY,E,iEAoBnCJ,KAAK6D,MAAMmlB,mBAGXhpB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,0KAMJhpB,KAAK0nB,gBAAgBxE,a,OAAxC1P,E,OACJxT,KAAKyC,MAAM4mB,gBAAgB7V,GAC3BxT,KAAKiF,SAAS,CAAE6jB,YAAatV,I,yLAOP6O,G,8EACtBriB,KAAKiF,SAAS,CACVgd,WAAW,IAGW,KADtBzO,EAAaxT,KAAK6D,MAAMilB,aACbriB,O,gCACQzG,KAAK0nB,gBAAgBxE,a,OAAxC1P,E,OACAxT,KAAKyC,MAAM4mB,gBAAgB7V,G,OAEzB8O,EAAWD,EAAW7C,SAAW6C,EAAW9C,UAC5CgD,EAASD,EAAWD,EAAW7C,SACrCxf,KAAKiF,SAAS,CACV6jB,YAAatV,EACbuV,aAAcvV,EAAWgP,MAAMF,EAAUC,GACzCN,WAAW,I,6LAQSQ,G,qEACpBtU,OAAOuU,QAAQ,iD,gCACT1iB,KAAK0nB,gBAAgB/E,cAAcF,G,OACzCtU,OAAOC,SAASka,S,kJAQpBtoB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,4CAQvB,GAAIhpB,KAAK6D,MAAMmlB,kBACX,OACI,kBAAC,IAAD,CAAU1iB,MAAM,EAAM2J,GAAG,uC,+BAK3B,IAAD,OACCkN,EAAU,CACZ,CACI0B,OAAQ,cACR3W,GAAI,cACJ0a,SAAU,cACV7D,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAMtH,GAAE,qBAAgBsH,EAAIsL,SAASjc,MAAQ2Q,EAAIsL,SAASgB,eAEhG,CACIhF,OAAQ,sBACR3W,GAAI,oBACJ0a,SAAU,qBAEd,CACI/D,OAAQ,UACR3W,GAAI,UACJ0a,SAAU,SAACrL,GAAD,OAAmBA,EAAIwM,QAAJ,UAAiBxM,EAAIwM,QAAQhe,MAAS,KAEvE,CACI8Y,OAAQ,YACR3W,GAAI,WACJiV,QAAS,CACL,CACI0B,OAAQ,aACR3W,GAAI,gBACJ0a,SAAU,SAACrL,GACP,IAAIpH,EAAS,GACb,GAAIoH,EAAIyM,UAAYzM,EAAIyM,SAASjd,UAAW,CACxC,IAAI6b,EAAW,IAAItW,KAAKiL,EAAIyM,SAASjd,WACrCoJ,EAAS,EAAKwX,cAAcc,4BAA4B7F,EAAU,EAAK/iB,OAAO+U,eAAeC,UAEjG,OAAO1E,IAGf,CACI0O,OAAQ,WACR3W,GAAI,cACJ0a,SAAU,SAACrL,GACP,IAAIpH,EAAS,GACb,GAAIoH,EAAIyM,UAAYzM,EAAIyM,SAAShd,QAAS,CACtC,IAAI4b,EAAW,IAAItW,KAAKiL,EAAIyM,SAAShd,SACrCmJ,EAAS,EAAKwX,cAAcc,4BAA4B7F,EAAU,EAAK/iB,OAAO+U,eAAeC,UAEjG,OAAO1E,MAKvB,CACI0O,OAAQ,cACR3W,GAAI,aACJiV,QAAS,CACL,CACI0B,OAAQ,aACR3W,GAAI,kBACJ0a,SAAU,SAACrL,GACP,IAAIpH,EAAS,GACb,GAAIoH,EAAI0M,YAAc1M,EAAI0M,WAAWld,UAAW,CAC5C,IAAI6b,EAAW,IAAItW,KAAKiL,EAAI0M,WAAWld,WACvCoJ,EAAS,EAAKwX,cAAcc,4BAA4B7F,EAAU,EAAK/iB,OAAO+U,eAAeC,UAEjG,OAAO1E,IAGf,CACI0O,OAAQ,WACR3W,GAAI,gBACJ0a,SAAU,SAACrL,GACP,IAAIpH,EAAS,GACb,GAAIoH,EAAI0M,YAAc1M,EAAI0M,WAAWjd,QAAS,CAC1C,IAAI4b,EAAW,IAAItW,KAAKiL,EAAI0M,WAAWjd,SACvCmJ,EAAS,EAAKwX,cAAcc,4BAA4B7F,EAAU,EAAK/iB,OAAO+U,eAAeC,UAEjG,OAAO1E,MAKvB,CACI0O,OAAQ,SACR3W,GAAI,SAEJ+V,OAAQ7G,GACR5N,OAAQ,WACRoZ,SAAU,SAACrL,GACP,IAAIpH,EAAS,GAIb,OAHIoH,EAAI2M,SACJ/T,EAASoH,EAAI2M,OAAOlf,OAEjBmL,IAGf,CACI0O,OAAQ,cACR3W,GAAI,aACJ0a,SAAU,SAACrL,GAAD,OAAmBA,EAAI4M,WAAJ,UAAoB5M,EAAI4M,WAAWpU,UAAnC,YAAgDwH,EAAI4M,WAAWnU,UAAa,MAGjH,OACI,6BAEQhQ,KAAKopB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtG,OAAK,EAACC,KAAK,0BACd,kBAAC,GAAD,CAAcpb,UAAU,iBACpB,kBAAC,GAAD,CAAOwV,QAASA,EACZtc,KAAMb,KAAK6D,MAAMilB,YACjBxL,UAAWtd,KAAK6D,MAAMilB,YAAYriB,OAClC2W,UAAW,aACXpB,oBAAqBhc,KAAKkpB,sBAC1BjN,iBAAkBjc,KAAKmpB,mBACvBjN,UAAU,iBAItB,kBAAC,IAAD,CAAO6G,KAAI,sCACP,kBAAC,GAAD,CAAmBqF,UAAWpoB,KAAKyC,MAAMmN,KAAKgB,qB,GAjNtCvN,aAgO1BmN,GAAqB,CACvB6Y,gBC7PG,SAAyBC,GAC9B,MAAO,CACL7nB,KCF4B,mBDG5BuhB,QAASsG,KD6PE5Y,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZmZ,aAAcpY,EAAM6C,cAQahD,GAA1BE,CAA8CmY,IGpPhDU,GAAgC,CAC5Cxc,MAAO,GACPS,SAAU,GACVgc,YAAY,EACZvlB,qBAAqB,EACrBwlB,wBAAwB,EACxBC,sBAAsB,G,koBChBvB,IAAM5X,GAAY1P,IAAOC,IAAV,MAKT0P,GAAW3P,IAAOC,IAAV,MAORsnB,GAAUvnB,IAAOC,IAAV,MAGPoB,GAA+B,CACjCC,OAAQ,GAEN4O,GAAkC,CACpCC,UAAW,UAETC,GAAQpQ,IAAOqQ,EAAV,MAGUmX,G,kDACjB,WAAYnnB,GAAoB,IAAD,8BAC3B,cAAMA,IAEDoB,MAAQ0lB,GACb,EAAKllB,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKypB,oBAAsB,EAAKA,oBAAoBzpB,KAAzB,gBAC3B,EAAK0pB,qBAAuB,EAAKA,qBAAqB1pB,KAA1B,gBAC5B,EAAK2pB,mBAAqB,EAAKA,mBAAmB3pB,KAAxB,gBAPC,E,yDAclB0C,GAAa,IAAD,OACrB9C,KAAKiF,SAAL,eACKnC,EAAMgD,OAAOC,KAAOjD,EAAMgD,OAAOd,QACnC,WACC,IAAIK,EAAgC,KAArB,EAAKxB,MAAMkJ,OAAwC,KAAxB,EAAKlJ,MAAM2J,SACrD,EAAKvI,SAAS,CACVhB,oBAAqBoB,S,0CASbvC,GAChB9C,KAAKiF,SAAL,eACKnC,EAAMgD,OAAOC,KAAOjD,EAAMgD,OAAOuE,Y,6CAQtCrK,KAAKiF,SAAS,CACVwkB,wBAAwB,M,2CAQ5BzpB,KAAKiF,SAAS,CACVykB,sBAAsB,M,+BAIpB,IAAD,OAEL,OAAG1pB,KAAK6D,MAAM4lB,uBACH,kBAAC,IAAD,CAAUnjB,MAAM,EAAM2J,GAAIjQ,KAAKyC,MAAMunB,6BAG7ChqB,KAAK6D,MAAM6lB,qBACH,kBAAC,IAAD,CAAUpjB,MAAM,EAAM2J,GAAIjQ,KAAKyC,MAAMwnB,2BAI5C,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,0BAAMxhB,SAAU,SAAClD,GAAOA,EAAEmD,iBAAkB,EAAKjG,MAAMynB,QAAQ,EAAKrmB,SAChE,wBAAIyD,MAAOgL,IAAX,SAEA,yBAAK3K,UAAU,cACX,+BAAO,kDACP,2BAAO5B,KAAK,QACRtE,KAAK,QACLoB,SAAU7C,KAAKqE,aACfsD,UAAU,eACVgD,YAAY,iBAGpB,yBAAKhD,UAAU,cACX,+BAAO,6CACP,2BAAO5B,KAAK,WACRtE,KAAK,WACLoB,SAAU7C,KAAKqE,aACfsD,UAAU,eACVgD,YAAY,oBAGpB,yBAAKhD,UAAU,cACX,yBAAKA,UAAU,kCACX,2BAAO5B,KAAK,aACRtE,KAAK,WACLkG,UAAU,uBACVuI,QAASlQ,KAAK6pB,oBACd3hB,GAAG,iBACP,2BAAOP,UAAU,uBAAuBC,QAAQ,gBAC5C,kDAKZ,2BAAON,MAAO7D,GACVhC,KAAK,SACLuD,MAAM,SACN2C,UAAU,4BACVtC,SAAUrF,KAAK6D,MAAMI,sBAEzB,kBAAC0lB,GAAD,KACI,uBAAGhiB,UAAU,cACT,kBAAC,GAAD,CAAOA,UAAU,WAAWuI,QAASlQ,KAAK+pB,oBAA1C,YAEJ,uBAAGpiB,UAAU,eAAb,UACW,kBAAC,GAAD,CAAOuI,QAASlQ,KAAK8pB,sBAArB,sB,GAhHJzmB,aCtBtB8mB,GAAb,WAGI,aAAe,yBAFfjV,aAEc,OADdC,iBACc,EACVnV,KAAKkV,QAAU,IAAIlC,EACnBhT,KAAKmV,YAAcnU,IAEnBhB,KAAKkjB,WAAaljB,KAAKkjB,WAAW9iB,KAAKJ,MACvCA,KAAKuV,QAAUvV,KAAKuV,QAAQnV,KAAKJ,MARzC,kMAgB8DJ,IAAUU,IAAIN,KAAKkV,QAAQjC,cAAcQ,gBAhBvG,cAgBkB1I,EAhBlB,yBAiBmBnL,IAAUoL,QAAQD,IAjBrC,iOA4ByB7C,GA5BzB,gGA8B4DtI,IAAUU,IAAV,UAAiBN,KAAKkV,QAAQjC,cAAcQ,eAA5C,YAA8DvL,IA9B1H,cA8BkB6C,EA9BlB,yBA+BmBnL,IAAUoL,QAAQD,IA/BrC,oOAsC2BgI,GAtC3B,gGAwC8BnT,IAAUa,KAAV,UAAkBT,KAAKkV,QAAQjC,cAAcQ,gBAAkBV,GAxC7F,cAwCkBhI,EAxClB,yBAyCmBnL,IAAUoL,QAAQD,IAzCrC,iOAgDwBgI,GAhDxB,gGAkD8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcQ,gBAAkBV,GAlD5F,cAkDkBhI,EAlDlB,yBAmDmBnL,IAAUoL,QAAQD,IAnDrC,wOA0D+BgI,GA1D/B,gGA4D8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcQ,eAA5C,aAAuEV,GA5DrG,cA4DkBhI,EA5DlB,yBA6DmBnL,IAAUoL,QAAQD,IA7DrC,wOAoE+B8K,GApE/B,uFAsEY7V,KAAKmV,YAAYtU,KAAOgV,EAtEpC,SAuE8BjW,IAAUW,OAAV,UAAoBP,KAAKkV,QAAQjC,cAAcQ,gBAAkBzT,KAAKmV,aAvEpG,cAuEkBpK,EAvElB,yBAwEmBnL,IAAUoL,QAAQD,IAxErC,kKCLaqf,GACT,WAAYrX,GAAU,yBAWtBnM,SAXqB,OAYrBb,UAZqB,OAarBskB,WAbqB,OAcrB/G,cAdqB,OAgBrBC,eAhBqB,OAiBrBC,iBAjBqB,OAkBrBC,eAlBqB,OAmBrBC,iBAnBqB,EACjB1jB,KAAK4G,IAAMmM,EAAMA,EAAInM,IAAM,KAC3B5G,KAAK+F,KAAOgN,EAAMA,EAAIhN,KAAO,GAC7B/F,KAAKqqB,MAAQtX,EAAMA,EAAIsX,MAAQ,IAAIvU,EACnC9V,KAAKsjB,SAAWvQ,EAAMA,EAAI4Q,QAAU,GAEpC3jB,KAAKujB,UAAaxQ,EAAMA,EAAIwQ,UAAY,IAAIzN,EAC5C9V,KAAKwjB,YAAezQ,EAAMA,EAAIyQ,YAAa,IAAIlX,KAC/CtM,KAAKyjB,UAAa1Q,EAAMA,EAAI0Q,UAAY,IAAI3N,EAC5C9V,KAAK0jB,YAAe3Q,EAAMA,EAAI2Q,YAAc,IAAIpX,MCC3Cge,GAAkD,CAC3DtmB,OAAQ,GACRumB,cAAe,IAAIH,GACnB7F,cAAc,G,+MCClB,IAAMpiB,GAAeC,IAAOC,IAAV,MAQZ6kB,GAAwC,CAC1C5c,MAAO,MACP2H,QAAS,eACTM,UAAW,QACX3G,aAAc,QAEZub,GAAyC,CAC3C7c,MAAO,MACP2H,QAAS,eACTM,UAAW,OACX6I,YAAa,QAEXgM,GAA0C,CAC5C7U,UAAW,OACX6I,YAAa,QAEXiM,GAA6C,CAC/C3jB,OAAQ,OACR4jB,WAAY,OACZC,aAAc,uBACdjd,MAAO,OAELkd,GAAuC,CACzCjV,UAAW,SACX6I,YAAa,QAEXoP,G,kDAKF,WAAY/nB,GAA4B,IAAD,8BACnC,cAAMA,IALV5C,YAIuC,IAHvC4qB,0BAGuC,IAFvC7mB,gBAEuC,IADvC+jB,mBACuC,EAGnC,EAAK9jB,MAAQymB,GACb,EAAK1mB,WAAa,IAAIxC,aACtB,EAAKvB,OAAS,IAAImT,EAClB,EAAKyX,qBAAuB,IAAIN,GAChC,EAAKxC,cAAgB,IAAI9B,GAEzB,EAAKzP,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,aAAe,EAAKA,aAAajW,KAAlB,gBACpB,EAAK+kB,oBAAsB,EAAKA,oBAAoB/kB,KAAzB,gBAC3B,EAAKwnB,iBAAmB,EAAKA,iBAAiBxnB,KAAtB,gBACxB,EAAKynB,oBAAsB,EAAKA,oBAAoBznB,KAAzB,gBAC3B,EAAKsqB,wBAA0B,EAAKA,wBAAwBtqB,KAA7B,gBAdI,E,mLAmBX,cADFJ,KAAKyC,MAAM6L,MAAM9D,OAAjB,gB,gCAEQxK,KAAKyqB,qBAAqBlV,QAAQvV,KAAKyC,MAAM6L,MAAM9D,OAAjB,iB,OAAxD+f,E,OACJvqB,KAAKiF,SAAS,CACVslB,cAAeA,EACfhG,cAAc,I,kLASPjO,G,yFAEXiU,EAAgBvqB,KAAK6nB,oBAAoBvR,IAEzCtW,KAAK6D,MAAM0gB,a,gCACCvkB,KAAKyqB,qBAAqB1C,OAAOwC,G,OAA7Cxf,E,8CAGY/K,KAAKyqB,qBAAqBzC,UAAUuC,G,OAAhDxf,E,eAIyB,MADzB4f,EAAuB3qB,KAAK0qB,wBAAwBH,MAEhDK,EAAkB5qB,KAAK6D,MAAM0gB,aAAegG,EAAc3jB,IAAMmE,EAEhEod,EAAW,IAAI3D,GAAQ,CACvB1e,OAAQ8kB,EACRjH,QAASgH,EACTlG,YAAazkB,KAAKyC,MAAM2lB,UACxB1D,aAAa,IAAIpY,MAAOgZ,gBAE5BiF,EAAcjH,SAAShd,KAAK6hB,GAE5BnoB,KAAKyqB,qBAAqBpC,cAAckC,EAAcjH,UACjD7N,MAAK,SAACtF,GACA,EAAKtM,MAAM0gB,aACV,EAAKtf,SAAS,CACVslB,cAAeA,IAInBpc,OAAOC,SAASka,QAAO,MAI9B1S,OAAM,SAACpO,GAEJ7E,QAAQC,IAAI4E,O,sJAUJ+iB,GACpB,IAAIpa,EAAS,GA4Cb,OA1CIjL,KAAKE,UAAUpF,KAAK6D,MAAM0mB,iBAAmBrlB,KAAKE,UAAUmlB,KACxDrlB,KAAKE,UAAUpF,KAAK6D,MAAM0mB,cAAcxkB,QAAUb,KAAKE,UAAUmlB,EAAcxkB,OAC/EoK,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,UAEJ,yBAAK9f,MAAOkgB,IAEJ+C,EAAcxkB,MAGtB,kBAAC,KAAD,CAAW+C,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAM0mB,cAAcF,SAAWnlB,KAAKE,UAAUmlB,EAAcF,QAChFla,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,UACA,uCAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACMoD,EAAcF,OAASE,EAAcF,MAAMzjB,IAA5C,UACM2jB,EAAcF,MAAMta,UAD1B,YACuCwa,EAAcF,MAAMra,UACtD,KAId,kBAAC,KAAD,CAAWlH,cAAeue,SAMvClX,EAAO2M,KAAK,M,0CAOHxG,GAChB,IAAIoS,EAAa1oB,KAAK6D,MAAM0mB,cACxB5B,EAAU,IAAIyB,GAAc9T,EAAKvS,YAOrC,OANA4kB,EAAQ/hB,IAAM8hB,EAAW9hB,IACzB+hB,EAAQrF,SAAWoF,EAAWpF,SAC9BqF,EAAQpF,UAAYmF,EAAWnF,UAC/BoF,EAAQnF,YAAckF,EAAWlF,YACjCmF,EAAQlF,UAAYiF,EAAWjF,UAC/BkF,EAAQjF,YAAcgF,EAAWhF,YAC1BiF,I,0CAOSrS,GAAsB,IAAD,OACjCiU,EAAgBvqB,KAAK6D,MAAM0mB,cAC/BA,EAAcjH,SAAWhN,EAAKgN,SAC9BiH,EAAcjH,SAASze,SAAQ,SAACC,GAC5BA,EAAIgB,OAASykB,EAAc3jB,OAE3B5G,KAAK6D,MAAM0gB,cACXvkB,KAAKyqB,qBAAqBpC,cAAckC,EAAcjH,UACjD7N,MAAK,SAACtF,GACH,EAAKlL,SAAS,CACVslB,cAAeA,OAGtB3U,OAAM,SAACpO,GACJ7E,QAAQC,IAAI4E,Q,kCAShB+iB,GACR,IAAI/T,EAAiC,GACjCrQ,EAA+C,GA4BnD,OA1BAA,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,qBAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,OACLgD,MAAO,OACP/C,MAAOulB,EAAcxkB,KACrBI,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,OAIXD,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,QACLgD,MAAO,QACP/C,MAAOulB,EAAcF,MACrB/hB,UAAWtI,KAAKH,OAAOoT,cAAcG,MACrC7K,aAAc,QACdxE,WAAY,CAAC,QAAS,YAAa,YACnC6kB,WAAW,EACXnS,MAAO,OAGJD,EAAUE,MAAK,SAACjE,EAAEkE,GAAH,OAAQlE,EAAEgE,MAAQE,EAAEF,W,yCAO1C,IAAItG,EAWJ,OAVInQ,KAAK6D,MAAM0gB,eACXpU,EACI,6BACI,kBAAC,KAAD,MACA,kBAAC,GAAD,CAAYkV,cAAerlB,KAAKyC,MAAM2lB,UAClC9E,SAAUtjB,KAAK6D,MAAM0mB,cAAcjH,SACnCiC,gBAAiBvlB,KAAKmlB,wBAI/BhV,I,+BAIP,IAAIqG,EAAYxW,KAAKoW,YAAYpW,KAAK6D,MAAM0mB,eAC5C,OACI,kBAAC,GAAD,KACI,kBAAC5mB,EAAA,YAAD,CAAaiB,WAAY4R,EAAW7N,iBAAkB3I,KAAKqW,eAEvDrW,KAAK4nB,wB,GAxOYxkB,IAAMC,WA+O5BuT,eAAW4T,I,8GCzQ1B,IAAMroB,GAAeC,IAAOC,IAAV,MAIZwoB,G,kDAIF,WAAYpoB,GAAqC,IAAD,8BAC5C,cAAMA,IAJVgoB,0BAGgD,IAFhD5qB,YAEgD,IADhD8nB,mBACgD,EAG5C,EAAK9jB,MAAQ,CACTinB,iBAAkB,GAClBC,kBAAmB,GACnB9I,WAAW,EACX+G,mBAAmB,GAEvB,EAAKyB,qBAAuB,IAAIN,GAChC,EAAKxC,cAAgB,IAAI9B,GACzB,EAAKhmB,OAAS,IAAImT,EAElB,EAAKgY,yBAA2B,EAAKA,yBAAyB5qB,KAA9B,gBAChC,EAAK6qB,2BAA6B,EAAKA,2BAA2B7qB,KAAhC,gBAClC,EAAK8qB,wBAA0B,EAAKA,wBAAwB9qB,KAA7B,gBAC/B,EAAKgpB,oBAAsB,EAAKA,oBAAoBhpB,KAAzB,gBAhBiB,E,iEAoBxCJ,KAAK6D,MAAMmlB,mBAGXhpB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,0KAMAhpB,KAAKyqB,qBAAqBvH,a,OAAjDzP,E,OACJzT,KAAKyC,MAAM0oB,oBAAoB1X,GAC/BzT,KAAKiF,SAAS,CAAE6lB,iBAAkBrX,I,8LAOP4O,G,8EAC3BriB,KAAKiF,SAAS,CACVgd,WAAW,IAGe,KAD1BxO,EAAiBzT,KAAK6D,MAAMinB,kBACbrkB,O,gCACQzG,KAAKyqB,qBAAqBvH,a,OAAjDzP,E,OACAzT,KAAKyC,MAAM0oB,oBAAoB1X,G,OAE7B6O,EAAWD,EAAW7C,SAAW6C,EAAW9C,UAC5CgD,EAASD,EAAWD,EAAW7C,SACrCxf,KAAKiF,SAAS,CACV6lB,iBAAkBrX,EAClBsX,kBAAmBtX,EAAe+O,MAAMF,EAAUC,GAClDN,WAAW,I,kMAQcQ,G,qEACzBtU,OAAOuU,QAAQ,iD,gCACT1iB,KAAKyqB,qBAAqB9H,cAAcF,G,OAC9CtU,OAAOC,SAASka,S,uJAQpBtoB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,4CAQvB,GAAIhpB,KAAK6D,MAAMmlB,kBACX,OACI,kBAAC,IAAD,CAAU1iB,MAAM,EAAM2J,GAAG,2C,+BAMjC,IAAMkN,EAAU,CACZ,CACI0B,OAAQ,OACR3W,GAAI,OACJ0a,SAAU,OACV7D,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAMtH,GAAE,yBAAoBsH,EAAIsL,SAASjc,MAAQ2Q,EAAIsL,SAAS9c,QAEpG,CACI8Y,OAAQ,QACR3W,GAAI,QACJ0a,SAAU,SAACrL,GAAD,OAAwBA,EAAI8S,MAAJ,UAAe9S,EAAI8S,MAAMta,UAAzB,YAAsCwH,EAAI8S,MAAMra,UAAa,MAGvG,OACI,6BAEQhQ,KAAKopB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtG,OAAK,EAACC,KAAK,8BACd,kBAAC,GAAD,CAAcpb,UAAU,sBACpB,kBAAC,GAAD,CAAOwV,QAASA,EACZtc,KAAMb,KAAK6D,MAAMinB,iBACjBxN,UAAWtd,KAAK6D,MAAMinB,iBAAiBrkB,OACvC2W,UAAW,aACXpB,oBAAqBhc,KAAKirB,2BAC1BhP,iBAAkBjc,KAAKkrB,wBACvBhP,UAAU,sBAItB,kBAAC,IAAD,CAAO6G,KAAI,+CACP,kBAAC,GAAD,CAAwBqF,UAAWpoB,KAAKyC,MAAMmN,KAAKgB,qB,GA7HtCvN,aA4I/BmN,GAAqB,CACvB2a,oBCvKG,SAA6B7B,GAClC,MAAO,CACL7nB,KCFiC,wBDGjCuhB,QAASsG,KDuKE5Y,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZmb,kBAAmBpa,EAAM8C,kBAQQjD,GAA1BE,CAA8Cma,IGvKhDO,GAAb,WAGI,aAAe,yBAFflW,aAEc,OADdC,iBACc,EACVnV,KAAKkV,QAAU,IAAIlC,EACnBhT,KAAKmV,YAAcnU,IAEnBhB,KAAKkjB,WAAaljB,KAAKkjB,WAAW9iB,KAAKJ,MACvCA,KAAKuV,QAAUvV,KAAKuV,QAAQnV,KAAKJ,MARzC,kMAgBiEJ,IAAUU,IAAIN,KAAKkV,QAAQjC,cAAcS,mBAhB1G,cAgBkB3I,EAhBlB,yBAiBmBnL,IAAUoL,QAAQD,IAjBrC,iOA4ByB7C,GA5BzB,gGA8B+DtI,IAAUU,IAAV,UAAiBN,KAAKkV,QAAQjC,cAAcS,kBAA5C,YAAiExL,IA9BhI,cA8BkB6C,EA9BlB,yBA+BmBnL,IAAUoL,QAAQD,IA/BrC,oOAsC2BgI,GAtC3B,gGAwC8BnT,IAAUa,KAAV,UAAkBT,KAAKkV,QAAQjC,cAAcS,mBAAqBX,GAxChG,cAwCkBhI,EAxClB,yBAyCmBnL,IAAUoL,QAAQD,IAzCrC,iOAgDwBgI,GAhDxB,gGAkD8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcS,mBAAqBX,GAlD/F,cAkDkBhI,EAlDlB,yBAmDmBnL,IAAUoL,QAAQD,IAnDrC,wOA0D+B8K,GA1D/B,uFA4DY7V,KAAKmV,YAAYtU,KAAOgV,EA5DpC,SA6D8BjW,IAAUW,OAAV,UAAoBP,KAAKkV,QAAQjC,cAAcS,mBAAqB1T,KAAKmV,aA7DvG,cA6DkBpK,EA7DlB,yBA8DmBnL,IAAUoL,QAAQD,IA9DrC,kKCJasgB,GACT,WAAYtY,GAAU,yBAatBnM,SAbqB,OAcrB0kB,sBAdqB,OAerBf,mBAfqB,OAgBrBgB,cAhBqB,OAiBrBC,cAjBqB,OAkBrBC,aAlBqB,OAoBrBlI,eApBqB,OAqBrBC,iBArBqB,OAsBrBC,eAtBqB,OAuBrBC,iBAvBqB,EACjB1jB,KAAK4G,IAAMmM,EAAMA,EAAInM,IAAM,KAC3B5G,KAAKsrB,iBAAmBvY,EAAMA,EAAIuY,iBAAmB,GACrDtrB,KAAKuqB,cAAgBxX,EAAMA,EAAIwX,cAAgB,IAAIH,GACnDpqB,KAAKurB,SAAWxY,EAAMA,EAAIwY,SAAW,GACrCvrB,KAAKwrB,SAAWzY,EAAMA,EAAIyY,SAAW,IAAI1V,EACzC9V,KAAKyrB,QAAU1Y,EAAMA,EAAI0Y,QAAU,EAEnCzrB,KAAKujB,UAAaxQ,EAAMA,EAAIwQ,UAAY,IAAIzN,EAC5C9V,KAAKwjB,YAAezQ,EAAMA,EAAIyQ,YAAa,IAAIlX,KAC/CtM,KAAKyjB,UAAa1Q,EAAMA,EAAI0Q,UAAY,IAAI3N,EAC5C9V,KAAK0jB,YAAe3Q,EAAMA,EAAI2Q,YAAc,IAAIpX,MCD3Cof,GAAwD,CACjE1nB,OAAQ,GACR2nB,iBAAkB,IAAIN,GACtB9G,cAAc,G,0VCZlB,IAAMpiB,GAAeC,IAAOC,IAAV,MAQZupB,GAAuBxpB,IAAOC,IAAV,MAIpBwpB,GAAqC,CACvCxc,OAAQ,OACR/E,MAAO,OACPwhB,WAAY,IACZ3iB,SAAU,QACV+I,aAAc,SACdnD,OAAQ,+BACRsD,QAAS,cAKA0Z,GAAb,4KACkBtqB,GACV,OAAQA,GACJ,IAAK,MACD,IAAIuqB,EAAc7d,OAAO8d,KAAK,GAAI,IAC9BD,IACAA,EAAYE,SAASC,MAAM,+BAC3BH,EAAYE,SAASC,MAAM,kBAC3BH,EAAYE,SAASC,MAAMnsB,KAAKyC,MAAM8oB,UACtCS,EAAYE,SAASC,MAAM,kBAC3BH,EAAYE,SAASE,QACrBJ,EAAYK,YAXhC,+BAwBc,IAAD,OACL,OACI,kBAAC,GAAD,KACI,kBAACT,GAAD,KACI,kBAACU,GAAA,EAAD,CAAU3kB,UAAU,eAChB,kBAAC2kB,GAAA,EAASC,OAAV,CAAiB7hB,QAAQ,UAAUxC,GAAG,iBAAiBZ,MAAOukB,IAA9D,YAGA,kBAACS,GAAA,EAASE,KAAV,KACI,kBAACF,GAAA,EAASG,KAAV,CAAevc,QAAS,kBAAM,EAAKwc,cAAc,SAAjD,OACA,kBAACJ,GAAA,EAASG,KAAV,CAAevc,QAAS,kBAAM,EAAKwc,cAAc,SAAjD,OACA,kBAACJ,GAAA,EAASG,KAAV,CAAevc,QAAS,kBAAM,EAAKwc,cAAc,UAAjD,WAIZ,yBAAKxkB,GAAG,WAAWZ,MAAO,CAAEqlB,WAAY,SAAWnH,wBAAyB,CAAEC,OAAQzlB,KAAKyC,MAAM8oB,iBAvCjH,GAAoCnoB,IAAMC,W,sUCZ1C,IAAMlB,GAAeC,IAAOC,IAAV,MAQZuqB,GAAsBxqB,IAAOC,IAAV,MAInBwqB,G,kDAKF,WAAYpqB,GAA+B,IAAD,8BACtC,cAAMA,IALV5C,YAI0C,IAH1CitB,6BAG0C,IAF1ClpB,gBAE0C,IAD1C+jB,mBAC0C,EAGtC,EAAK9jB,MAAQ6nB,GACb,EAAK9nB,WAAa,IAAIxC,aACtB,EAAKvB,OAAS,IAAImT,EAClB,EAAK8Z,wBAA0B,IAAI1B,GACnC,EAAKzD,cAAgB,IAAI9B,GAEzB,EAAKzP,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,aAAe,EAAKA,aAAajW,KAAlB,gBACpB,EAAKynB,oBAAsB,EAAKA,oBAAoBznB,KAAzB,gBAXW,E,mLAgBX,cADFJ,KAAKyC,MAAM6L,MAAM9D,OAAjB,mB,gCAEQxK,KAAK8sB,wBAAwBvX,QAAQvV,KAAKyC,MAAM6L,MAAM9D,OAAjB,oB,OAA9DmhB,E,OACJ3rB,KAAKiF,SAAS,CACV0mB,iBAAkBA,EAClBpH,cAAc,I,yIASbjO,GAA0B,IAAD,OAE9BqV,EAAmB3rB,KAAK6nB,oBAAoBvR,GAC5CtW,KAAK6D,MAAM0gB,aACXvkB,KAAK8sB,wBAAwB/E,OAAO4D,GAC/BlW,MAAK,SAACtF,OAGNyF,OAAM,SAACpO,GAEJ7E,QAAQC,IAAI4E,MAIpBxH,KAAK8sB,wBAAwB9E,UAAU2D,GAClClW,MAAK,SAACtF,GACC,EAAKtM,MAAM0gB,aACX,EAAKtf,SAAS,CACV0mB,iBAAkBA,IAItBxd,OAAOC,SAASka,QAAO,MAI9B1S,OAAM,SAACpO,GAEJ7E,QAAQC,IAAI4E,Q,0CASR8O,GAChB,IAAIoS,EAAa1oB,KAAK6D,MAAM8nB,iBACxBhD,EAAU,IAAI0C,GAAiB/U,EAAKvS,YAMxC,OALA4kB,EAAQ/hB,IAAM8hB,EAAW9hB,IACzB+hB,EAAQpF,UAAYmF,EAAWnF,UAC/BoF,EAAQnF,YAAckF,EAAWlF,YACjCmF,EAAQlF,UAAYiF,EAAWjF,UAC/BkF,EAAQjF,YAAcgF,EAAWhF,YAC1BiF,I,kCAOCgD,GACR,IAAInV,EAAiC,GACjCrQ,EAA+C,GA4DnD,OA1DAA,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,kCAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,mBACLgD,MAAO,oBACP/C,MAAO2mB,EAAiBL,iBACxBnlB,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,QAIXtQ,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,+BAElBiQ,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,gBACLgD,MAAO,iBACP/C,MAAO2mB,EAAiBpB,cACxBpkB,WAAYA,EACZmC,UAAWtI,KAAKH,OAAOoT,cAAcQ,eACrClL,aAAc,OACdxE,WAAY,CAAC,QACb6kB,WAAW,EACXnS,MAAO,QAIXtQ,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,yBAElBiQ,EAAUlQ,KAAK,IAAIrE,mBAAiB,CAChC8C,IAAK,WACLgD,MAAO,WACP/C,MAAO2mB,EAAiBJ,SACxBplB,WAAYA,EACZsQ,MAAO,OAIXD,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,WACLgD,MAAO,WACP/C,MAAO2mB,EAAiBH,SACxBljB,UAAWtI,KAAKH,OAAOoT,cAAcG,MACrC7K,aAAc,QACdxE,WAAY,CAAC,QAAS,YAAa,YACnC6kB,WAAW,EACXnS,MAAO,OAGJD,EAAUE,MAAK,SAACjE,EAAEkE,GAAH,OAAQlE,EAAEgE,MAAQE,EAAEF,W,+BAI1C,IAAID,EAAYxW,KAAKoW,YAAYpW,KAAK6D,MAAM8nB,kBAC5C,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO7I,OAAK,EAACC,KAAI,qDACb,kBAAC,GAAD,KAEQ/iB,KAAK6D,MAAM0gB,aAEH,kBAACqI,GAAD,KACI,kBAACG,GAAA,EAAD,CAAQplB,UAAU,cAAc+C,QAAQ,YAAYnH,MAAM,WACtD,kBAAC,IAAD,CAAM0M,GAAE,UAAKjQ,KAAK6D,MAAM8nB,iBAAiB/kB,IAAjC,YAAgDU,MAAO,CAAC/D,MAAO,UAAvE,aAKX,GAET,kBAACI,EAAA,YAAD,CAAaiB,WAAY4R,EAAW7N,iBAAkB3I,KAAKqW,iBAGnE,kBAAC,IAAD,CAAO0M,KAAI,6DACP,kBAAC,GAAD,CAAgBwI,SAAUvrB,KAAK6D,MAAM8nB,iBAAiBJ,kB,GA9KtCnoB,IAAMC,WAuL/BuT,eAAWiW,I,8GC1L1B,IAAM1qB,GAAeC,IAAOC,IAAV,MAGZ2qB,GAAoC,CACtCpR,UAAW,OACXqR,SAAU,UAERC,G,kDAIF,WAAYzqB,GAAwC,IAAD,8BAC/C,cAAMA,IAJVqqB,6BAGmD,IAFnDjtB,YAEmD,IADnD8nB,mBACmD,EAG/C,EAAK9jB,MAAQ,CACTspB,oBAAqB,GACrBC,qBAAsB,GACtBnL,WAAW,EACX+G,mBAAmB,GAEvB,EAAK8D,wBAA0B,IAAI1B,GACnC,EAAKzD,cAAgB,IAAI9B,GACzB,EAAKhmB,OAAS,IAAImT,EAElB,EAAKqa,4BAA8B,EAAKA,4BAA4BjtB,KAAjC,gBACnC,EAAKktB,8BAAgC,EAAKA,8BAA8BltB,KAAnC,gBACrC,EAAKmtB,2BAA6B,EAAKA,2BAA2BntB,KAAhC,gBAClC,EAAKgpB,oBAAsB,EAAKA,oBAAoBhpB,KAAzB,gBAhBoB,E,iEAoB3CJ,KAAK6D,MAAMmlB,mBAGXhpB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,0KAMGhpB,KAAK8sB,wBAAwB5J,a,OAAvDxP,E,OACJ1T,KAAKyC,MAAM+qB,uBAAuB9Z,GAClC1T,KAAKiF,SAAS,CAAEkoB,oBAAqBzZ,I,iMAOP2O,G,8EAC9BriB,KAAKiF,SAAS,CACVgd,WAAW,IAGkB,KAD7BvO,EAAoB1T,KAAK6D,MAAMspB,qBACb1mB,O,gCACQzG,KAAK8sB,wBAAwB5J,a,OAAvDxP,E,OACA1T,KAAKyC,MAAM+qB,uBAAuB9Z,G,OAEhC4O,EAAWD,EAAW7C,SAAW6C,EAAW9C,UAC5CgD,EAASD,EAAWD,EAAW7C,SACrCxf,KAAKiF,SAAS,CACVkoB,oBAAqBzZ,EACrB0Z,qBAAsB1Z,EAAkB8O,MAAMF,EAAUC,GACxDN,WAAW,I,qMAQiBQ,G,qEAC5BtU,OAAOuU,QAAQ,iD,gCACT1iB,KAAK8sB,wBAAwBnK,cAAcF,G,OACjDtU,OAAOC,SAASka,S,0JAQpBtoB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,4CAQvB,GAAIhpB,KAAK6D,MAAMmlB,kBACX,OACI,kBAAC,IAAD,CAAU1iB,MAAM,EAAM2J,GAAG,8C,+BAMjC,IAAMkN,EAAU,CACZ,CACI0B,OAAQ,oBACR3W,GAAI,mBACJ0a,SAAU,mBACV7D,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAMtH,GAAE,4BAAuBsH,EAAIsL,SAASjc,MAAQ2Q,EAAIsL,SAASyI,oBAEvG,CACIzM,OAAQ,OACR3W,GAAI,gBACJ0a,SAAU,SAACrL,GAAD,OAA2BA,EAAIgT,cAAJ,UAAuBhT,EAAIgT,cAAcxkB,MAAS,KAE3F,CACI8Y,OAAQ,WACR3W,GAAI,WACJ0a,SAAU,SAACrL,GAAD,OAA4B,yBAAKjQ,MAAO0lB,GAAcxH,wBAAyB,CAAEC,OAAQlO,EAAIgU,cAE3G,CACI1M,OAAQ,WACR3W,GAAI,WACJ0a,SAAU,SAACrL,GAAD,OAA2BA,EAAIiU,SAAJ,UAAkBjU,EAAIiU,SAASzb,UAA/B,YAA4CwH,EAAIiU,SAASxb,UAAa,MAGnH,OACI,6BAEQhQ,KAAKopB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtG,OAAK,EAACC,KAAK,iCACd,kBAAC,GAAD,CAAcpb,UAAU,yBACpB,kBAAC,GAAD,CAAOwV,QAASA,EACZtc,KAAMb,KAAK6D,MAAMspB,oBACjB7P,UAAWtd,KAAK6D,MAAMspB,oBAAoB1mB,OAC1C2W,UAAW,aACXpB,oBAAqBhc,KAAKstB,8BAC1BrR,iBAAkBjc,KAAKutB,2BACvBrR,UAAU,yBAItB,kBAAC,IAAD,CAAO6G,KAAI,qDACP,kBAAC,GAAD,CAA2BqF,UAAWpoB,KAAKyC,MAAMmN,KAAKgB,qB,GAvItCvN,aAsJlCmN,GAAqB,CACvBgd,uBCpLG,SAAgClE,GACrC,MAAO,CACL7nB,KCFoC,2BDGpCuhB,QAASsG,KDoLE5Y,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZwd,qBAAsBzc,EAAM+C,qBAQKlD,GAA1BE,CAA8Cwc,IGnLhDO,GAAb,WAGI,aAAe,yBAFfvY,aAEc,OADdC,iBACc,EACVnV,KAAKkV,QAAU,IAAIlC,EACnBhT,KAAKmV,YAAcnU,IAEnBhB,KAAKkjB,WAAaljB,KAAKkjB,WAAW9iB,KAAKJ,MACvCA,KAAKuV,QAAUvV,KAAKuV,QAAQnV,KAAKJ,MARzC,kMAgBwDJ,IAAUU,IAAIN,KAAKkV,QAAQjC,cAAcU,UAhBjG,cAgBkB5I,EAhBlB,yBAiBmBnL,IAAUoL,QAAQD,IAjBrC,iOA4ByB7C,GA5BzB,gGA8BsDtI,IAAUU,IAAV,UAAiBN,KAAKkV,QAAQjC,cAAcU,SAA5C,YAAwDzL,IA9B9G,cA8BkB6C,EA9BlB,yBA+BmBnL,IAAUoL,QAAQD,IA/BrC,oOAsC2BgI,GAtC3B,gGAwC8BnT,IAAUa,KAAV,UAAkBT,KAAKkV,QAAQjC,cAAcU,UAAYZ,GAxCvF,cAwCkBhI,EAxClB,yBAyCmBnL,IAAUoL,QAAQD,IAzCrC,iOAgDwBgI,GAhDxB,gGAkD8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcU,UAAYZ,GAlDtF,cAkDkBhI,EAlDlB,yBAmDmBnL,IAAUoL,QAAQD,IAnDrC,wOA0D+BgI,GA1D/B,gGA4D8BnT,IAAUc,IAAV,UAAiBV,KAAKkV,QAAQjC,cAAcU,SAA5C,aAAiEZ,GA5D/F,cA4DkBhI,EA5DlB,yBA6DmBnL,IAAUoL,QAAQD,IA7DrC,wOAoE+B8K,GApE/B,uFAsEY7V,KAAKmV,YAAYtU,KAAOgV,EAtEpC,SAuE8BjW,IAAUW,OAAV,UAAoBP,KAAKkV,QAAQjC,cAAcU,UAAY3T,KAAKmV,aAvE9F,cAuEkBpK,EAvElB,yBAwEmBnL,IAAUoL,QAAQD,IAxErC,kKCMa2iB,GAAsC,CAC/C1pB,OAAQ,GACR+f,QAAS,IAAIZ,GACboB,cAAc,G,+MCClB,IAAMpiB,GAAeC,IAAOC,IAAV,MAQZ6kB,GAAwC,CAC1C5c,MAAO,MACP2H,QAAS,eACTM,UAAW,QACX3G,aAAc,QAEZub,GAAyC,CAC3C7c,MAAO,MACP2H,QAAS,eACTM,UAAW,OACX6I,YAAa,QAEXgM,GAA0C,CAC5C7U,UAAW,OACX6I,YAAa,QAEXiM,GAA6C,CAC/C3jB,OAAQ,OACR4jB,WAAY,OACZC,aAAc,uBACdjd,MAAO,OAELkd,GAAuC,CACzCjV,UAAW,SACX6I,YAAa,QAEXuS,G,kDAKF,WAAYlrB,GAAsB,IAAD,8BAC7B,cAAMA,IALV5C,YAIiC,IAHjC+tB,oBAGiC,IAFjChqB,gBAEiC,IADjC+jB,mBACiC,EAG7B,EAAK9jB,MAAQ6pB,GACb,EAAK9pB,WAAa,IAAIxC,aACtB,EAAKvB,OAAS,IAAImT,EAClB,EAAK4a,eAAiB,IAAIH,GAC1B,EAAK9F,cAAgB,IAAI9B,GAEzB,EAAKzP,YAAc,EAAKA,YAAYhW,KAAjB,gBACnB,EAAKiW,aAAe,EAAKA,aAAajW,KAAlB,gBACpB,EAAK+kB,oBAAsB,EAAKA,oBAAoB/kB,KAAzB,gBAC3B,EAAKwnB,iBAAmB,EAAKA,iBAAiBxnB,KAAtB,gBACxB,EAAKynB,oBAAsB,EAAKA,oBAAoBznB,KAAzB,gBAC3B,EAAKytB,kBAAoB,EAAKA,kBAAkBztB,KAAvB,gBAdI,E,qLAmBX,eADd0tB,EAAY9tB,KAAKyC,MAAM6L,MAAM9D,OAAjB,W,gCAEQxK,KAAK4tB,eAAerY,QAAQuY,G,OAA5C/J,E,OACJ/jB,KAAKiF,SAAS,CACV8e,QAASA,EACTQ,cAAc,I,kLASPjO,G,yFAEXyN,EAAU/jB,KAAK6nB,oBAAoBvR,IAEnCtW,KAAK6D,MAAM0gB,a,gCACCvkB,KAAK4tB,eAAe7F,OAAOhE,G,OAAvChZ,E,8CAGY/K,KAAK4tB,eAAe5F,UAAUjE,G,OAA1ChZ,E,eAImB,MADnBgjB,EAAiB/tB,KAAK6tB,kBAAkB9J,MAEpC+J,EAAY9tB,KAAK6D,MAAM0gB,aAAeR,EAAQnd,IAAMmE,EAEpDod,EAAW,IAAI3D,GAAQ,CACvB1e,OAAQgoB,EACRnK,QAASoK,EACTtJ,YAAazkB,KAAKyC,MAAM2lB,UACxB1D,aAAa,IAAIpY,MAAOgZ,gBAE5BvB,EAAQT,SAAShd,KAAK6hB,GAEtBnoB,KAAK4tB,eAAevF,cAActE,EAAQT,UACrC7N,MAAK,SAACtF,GACA,EAAKtM,MAAM0gB,aACV,EAAKtf,SAAS,CACV8e,QAASA,IAIb5V,OAAOC,SAASka,QAAO,MAI9B1S,OAAM,SAACpO,GAEJ7E,QAAQC,IAAI4E,O,gJAUVuc,GACd,IAAI5T,EAAS,GA4Cb,OA1CIjL,KAAKE,UAAUpF,KAAK6D,MAAMkgB,WAAa7e,KAAKE,UAAU2e,KAClD7e,KAAKE,UAAUpF,KAAK6D,MAAMkgB,QAAQhe,QAAUb,KAAKE,UAAU2e,EAAQhe,OACnEoK,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,UAEJ,yBAAK9f,MAAOkgB,IAEJzD,EAAQhe,MAGhB,kBAAC,KAAD,CAAW+C,cAAeue,QAMtCniB,KAAKE,UAAUpF,KAAK6D,MAAMkgB,QAAQX,WAAale,KAAKE,UAAU2e,EAAQX,UACtEjT,EAAO7J,KACHiiB,KAAeC,eACX,6BACI,yBAAKlhB,MAAO4f,IACR,yBAAK5f,MAAO8f,IAAZ,YACA,yCAEJ,yBAAK9f,MAAO6f,IACR,8BACA,6BACMpD,EAAQX,SAAWW,EAAQX,QAAQxc,IAApC,UACMmd,EAAQX,QAAQrT,UADtB,YACmCgU,EAAQX,QAAQpT,UAC9C,KAId,kBAAC,KAAD,CAAWlH,cAAeue,SAMvClX,EAAO2M,KAAK,M,0CAOHxG,GAChB,IAAIoS,EAAa1oB,KAAK6D,MAAMkgB,QACxB4E,EAAU,IAAIxF,GAAQ7M,EAAKvS,YAO/B,OANA4kB,EAAQ/hB,IAAM8hB,EAAW9hB,IACzB+hB,EAAQrF,SAAWoF,EAAWpF,SAC9BqF,EAAQpF,UAAYmF,EAAWnF,UAC/BoF,EAAQnF,YAAckF,EAAWlF,YACjCmF,EAAQlF,UAAYiF,EAAWjF,UAC/BkF,EAAQjF,YAAcgF,EAAWhF,YAC1BiF,I,0CAOSrS,GAAsB,IAAD,OACjCyN,EAAU/jB,KAAK6D,MAAMkgB,QACzBA,EAAQT,SAAWhN,EAAKgN,SACxBS,EAAQT,SAASze,SAAQ,SAACC,GACtBA,EAAIgB,OAASie,EAAQnd,OAErB5G,KAAK6D,MAAM0gB,cACXvkB,KAAK4tB,eAAevF,cAActE,EAAQT,UACrC7N,MAAK,SAACtF,GACH,EAAKlL,SAAS,CACV8e,QAASA,OAGhBnO,OAAM,SAACpO,GACJ7E,QAAQC,IAAI4E,Q,kCAShBwmB,GACR,IAAIxX,EAAiC,GACjCrQ,EAA+C,GA+CnD,OA7CAA,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,qBAElBiQ,EAAUlQ,KAAK,IAAI3E,kBAAgB,CAC/BoD,IAAK,OACLgD,MAAO,OACP/C,MAAOgpB,EAAOjoB,KACdI,WAAYA,EACZ1E,KAAMzB,KAAK4D,WAAWoJ,aAAae,KACnC0I,MAAO,QAIXtQ,EAAa,IACFnG,KAAK4D,WAAWwC,eAAeC,SAAW,CACjDrB,OAAO,EACPuB,aAAc,wBAElBiQ,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,UACLgD,MAAO,UACP/C,MAAOgpB,EAAO5K,QACd9a,UAAWtI,KAAKH,OAAOoT,cAAcG,MACrCjN,WAAYA,EACZoC,aAAc,QACdxE,WAAY,CAAC,QAAS,YAAa,YACnC6kB,WAAW,EACXnS,MAAO,OAIXD,EAAUlQ,KAAK,IAAIvE,oBAAkB,CACjCgD,IAAK,UACLgD,MAAO,SACP/C,MAAOgpB,EAAO3K,QACd/a,UAAWtI,KAAKH,OAAOoT,cAAcG,MACrC7K,aAAc,QACdxE,WAAY,CAAC,QAAS,YAAa,YACnC6kB,WAAW,EACXvgB,UAAU,EACVoO,MAAO,OAGJD,EAAUE,MAAK,SAACjE,EAAEkE,GAAH,OAAQlE,EAAEgE,MAAQE,EAAEF,W,yCAO1C,IAAItG,EAWJ,OAVInQ,KAAK6D,MAAM0gB,eACXpU,EACI,6BACI,kBAAC,KAAD,MACA,kBAAC,GAAD,CAAYkV,cAAerlB,KAAKyC,MAAM2lB,UAClC9E,SAAUtjB,KAAK6D,MAAMkgB,QAAQT,SAC7BiC,gBAAiBvlB,KAAKmlB,wBAI/BhV,I,+BAIP,IAAIqG,EAAYxW,KAAKoW,YAAYpW,KAAK6D,MAAMkgB,SAC5C,OACI,kBAAC,GAAD,KACI,kBAACpgB,EAAA,YAAD,CAAaiB,WAAY4R,EAAW7N,iBAAkB3I,KAAKqW,eAEvDrW,KAAK4nB,wB,GA3PMxkB,IAAMC,WAkQtBuT,eAAW+W,I,8GC5R1B,IAAMxrB,GAAeC,IAAOC,IAAV,MAIZ4rB,G,kDAIF,WAAYxrB,GAA+B,IAAD,8BACtC,cAAMA,IAJVmrB,oBAG0C,IAF1C/tB,YAE0C,IAD1C8nB,mBAC0C,EAGtC,EAAK9jB,MAAQ,CACTqqB,WAAY,GACZC,YAAa,GACblM,WAAW,EACX+G,mBAAmB,GAEvB,EAAK4E,eAAiB,IAAIH,GAC1B,EAAK9F,cAAgB,IAAI9B,GACzB,EAAKhmB,OAAS,IAAImT,EAElB,EAAKob,mBAAqB,EAAKA,mBAAmBhuB,KAAxB,gBAC1B,EAAKiuB,qBAAuB,EAAKA,qBAAqBjuB,KAA1B,gBAC5B,EAAKkuB,kBAAoB,EAAKA,kBAAkBluB,KAAvB,gBACzB,EAAKgpB,oBAAsB,EAAKA,oBAAoBhpB,KAAzB,gBAhBW,E,iEAoBlCJ,KAAK6D,MAAMmlB,mBAGXhpB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,0KAMNhpB,KAAK4tB,eAAe1K,a,OAArCvP,E,OACJ3T,KAAKyC,MAAM8rB,cAAc5a,GACzB3T,KAAKiF,SAAS,CAAEipB,WAAYva,I,wLAOP0O,G,8EACrBriB,KAAKiF,SAAS,CACVgd,WAAW,IAGS,KADpBtO,EAAW3T,KAAK6D,MAAMqqB,YACbznB,O,gCACQzG,KAAK4tB,eAAe1K,a,OAArCvP,E,OACA3T,KAAKyC,MAAM8rB,cAAc5a,G,OAEvB2O,EAAWD,EAAW7C,SAAW6C,EAAW9C,UAC5CgD,EAASD,EAAWD,EAAW7C,SACrCxf,KAAKiF,SAAS,CACVipB,WAAYva,EACZwa,YAAaxa,EAAS6O,MAAMF,EAAUC,GACtCN,WAAW,I,4LAQQQ,G,qEACnBtU,OAAOuU,QAAQ,iD,gCACT1iB,KAAK4tB,eAAejL,cAAcF,G,OACxCtU,OAAOC,SAASka,S,iJAQpBtoB,KAAKiF,SAAS,CACV+jB,mBAAmB,M,4CAQvB,GAAIhpB,KAAK6D,MAAMmlB,kBACX,OACI,kBAAC,IAAD,CAAU1iB,MAAM,EAAM2J,GAAG,qC,+BAMjC,IAAMkN,EAAU,CACZ,CACI0B,OAAQ,OACR3W,GAAI,OACJ0a,SAAU,OACV7D,KAAM,gBAAGxH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAMtH,GAAE,mBAAcsH,EAAIsL,SAASjc,MAAQ2Q,EAAIsL,SAAS9c,QAE9F,CACI8Y,OAAQ,UACR3W,GAAI,UACJ0a,SAAU,SAACrL,GAAD,OAAkBA,EAAI6L,QAAJ,UAAiB7L,EAAI6L,QAAQrT,UAA7B,YAA0CwH,EAAI6L,QAAQpT,UAAa,MAGvG,OACI,6BAEQhQ,KAAKopB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtG,OAAK,EAACC,KAAK,wBACd,kBAAC,GAAD,CAAcpb,UAAU,gBACpB,kBAAC,GAAD,CAAOwV,QAASA,EACZtc,KAAMb,KAAK6D,MAAMqqB,WACjB5Q,UAAWtd,KAAK6D,MAAMqqB,WAAWznB,OACjC2W,UAAW,aACXpB,oBAAqBhc,KAAKquB,qBAC1BpS,iBAAkBjc,KAAKsuB,kBACvBpS,UAAU,eAItB,kBAAC,IAAD,CAAO6G,KAAI,mCACP,kBAAC,GAAD,CAAkBqF,UAAWpoB,KAAKyC,MAAMmN,KAAKgB,qB,GA7HtCvN,aA4IzBmN,GAAqB,CACvB+d,cCvKG,SAAuBjF,GAC5B,MAAO,CACL7nB,KCF0B,iBDG1BuhB,QAASsG,KDuKE5Y,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZue,YAAaxd,EAAMgD,YAQcnD,GAA1BE,CAA8Cud,IG3KtD,SAASO,GAAcC,GAC7B,MAAO,CACNhtB,KCJ4B,iBDK5BuhB,QAASyL,GAIJ,SAASC,GAAYC,GAC3B,MAAO,CACNltB,KCV0B,eDW1BuhB,QAAS2L,GECJ,IAAMC,GAAb,uKACc,IAAD,OACL,OACI,gBAAC,IAAD,CAAOnO,OACH,SAAChe,GACG,OAAK,EAAKA,MAAMmN,KAAKhJ,IAIZ,EAAKnE,MAAMosB,cAET,gBAAC,IAAD,CAAU5e,GAAG,aAIhB,EAAKxN,MAAMqsB,UACJ1rB,gBAAoB,EAAKX,MAAMqsB,WAEjC,EAAKrsB,MAAMge,OACT,EAAKhe,MAAMge,OAAOhe,QADxB,EAXE,gBAAC,IAAD,CAAUwN,GAAG,kBAP5C,GAAiC8e,KCXpBC,GAAb,uKAEQ,OACI,yBAAK1nB,MAAO,CACR2K,QAAS,OACTmI,eAAgB,SAChBD,WAAY,SACZ8U,UAAW,qBACX1rB,MAAO,QAGP,sDAXhB,GAA6BH,IAAMC,WCwC7B6rB,G,kDAGL,WAAYzsB,GAAkB,IAAD,8BAC5B,cAAMA,IAHP0T,iBAE6B,IAD7BtW,YAC6B,EAG5B,EAAKgE,MAAQ,CACZsrB,eAAe,EACfC,cAAc,GAEf,EAAKjZ,YAAc,IAAIlB,EAAejU,KACtC,EAAKnB,OAAS,IAAImT,EAElB,EAAKqc,wBAA0B,EAAKA,wBAAwBjvB,KAA7B,gBAC/B,EAAKkvB,2BAA6B,EAAKA,2BAA2BlvB,KAAhC,gBAClC,EAAKmvB,2BAA6B,EAAKA,2BAA2BnvB,KAAhC,gBAZN,E,iEAgBxBJ,KAAK6D,MAAMurB,aACdpvB,KAAKiF,SAAS,CACbmqB,cAAc,IAGPpvB,KAAK6D,MAAMsrB,eACnBnvB,KAAKiF,SAAS,CACbkqB,eAAe,M,uFAUY7Y,G,8EACzBd,EAA2B,CAC9Bga,SAAUlZ,EAAKvJ,MACfS,SAAU8I,EAAK9I,SACfgc,WAAYlT,EAAKkT,YAElBxpB,KAAKmW,YAAYf,UAAUI,GACzBC,MAAK,SAACtF,GACN,GAAIA,GAAUA,EAAOpD,QAAUuJ,EAAKvJ,MAAO,CAC1C,IAAI6C,EAAO,IAAIkG,EAAK3F,GACpB,EAAK1N,MAAM2lB,UAAUxY,GACrB,EAAK3K,SAAS,CACbmqB,cAAc,SAIf,EAAK3sB,MAAMisB,YAAY,CACtBe,MAAM,EACNzqB,MAAO,EAAKnF,OAAO+T,cAAcE,aACjCpJ,QAAS,EAAK7K,OAAOmU,cAAcG,YAGnCyB,OAAM,SAACpO,GACT,EAAK/E,MAAMisB,YAAY,CACtBe,MAAM,EACNzqB,MAAO,EAAKnF,OAAO+T,cAAcC,WACjCnJ,QAAS,EAAK7K,OAAOmU,cAAcG,Y,wJAUZmC,GAAoB,IAAD,OACzCoZ,EAAU,IAAI5Z,EAAK,CACtB/F,UAAWuG,EAAKvG,UAChBC,SAAUsG,EAAKtG,SACfjD,MAAOuJ,EAAKvJ,MACZS,SAAU8I,EAAK9I,SACfmE,MAAO2E,EAAK3E,MACZD,QAAS4E,EAAK5E,UAEf1R,KAAKmW,YAAYd,aAAaqa,GAC5Bja,MAAK,SAACtF,GACFA,GAAUA,EAAOpD,QAAUuJ,EAAKvJ,MACnC,EAAK9H,SAAS,CACbkqB,eAAe,IAIhB,EAAK1sB,MAAMisB,YAAY,CACtBe,MAAM,EACNzqB,MAAO,EAAKnF,OAAO+T,cAAcG,YACjCrJ,QAAS,EAAK7K,OAAOmU,cAAcG,YAIrCyB,OAAM,SAACpO,GACP,EAAK/E,MAAMisB,YAAY,CACtBe,MAAM,EACNzqB,MAAO,EAAKnF,OAAO+T,cAAcG,YACjCrJ,QAAS,EAAK7K,OAAOmU,cAAcG,c,mDAStC,OAAInU,KAAK6D,MAAMsrB,cAEb,kBAAC,IAAD,CAAU7oB,MAAM,EAAM2J,GAAG,WAGlBjQ,KAAK6D,MAAMurB,aAElB,kBAAC,IAAD,CAAU9oB,MAAM,EAAM2J,GAAG,WAFtB,I,+BAQL,OACC,kBAAC,IAAD,KACC,kBAAC,EAAD,MAECjQ,KAAKuvB,6BAEN,yBAAK5nB,UAAU,aACd,kBAAC,IAAD,KACC,kBAAC,GAAD,CAAaob,KAAK,uBACjB+L,UAAWb,GACXre,KAAM5P,KAAKyC,MAAMmN,KAAKgB,cAEvB,kBAAC,GAAD,CAAamS,KAAK,yBACjB+L,UAAWjG,GACXjZ,KAAM5P,KAAKyC,MAAMmN,KAAKgB,cAEvB,kBAAC,GAAD,CAAamS,KAAK,6BACjB+L,UAAWjE,GACXjb,KAAM5P,KAAKyC,MAAMmN,KAAKgB,cAEvB,kBAAC,GAAD,CAAamS,KAAK,gCACjB+L,UAAW5B,GACXtd,KAAM5P,KAAKyC,MAAMmN,KAAKgB,cAEvB,kBAAC,GAAD,CAAamS,KAAK,SACjB+L,UAAWhN,GACXlS,KAAM5P,KAAKyC,MAAMmN,KAAKgB,mBAGc7E,IAApC/L,KAAKyC,MAAMmN,KAAKgB,YAAYhK,IAE1B,kBAAC,IAAD,CAAOkc,OAAK,EAACC,KAAK,UACjB,kBAAC,GAAD,CAAOmH,QAASlqB,KAAKqvB,wBACpBpF,yBAAyB,UACzBD,2BAA2B,qBAK7B,GAEH,kBAAC,IAAD,CAAOlH,OAAK,EAACC,KAAK,WACjB,kBAAC,EAAD,CAAQlQ,WAAY7S,KAAKsvB,2BACxB1c,kBAAkB,YAGpB,kBAAC,IAAD,CAAOmQ,KAAK,UACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,SACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAO+L,UAAWE,Y,GApLN5rB,IAAMC,WA+LlBssB,GAAqB,CAC1BjB,eACAtG,UzDjOM,SAAmBA,GACxB,MAAO,CACL3mB,KCTsB,aDUtBuhB,QAASoF,KyDiOE1X,gBARS,SAAC7M,GAAD,MAAsB,CAC7C+L,KAAM/L,EAAM+L,QASZ+f,GAFcjf,CAGbwe,IChPWU,GAAb,uKAEQ,OACI,6BAASjoB,UAAU,iBAAiBO,GAAG,UACnC,yBAAKP,UAAU,aACX,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,uBAAGiH,KAAK,KACJ,yBAAKJ,IAAG,UAAKC,gBAAL,kCAA6DC,IAAI,UAAUC,MAAM,QAIrG,yBAAKhH,UAAU,6CACX,wBAAIA,UAAU,QAAd,WAGA,uBAAGA,UAAU,YAAb,uBAA4C,6BAA5C,6BAEJ,yBAAKA,UAAU,6CACX,wBAAIA,UAAU,QAAd,YAGA,uBAAGA,UAAU,YAAb,+FACsH,6BADtH,gCAKR,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,+BAGR,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,sCAAb,qDACoD8G,sPAAYohB,iCAGpE,yBAAKloB,UAAU,YACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,+BAA+B9I,OAAO,UACpE,0BAAM6B,UAAU,+DAGxB,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,2DAA2D9I,OAAO,UAChG,0BAAM6B,UAAU,gEAGxB,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,qCAAqC9I,OAAO,UAC1E,0BAAM6B,UAAU,+DAGxB,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,iCAAiC9I,OAAO,UACtE,0BAAM6B,UAAU,iEAGxB,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,wCAAwC9I,OAAO,UAC7E,0BAAM6B,UAAU,kEAGxB,yBAAKA,UAAU,YACX,uBAAGkH,IAAI,sBAAsBD,KAAK,mCAAmC9I,OAAO,UACxE,0BAAM6B,UAAU,yEArE5D,GAA4BvE,IAAMC,W,qECM5B+a,GAAe,CACnBxN,YAAa,GACboR,SAAU,ICHZ,IAAM5D,GAAe,CACnB5K,WAAY,ICDd,IAAM4K,GAAe,CACpBte,gBAAiB,EACjBgwB,YAAa,ICFd,IAAM1R,GAAe,CACnB3K,eAAgB,ICDlB,IAAM2K,GAAe,CACnB1K,kBAAmB,I,yBCDf0K,GAAe,CACnBzK,SAAU,ICUZ,IAAMoc,GAAgB,CACrBhrB,IAAK,OACLirB,cAGKC,GAAcC,2BAAgB,CACnCtgB,KNXM,WAGC,IAFN/L,EAEK,uDAFGua,GACRrN,EACK,uCACL,OAAQA,EAAOtP,MACb,I1DdsB,a0DepB,OAAO,6BACFoC,GADL,IACY+M,YAAaG,EAAOiS,UAElC,I1DjBuB,c0DkBrB,OAAO,6BACFnf,GADL,IACY+M,YAAa,KAE3B,I1DpBsB,a0DqBpB,OAAO,6BACF/M,GADL,IACYme,SAAUjR,EAAOiS,UAE/B,QACE,OAAOnf,IMNZ2P,WLdM,WAGC,IAFN3P,EAEK,uDAFGua,GACRrN,EACK,uCACL,OAAQA,EAAOtP,MACb,I/BZ4B,mB+Ba1B,OAAO,6BACFoC,GADL,IACY2P,WAAYzC,EAAOiS,UAEjC,I/Bf6B,oB+BgB3B,OAAO,6BACFnf,GADL,IACY2P,WAAY,KAE1B,QACE,OAAO3P,IKCZxD,QJdM,WAGC,IAFPwD,EAEM,uDAFEua,GACRrN,EACM,uCACN,OAAQA,EAAOtP,MACd,IPhB4B,iBOiB3B,OAAO,6BACHoC,GADJ,IACW/D,gBAAiBiR,EAAOiS,UAEpC,IPnB0B,eOoBzB,OAAO,6BACHnf,GADJ,IACWisB,YAAa/e,EAAOiS,UAEhC,QACC,OAAOnf,IICT4P,eHhBM,WAGC,IAFN5P,EAEK,uDAFGua,GACRrN,EACK,uCACL,OAAQA,EAAOtP,MACb,IxBZiC,wBwBa/B,OAAO,6BACFoC,GADL,IACY4P,eAAgB1C,EAAOiS,UAErC,IxBfkC,yBwBgBhC,OAAO,6BACFnf,GADL,IACY4P,eAAgB,KAE9B,QACE,OAAO5P,IGGZ6P,kBFjBM,WAGC,IAFN7P,EAEK,uDAFGua,GACRrN,EACK,uCACL,OAAQA,EAAOtP,MACb,IjBZoC,2BiBalC,OAAO,6BACFoC,GADL,IACY6P,kBAAmB3C,EAAOiS,UAExC,IjBfqC,4BiBgBnC,OAAO,6BACFnf,GADL,IACY6P,kBAAmB,KAEjC,QACE,OAAO7P,IEIZ8P,SDlBM,WAGC,IAFN9P,EAEK,uDAFGua,GACRrN,EACK,uCACL,OAAQA,EAAOtP,MACb,IZZ0B,iBYaxB,OAAO,6BACFoC,GADL,IACY8P,SAAU5C,EAAOiS,UAE/B,IZf2B,kBYgBzB,OAAO,6BACFnf,GADL,IACY8P,SAAU,KAExB,QACE,OAAO9P,MCSPssB,GAAmBC,aAAeL,GAAeE,IAEjDI,GAAc,CAACC,MACjBxwB,GAAkB,EAChBywB,GAAmB,CACxBC,aAAc,CACbnwB,QAAS,CAAC,CACT2K,QAAS,WAAyDylB,GAA2B,IAAxEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,SAC1B3b,GADuF,EAAnD4b,gBAChBF,KAKxB,OAJAD,EAAIpQ,QAAQwQ,cAAZ,iBAAuC7b,EAASpF,KAAKgB,YAAYoF,OACjElW,KACA6C,QAAQC,IAAI9C,IACZ6wB,EAASnC,GAAc1uB,KAChB2wB,GAER1vB,MAAO,WAAyDA,GAAa,EAA1D2vB,SAA0D,EAAhDC,SAAgD,EAAtCC,gBAEtC,OADAjuB,QAAQC,IAAI7B,GACLA,KAITD,SAAU,CAAC,CACVkK,QAAS,WAAyDD,GAAqB,EAAlE2lB,SAAmE,IAAzDC,EAAwD,EAAxDA,SAAwD,EAA9CC,gBAGxC,OADAD,EAASnC,KADT1uB,KAEOiL,GAERhK,MAAO,WAAyDA,GAAa,EAA1D2vB,SAA2D,IAAjDC,EAAgD,EAAhDA,SAAgD,EAAtCC,gBAItC,OADAD,EAASnC,KADT1uB,KAEOiB,OAML+vB,GAAqBC,mBAAe,WAAf,EAAmBV,GAAnB,QACxBW,KAAgBpxB,IAAUG,IAAKwwB,OAEnB,cACd,IAAI5f,EAAasgB,uBAChBd,GACEe,+BAAoBJ,KAGvB,MAAO,CAAEngB,QAAOwgB,UADAC,aAAazgB,K,0YCrE9B,IAAM0gB,GAAWC,eAAH,MAORnvB,GAAeC,IAAOC,IAAV,MAcZkvB,G,uKAEE,OACI,6BAEQvxB,KAAKyC,MAAM3C,gBAAkB,EAErB,kBAAC,GAAD,CAAc6H,UAAU,iBACpB,kBAAC,KAAD,CACI2pB,IAAKD,GACLG,KAAM,IACNjuB,MAAO,UACPkuB,QAASzxB,KAAKyC,MAAM3C,gBAAkB,KAI/C,Q,GAhBEsD,IAAMsuB,eA2BpBhhB,gBAJS,SAAC7M,GAAD,MAAsB,CAC1C/D,gBAAiB+D,EAAMxD,QAAQP,mBAK/B,GAFW4Q,CAGb6gB,I,kWCnDF,IAAMpvB,GAAeC,IAAOC,IAAV,MAQZsvB,GAAcvvB,IAAOC,IAAV,MAOXuvB,GAAkC,CACpC1f,aAAc,UAWZ2f,G,mLAEmB,IAAD,OACb7xB,KAAKyC,MAAMgtB,MAEVqC,YAAW,WACP,EAAKrvB,MAAMisB,YAAY,MACxB1uB,KAAKyC,MAAMsvB,eAAiB,O,4CAQnC/xB,KAAKyC,MAAMisB,YAAY,M,+BAGjB,IAAD,OACL,OACI,6BAEQ1uB,KAAKyC,MAAMgtB,KAEH,kBAAC,GAAD,KACI,kBAACuC,GAAA,EAAD,CAAO1qB,MAAOsqB,GACV7sB,IAAI,cACJ2F,QAAS1K,KAAKyC,MAAMiI,SACpB,kBAACinB,GAAD,CAAazhB,QAAS,kBAAM,EAAK+hB,wBAC7B,sCAEHjyB,KAAKyC,MAAMuC,QAIrB,Q,GAnCD5B,IAAMC,WAoD1BmN,GAAqB,CACvBke,gBAGWhe,gBAdS,SAAC7M,GACrB,GAAGA,EAAMxD,QAAQyvB,YACb,MAAO,CACHL,KAAM5rB,EAAMxD,QAAQyvB,YAAYL,KAChC/kB,QAAS7G,EAAMxD,QAAQyvB,YAAYplB,QACnC1F,MAAOnB,EAAMxD,QAAQyvB,YAAY9qB,SASLwL,GAAzBE,CAA6CmhB,IC/E5DK,IAASzR,OACR,kBAAC,IAAD,CAAU9P,MAAOygB,KAAuBzgB,OACvC,kBAAC,IAAD,CAAa8gB,QAAS,KAAMN,UAAWC,KAAuBD,WAC7D,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QAGFjF,SAASiG,eAAe,SxEqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7c,MAAK,SAAA8c,GACJA,EAAaC,gBAEd5c,OAAM,SAAA7U,GACL4B,QAAQ5B,MAAMA,EAAM0xB,a,6EyE/IflxB,EAmBZ,aAkBS,IAlBGL,EAkBJ,uDAAJ,GAAI,yBApCR8D,WAoCQ,OAnCRD,SAmCQ,OAlCRgD,WAkCQ,OAjCRwJ,cAiCQ,OAhCRkF,WAgCQ,OA/BRtV,iBA+BQ,OA9BRM,UA8BQ,OA7BRP,aA6BQ,OA5BRiF,gBA4BQ,OA3BRkC,cA2BQ,OA1BRF,UA0BQ,OAzBRF,cAyBQ,OAxBR2gB,eAwBQ,OAvBRtgB,eAuBQ,OAtBRC,kBAsBQ,OArBRxE,gBAqBQ,OApBRyE,qBAoBQ,EACPxI,KAAKgF,MAAQ9D,EAAQ8D,MACrBhF,KAAK+E,IAAM7D,EAAQ6D,KAAO,GAC1B/E,KAAK+H,MAAQ7G,EAAQ6G,OAAS,GAC9B/H,KAAKuR,WAAarQ,EAAQqQ,SAC1BvR,KAAKyW,WAA0B1K,IAAlB7K,EAAQuV,MAAsB,EAAIvV,EAAQuV,MACvDzW,KAAKmB,YAAcD,EAAQC,aAAe,GAC1CnB,KAAKyB,KAAOP,EAAQO,MAAQ,GAC5BzB,KAAKkB,QAAUA,EAAQA,SAAW,GAClClB,KAAKmG,WAAajF,EAAQiF,YAAc,GACxCnG,KAAKqI,WAAanH,EAAQmH,SAC1BrI,KAAKmI,UAAwB4D,IAAjB7K,EAAQiH,KAAqB,EAAIjH,EAAQiH,KACrDnI,KAAKiI,WAAa/G,EAAQ+G,SAC1BjI,KAAK4oB,YAAc1nB,EAAQ0nB,UAC3B5oB,KAAKsI,UAAYpH,EAAQoH,WAAa,GACtCtI,KAAKuI,aAAerH,EAAQqH,cAAgB,GAC5CvI,KAAK+D,WAAa7C,EAAQ6C,YAAc,GACxC/D,KAAKwI,gBAAkBtH,EAAQsH,iBAAmB,K,gCCvDpD,sCAAMkqB,EAAKrsB,EAAQ,KAINrF,EAAgC,CAEzC2xB,QALuB/Q,OAAOnT,WAAsC,IAMpEmkB,QALgCnkB,4CAMhC4R,QAAS,CACLxG,OAAQ,CAGJ,eAAgB,mBAChBgZ,OAAQ,qBAGhBC,iBAAkB,SAACtoB,GAAD,OAAoBkoB,EAAGttB,UAAUoF,EAAQ,CAAEuoB,SAAS,O,wMCjB7D3O,G,OACT,WAAYrR,GAAW,yBAIvBhM,eAJsB,OAKtBC,aALsB,EAClBhH,KAAK+G,UAAYgM,EAAMA,EAAIhM,UAAY,KACvC/G,KAAKgH,QAAU+L,EAAMA,EAAI/L,QAAU,OCa9BgsB,EAA0C,CACnDvtB,aAAc,GACdwtB,kBAAmB,IAAI7O,EACvBtiB,UAAW,IAAIsiB,EACfrd,UAAW,KACXC,QAAS,M,iXCTb,IAAM7E,EAAeC,IAAOC,IAAV,KAGZ6wB,EAAe9wB,IAAOC,IAAV,KAKZ8wB,EAAa/wB,IAAOC,IAAV,KAKH+wB,EAAb,kDACI,WAAY3wB,GAAwB,IAAD,8BAC/B,cAAMA,IAEDoB,MAAQmvB,EAEb,EAAKK,sBAAwB,EAAKA,sBAAsBjzB,KAA3B,gBAC7B,EAAKkzB,oBAAsB,EAAKA,oBAAoBlzB,KAAzB,gBANI,EADvC,gEAWQ,IAAI0B,EAAY,IAAIsiB,EAChBpkB,KAAKyC,MAAMX,YACXA,EAAUiF,UAAY/G,KAAKyC,MAAMX,UAAUiF,gBAAagF,EACxDjK,EAAUkF,QAAUhH,KAAKyC,MAAMX,UAAUkF,cAAW+E,GAExD/L,KAAKiF,SAAS,CACVQ,aAAczF,KAAKyC,MAAMgD,aACzB3D,UAAWA,EACXmxB,kBAAmB/tB,KAAKC,MAAMD,KAAKE,UAAUtD,QAnBzD,2CAwBQ,GAAG9B,KAAKyC,MAAMX,UAAU,CACpB,IAAIA,EAAY,IAAIsiB,EACpBtiB,EAAUiF,UAAY/G,KAAKyC,MAAMX,UAAUiF,gBAAagF,EACxDjK,EAAUkF,QAAUhH,KAAKyC,MAAMX,UAAUkF,cAAW+E,EAChD7G,KAAKE,UAAUpF,KAAK6D,MAAMovB,qBAAuB/tB,KAAKE,UAAUtD,IAChE9B,KAAKiF,SAAS,CACVnD,UAAWA,EACXmxB,kBAAmB/tB,KAAKC,MAAMD,KAAKE,UAAUtD,SA/BjE,4CAyC0BqK,GAAY,IAAD,OAC7BxJ,QAAQC,IAAIuJ,GACZ,IAAIrK,EAAY,IAAIsiB,EAAW,CAC3Brd,UAAWoF,EACXnF,QAAShH,KAAK6D,MAAM/B,UAAUkF,UAElChH,KAAKiF,SAAS,CACVnD,UAAWA,IACZ,WACC,EAAKW,MAAM2F,kBAAkB,EAAKvE,YAlD9C,0CA0DwBsI,GAAY,IAAD,OAC3BxJ,QAAQC,IAAIuJ,GACZ,IAAIrK,EAAY,IAAIsiB,EAAW,CAC3Brd,UAAW/G,KAAK6D,MAAM/B,UAAUiF,UAChCC,QAASmF,IAEbnM,KAAKiF,SAAS,CACVnD,UAAWA,IACZ,WACC,EAAKW,MAAM2F,kBAAkB,EAAKvE,YAnE9C,+BAwEQ,OACI,kBAAC1B,EAAD,KACI,kBAAC+wB,EAAD,KACI,2CACA,kBAAC,IAAD,CACI9mB,WAAW,aACXmnB,QAASvzB,KAAK6D,MAAM/B,UAAUkF,QAC9BpB,SAAU5F,KAAK6D,MAAM/B,UAAUiF,UAC/BlE,SAAU7C,KAAKqzB,yBAGvB,kBAACF,EAAD,KACI,yCACA,kBAAC,IAAD,CACI/mB,WAAW,aACXC,QAASrM,KAAK6D,MAAM/B,UAAUiF,UAC9BnB,SAAU5F,KAAK6D,MAAM/B,UAAUkF,QAC/BnE,SAAU7C,KAAKszB,4BAzFvC,GAA+BlwB,IAAMC,a","file":"static/js/main.f1da519b.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from \"axios\";\r\nimport { apiConfig } from \"../configuration/api.config\";\r\n\r\n/**\r\n * ES6 Axios Class.\r\n *\r\n * @class Api\r\n * @extends {Axios}\r\n * @example\r\n * class UserApi extends Api {\r\n *   public constructor (config) {\r\n *     super(config);\r\n *\r\n *     this.login=this.login.bind(this);\r\n *   }\r\n *\r\n *   public login (user: User) {\r\n *     return this.api.post<string, User, AxiosResponse<User>>(\"https://www.domain/login\", {name: user.name, pass: user.pass})\r\n *        .then((res: AxiosResponse<string>) => res.data);\r\n *   }\r\n * }\r\n */\r\nclass Api {\r\n    [x: string]: any;\r\n    numberOfRequest: number;\r\n    api: AxiosInstance;\r\n    /**\r\n     * Creates an instance of Api.\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios configuration.\r\n     * @memberof Api\r\n     */\r\n    public constructor(config?: AxiosRequestConfig) {\r\n        this.api = axios.create(config);\r\n        this.numberOfRequest = 0;\r\n\r\n        this.getUri = this.getUri.bind(this);\r\n        this.request = this.request.bind(this);\r\n        this.get = this.get.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.head = this.head.bind(this);\r\n        this.post = this.post.bind(this);\r\n        this.put = this.put.bind(this);\r\n        this.patch = this.patch.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get Uri\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config]\r\n     * @returns {string}\r\n     * @memberof Api\r\n     */\r\n    public getUri(config?: AxiosRequestConfig): string {\r\n        return this.api.getUri(config);\r\n    }\r\n\r\n    /**\r\n     * Generic request.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP axios response payload.\r\n     * @memberof Api\r\n     *\r\n     * @example\r\n     * api.request({\r\n     *   method: \"GET|POST|DELETE|PUT|PATCH\"\r\n     *   baseUrl: \"http://www.domain.com\",\r\n     *   url: \"/api/v1/users\",\r\n     *   headers: {\r\n     *     \"Content-Type\": \"application/json\"\r\n     *  }\r\n     * }).then((response: AxiosResponse<User>) => response.data)\r\n     *\r\n     */\r\n    public request<T, R = AxiosResponse<T>>(config: AxiosRequestConfig): Promise<R> {\r\n        return this.api.request(config);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET method, used to fetch data `statusCode`: 200.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} HTTP `axios` response payload.\r\n     * @memberof Api\r\n     */\r\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.get(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP DELETE method, `statusCode`: 204 No Content.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.delete(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP HEAD method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public head<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.head(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP POST method `statusCode`: 201 Created.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public post<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.post(url, data, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP PUT method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public put<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.put(url, data, config);\r\n    }\r\n\r\n    /**\r\n      * HTTP PATCH method.\r\n      *\r\n      * @access public\r\n      * @template T - `TYPE`: expected object.\r\n      * @template B - `BODY`: body request object.\r\n      * @template R - `RESPONSE`: expected object inside a axios response format.\r\n      * @param {string} url - endpoint you want to reach.\r\n      * @param {B} data - payload to be send as the `request body`,\r\n      * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n      * @returns {Promise<R>} - HTTP [axios] response payload.\r\n      * @memberof Api\r\n      */\r\n    public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.patch(url, data, config);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @template T - type.\r\n     * @param {import(\"axios\").AxiosResponse<T>} response - axios response.\r\n     * @returns {T} - expected object.\r\n     * @memberof Api\r\n     */\r\n    public success<T>(response: AxiosResponse<T>): T {\r\n        return response.data;\r\n    }\r\n\r\n    public error(error: AxiosError<Error>) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const commonAPI = new Api(apiConfig);","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class DropdownQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  options: {key: string, value: string}[] = [];\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.options = options['options'] || [];\r\n    this.controlType = new FormConfig().questionControlType.dropdown;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextAreaQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textarea;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextboxQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textbox;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\nimport { ODateRange } from '../../Variables/DateRange';\r\n\r\nexport class DateRangeQuestion extends QuestionBase<ODateRange> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.dateRange;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class ReferenceQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.reference;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class DateTimeQuestion extends QuestionBase<Date> {\n  controlType = '';\n\n  constructor(options: any) {\n    super(options);\n    this.controlType = new FormConfig().questionControlType.datetime;\n  }\n}\n","import { QuestionBase } from './question-base';\nimport { FormConfig } from '../form.config';\n\nexport class RadioButtonQuestion extends QuestionBase<any> {\n  controlType = '';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: any) {\n    super(options);\n    this.options = options['options'] || [];\n    this.controlType = new FormConfig().questionControlType.radiobutton;\n  }\n}\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class CkeditorQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.ckeditor;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport styled from 'styled-components';\r\nimport './Ckeditor.scss';\r\n\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\n\r\nexport class ReactCkeditor extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={this.props.data}\r\n                    onInit={editor => {\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                        console.log('Editor is ready to use!', editor);\r\n                    }}\r\n                    onChange={(event, editor) => {\r\n                        const data = editor.getData();\r\n                        console.log({ event, editor, data });\r\n                        this.props.dataChange(data, this.props.ckeditorKey);\r\n                    }}\r\n                    onBlur={(event, editor) => {\r\n                        console.log('Blur.', editor);\r\n                    }}\r\n                    onFocus={(event, editor) => {\r\n                        console.log('Focus.', editor);\r\n                    }}\r\n                />\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}\r\n\r\nReactCkeditor.propTypes = {\r\n    data: PropTypes.string.isRequired,\r\n    dataChange: PropTypes.func.isRequired,\r\n    ckeditorKey: PropTypes.string.isRequired\r\n}","import React from 'react';\nimport { DynamicFormProps, DynamicFormStates } from './DynamicFormPropState';\nimport styled from 'styled-components';\nimport { QuestionBase } from './questions/question-base';\nimport { FormConfig } from './form.config';\nimport { CustomDropDown, ReferenceList, DateTime, RadioButton, RadioButtonStates, DateRange } from '../Variables';\nimport { ReferenceStates } from '../Variables/ReferenceList/ReferencePropsStates';\nimport { DropDownStates } from '../Variables/DropdownList/DropDownPropsStates';\nimport { DateTimeStates } from '../Variables/DateTime/DateTimePropsStates';\nimport { DateRangeStates } from '../Variables/DateRange/DateRangePropsStates';\nimport './DynamicForm.scss';\nimport { ODateRange } from '../Variables/DateRange';\nimport { ReactCkeditor } from '../Ckeditor/Ckeditor';\nconst ContainerDiv = styled.div`\n`;\nconst DangerText: React.CSSProperties = {\n    color: 'red',\n    fontStyle: 'italic'\n};\nconst Margin0: React.CSSProperties = {\n    margin: 0\n};\nexport class DynamicForm extends React.Component<DynamicFormProps, DynamicFormStates>{\n    formConfig: FormConfig;\n    constructor(props: DynamicFormProps) {\n        super(props);\n\n        this.formConfig = new FormConfig();\n        this.state = {\n            originalListFields: {},\n            listFields: {},\n            errors: {},\n            disableSubmitButton: true\n        };\n\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\n        this.renderQuestion = this.renderQuestion.bind(this);\n        this.validateForm = this.validateForm.bind(this);\n        //handle change\n        this.handleChange = this.handleChange.bind(this);\n        this.onSelectionChangeCallback = this.onSelectionChangeCallback.bind(this);\n        this.onSelectionReferenceListChange = this.onSelectionReferenceListChange.bind(this);\n        this.onselectionDateRangeChange = this.onselectionDateRangeChange.bind(this);\n        this.onCkeditorChange = this.onCkeditorChange.bind(this);\n        this.onselectionDateTimeChange = this.onselectionDateTimeChange.bind(this);\n        this.onRadioSelectionChange = this.onRadioSelectionChange.bind(this);\n    }\n\n    componentDidMount() {\n        //wait for update from container element\n        let listFields: { [s: string]: any } = {};\n        this.props.ListFields.forEach((val) => {\n            listFields[val.key] = val.value;\n        });\n        this.setState({\n            listFields: listFields,\n            originalListFields: JSON.parse(JSON.stringify(listFields))\n        });\n    }\n\n    componentDidUpdate() {\n        //wait for update from container element\n        let listFields: { [s: string]: any } = {};\n        this.props.ListFields.forEach((val) => {\n            listFields[val.key] = val.value;\n        });\n        //If list of fields change => update state\n        if (JSON.stringify(this.state.originalListFields) !== JSON.stringify(listFields)) {\n            this.setState({\n                listFields: listFields,\n                originalListFields: JSON.parse(JSON.stringify(listFields))\n            }, () => {\n                //Validate the form\n                let { errors, valid } = this.validateForm();\n                let disabled = !valid;\n                this.setState({\n                    disableSubmitButton: disabled,\n                    errors\n                });\n            });\n        }\n    }\n\n    /**\n     * Handle date range selection changed\n     * @param e date range state\n     */\n    onselectionDateRangeChange(e: DateRangeStates) {\n        let listFields = this.state.listFields;\n        let newDateRange: ODateRange = e.dateRange;\n        listFields[e.referenceKey] = newDateRange;\n        this.setState({\n            listFields: listFields\n        }, () => {\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        })\n    }\n\n    /**\n     * Handle radio button changed\n     * @param value Radio button state\n     */\n    onRadioSelectionChange(value: RadioButtonStates) {\n        let listFields = this.state.listFields;\n        listFields[value.referenceKey] = value.value ? JSON.parse(value.value) : value.value;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle date time selection changed\n     * @param e date time state\n     */\n    onselectionDateTimeChange(e: DateTimeStates) {\n        let listFields = this.state.listFields;\n        let newDate = e.dateTime;\n        listFields[e.referenceKey] = newDate;\n        //update new value\n        this.setState({\n            listFields: listFields\n        }, () => {\n            //validate the form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        })\n    }\n\n    /**\n     * Handle reference list selected record\n     * @param e reference state\n     */\n    onSelectionReferenceListChange(e: ReferenceStates) {\n        let listFields = this.state.listFields;\n        listFields[e.referenceKey] = e.selected;\n        //udate new value\n        this.setState({\n            listFields\n        }, () => {\n            //validate the form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle dropdown list change\n     * @param e Dropdown state\n     */\n    onSelectionChangeCallback(e: DropDownStates) {\n        let listFields = this.state.listFields;\n        listFields[e.dropdownKey] = e.selected;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Handle input change\n     * @param event event\n     */\n    handleChange(event: any) {\n        const { name, value } = event.target;\n        let listFields = this.state.listFields;\n        listFields[name] = value;\n        //update new value\n        this.setState<never>({\n            listFields\n        }, () => {\n            //validate form\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * On ckeditor change handler\n     * @param str string value\n     * @param key key of question\n     */\n    onCkeditorChange(str: string, key: string) {\n        let listFields = this.state.listFields;\n        listFields[key] = str;\n        this.setState<never>({\n            listFields\n        }, () => {\n            let { errors, valid } = this.validateForm();\n            let disabled = !valid;\n            this.setState({\n                disableSubmitButton: disabled,\n                errors\n            });\n        });\n    }\n\n    /**\n     * Validate the form\n     */\n    validateForm() {\n        let valid = true;\n        let errors: { [s: string]: string[] } = {};\n        this.props.ListFields.forEach(element => {\n            errors[element.key] = [];\n            switch (element.controlType) {\n                //validate fields with type textbox and textarea\n                case this.formConfig.questionControlType.textbox:\n                case this.formConfig.questionControlType.textarea:\n                    for (var key1 in element.validators) {\n                        switch (key1) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key] !== \"\")) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            //min-length\n                            case this.formConfig.formValidators.minLength:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length >= element.validators[key].value)) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            //max-length\n                            case this.formConfig.formValidators.maxLength:\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length <= element.validators[key].value)) {\n                                    errors[element.key].push(\n                                        element.validators[key1].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type reference\n                case this.formConfig.questionControlType.reference:\n                    for (var key2 in element.validators) {\n                        switch (key2) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key] || this.state.listFields[element.key]._id == null) {\n                                    errors[element.key].push(\n                                        element.validators[key2].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type dropdown\n                case this.formConfig.questionControlType.dropdown:\n                    for (var key3 in element.validators) {\n                        switch (key3) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                //not have value or value is 0 = [--none--]\n                                if (!this.state.listFields[element.key]\n                                    || !this.state.listFields[element.key].key\n                                    || this.state.listFields[element.key].key === 0\n                                ) {\n                                    errors[element.key].push(\n                                        element.validators[key3].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type date time\n                case this.formConfig.questionControlType.dateRange:\n                    for (var key4 in element.validators) {\n                        switch (key4) {\n                            case this.formConfig.formValidators.require:\n                                //not have value or value of one of two date is null\n                                if (!this.state.listFields[element.key] ||\n                                    this.state.listFields[element.key].startDate == null ||\n                                    this.state.listFields[element.key].endDate == null) {\n                                    errors[element.key].push(\n                                        element.validators[key4].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type radio button\n                case this.formConfig.questionControlType.radiobutton:\n                    for (var key5 in element.validators) {\n                        switch (key5) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key]) {\n                                    errors[element.key].push(\n                                        element.validators[key5].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                //validate fields with type date time\n                case this.formConfig.questionControlType.datetime:\n                    for (var key6 in element.validators) {\n                        switch (key6) {\n                            //mandatory field\n                            case this.formConfig.formValidators.require:\n                                if (!this.state.listFields[element.key]) {\n                                    errors[element.key].push(\n                                        element.validators[key6].errorMessage\n                                    );\n                                }\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n        });\n        //look at errors\n        for (var key in errors) {\n            if (errors[key].length > 0) {\n                valid = false;\n                break;\n            }\n        }\n        return { errors, valid };\n    }\n\n    /**\n     * Render error message base on question key\n     * @param questionKey question key\n     */\n    renderErrorMessage(questionKey: string) {\n        //get state.error message base on question key\n        let errors = this.state.errors[questionKey];\n        //if there is no error => return\n        if (!errors) return;\n        //else display error message\n        return (\n            <div style={DangerText}>\n                {\n                    errors.map((err, i) => (\n                        <div key={i}>\n                            <span>{err}</span>\n                        </div>\n                    ))\n                }\n            </div>\n        );\n    }\n\n    /**\n     * Render questions\n     * @param question question definition\n     */\n    renderQuestion(question: QuestionBase<any>) {\n        //depend on type of question => render appropriate element\n        switch (question.controlType) {\n            //question type = textbox\n            case this.formConfig.questionControlType.textbox:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <input className=\"form-control\"\n                            onChange={this.handleChange}\n                            readOnly={question.readonly}\n                            type={question.type}\n                            name={question.key}\n                            value={this.state.listFields[question.key] || ''}\n                            id={question.key} />\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = textarea\n            case this.formConfig.questionControlType.textarea:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <textarea className=\"form-control\"\n                            onChange={this.handleChange}\n                            readOnly={question.readonly}\n                            rows={question.rows}\n                            name={question.key}\n                            value={this.state.listFields[question.key]}\n                            id={question.key} ></textarea>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = dropdown list\n            case this.formConfig.questionControlType.dropdown:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <CustomDropDown\n                            selected={question.value}\n                            dropdownKey={question.key}\n                            onSelectionChange={this.onSelectionChangeCallback}\n                            options={question.options}\n                            multiple={question.multiple}\n                        ></CustomDropDown>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                );\n            //question type = reference\n            case this.formConfig.questionControlType.reference:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        {\n\n                            <ReferenceList serverUrl={question.serverUrl}\n                                displayField={question.displayField}\n                                listFields={question.listFields}\n                                filterCondition={question.filterCondition}\n                                referenceKey={question.key}\n                                selected={question.value}\n                                onSelectionChange={this.onSelectionReferenceListChange}\n                                multiple={question.multiple}\n                            ></ReferenceList>\n\n                        }\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            case this.formConfig.questionControlType.dateRange:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <DateRange referenceKey={question.key}\n                            dateRange={question.value}\n                            onSelectionChange={this.onselectionDateRangeChange}>\n                        </DateRange>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            case this.formConfig.questionControlType.ckeditor:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <ReactCkeditor\n                            data={question.value}\n                            dataChange={this.onCkeditorChange}\n                            ckeditorKey={question.key}\n                        />\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            //question type = date time\n            case this.formConfig.questionControlType.datetime:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <DateTime referenceKey={question.key}\n                            dateTime={question.value}\n                            onSelectionChange={this.onselectionDateTimeChange}>\n                        </DateTime>\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            //question type = Radio button\n            case this.formConfig.questionControlType.radiobutton:\n                return (\n                    <fieldset key={question.key} className=\"form-group\">\n                        <label htmlFor={question.key}>\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\n                        </label>\n                        <RadioButton onSelectionChange={this.onRadioSelectionChange}\n                            referenceKey={question.key}\n                            options={question.options} />\n                        {this.renderErrorMessage(question.key)}\n                    </fieldset>\n                )\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <ContainerDiv>\n                <form onSubmit={(e) => { e.preventDefault(); this.props.OnSubmitCallback(this.state) }}>\n                    {this.props.ListFields.map((field, i) => (\n                        this.renderQuestion(field)\n                    ))}\n                    <input style={Margin0}\n                        type=\"submit\"\n                        value=\"Submit\"\n                        disabled={this.state.disableSubmitButton}\n                        className=\"btn btn-primary btn-block\" />\n                </form>\n            </ContainerDiv>\n        );\n    }\n}","export * from './DynamicForm';\nexport * from './DynamicFormPropState';\nexport * from './form.config';\nexport * from './class/validator';\nexport * from './questions/question-base';\nexport * from './questions/question-dropdown';\nexport * from './questions/question-textarea';\nexport * from './questions/question-textbox';\nexport * from './questions/question-daterange';\nexport * from './questions/question-reference';\nexport * from './questions/question-datetime';\nexport * from './questions/question-radiobutton';\nexport * from './questions/question-ckeditor';","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst ContainerDiv = styled.div`\r\n    margin: auto;\r\n    padding-top: 15px;\r\n    border-bottom: 0.2px solid #b0b0b0;\r\n`;\r\nexport interface BreakLineProps {\r\n    cssProperties?: React.CSSProperties\r\n}\r\nexport class BreakLine extends React.Component<BreakLineProps> {\r\n\r\n    render(){\r\n        return(\r\n            this.props.cssProperties ? \r\n            (\r\n                <div style={this.props.cssProperties}></div>\r\n            )\r\n            :\r\n            (\r\n                <ContainerDiv></ContainerDiv>\r\n            )\r\n            \r\n        );\r\n    }\r\n}","import { KeyValue } from \"../../../class/common/keyValue\";\r\n\r\nexport interface DropDownProps {\r\n    options: KeyValue[],\r\n    dropdownKey: string,\r\n    onSelectionChange: (selected: DropDownStates) => void,\r\n    selected?: any,\r\n    multiple?: boolean\r\n}\r\n\r\nexport interface DropDownStates {\r\n    dropdownKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    searchKey: string,\r\n}\r\n\r\nexport const initialDropDownStates: DropDownStates = {\r\n    dropdownKey: '',\r\n    originalSelected: null,\r\n    //default value is None\r\n    selected: null,\r\n    searchKey: ''\r\n}","import React from 'react';\r\nimport { DropDownProps, DropDownStates, initialDropDownStates } from './DropDownPropsStates';\r\nimport { TextField, Checkbox } from '@material-ui/core';\r\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport './DropdownList.scss';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nexport class CustomDropDown extends React.Component<DropDownProps, DropDownStates>{\r\n    constructor(props: DropDownProps) {\r\n        super(props);\r\n\r\n        this.state = initialDropDownStates;\r\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\r\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;    //default option\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n\r\n        //get selected items to show checkbox if multiple autocomplete is enable\r\n        if (this.props.multiple) {\r\n            selected = [];\r\n            this.props.options.forEach((value) => {\r\n                if (selected && (selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\r\n                    selected.push(value);\r\n                }\r\n            });\r\n        }\r\n        this.setState({\r\n            selected: selected,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            dropdownKey: this.props.dropdownKey\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            //get selected items to show checkbox if multiple autocomplete is enable\r\n            let selected = this.props.selected;\r\n            if (this.props.multiple) {\r\n                selected = [];\r\n                this.props.options.forEach((value) => {\r\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\r\n                        selected.push(value);\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                selected: selected,\r\n                originalSelected: JSON.parse(JSON.stringify(selected))\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle action close dropdown list\r\n     * @param event change event\r\n     * @param reason reason for close\r\n     */\r\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\r\n        //update selected value for the parent component\r\n        this.props.onSelectionChange(this.state);\r\n    }\r\n\r\n    /**\r\n     * Handle action change selection\r\n     * @param event change event\r\n     * @param value value selected\r\n     * @param reason reason for change\r\n     */\r\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\r\n        this.setState({\r\n            selected: value\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete\r\n                multiple={this.props.multiple}\r\n                id=\"autocomplete-box\"\r\n                className=\"font-theme\"\r\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\r\n                onClose={this.onCloseDropdown}\r\n                onChange={this.onChangeDropdown}\r\n                options={this.props.options}\r\n                disableCloseOnSelect={this.props.multiple}\r\n                autoSelect\r\n                autoHighlight\r\n                getOptionLabel={(option) => option['value'] ? option['value'] : ''}\r\n                renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                        {\r\n                            this.props.multiple ?\r\n                                (\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                )\r\n                                :\r\n                                ('')\r\n                        }\r\n                        <span>{option.value}</span>\r\n                    </React.Fragment>\r\n                )}\r\n                style={{ width: '100%' }}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}","export interface ReferenceProps {\r\n    serverUrl: string,\r\n    displayField: string,   //the field will show on search bar\r\n    listFields?: string[],  //the list of field will show in options\r\n    filterCondition?: string,\r\n    onSelectionChange: (selected: ReferenceStates) => void,\r\n    selected?: any,\r\n    referenceKey: string,\r\n    multiple?: boolean\r\n}\r\n\r\nexport interface ReferenceStates {\r\n    referenceKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    data: any[]\r\n}\r\n\r\nexport const initialReferenceStates: ReferenceStates = {\r\n    referenceKey: '',\r\n    originalSelected: null,\r\n    selected: null,\r\n    data: []\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\nexport class ReferenceService {\r\n    constructor(config: AxiosRequestConfig) {\r\n        this.getByUrl = this.getByUrl.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get data by url\r\n     */\r\n    public async getByUrl(url: string): Promise<any[]>{\r\n        try {\r\n            const res: AxiosResponse<any[]> = await commonAPI.get<any, AxiosResponse<any[]>>(url);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { ReferenceProps, ReferenceStates, initialReferenceStates } from './ReferencePropsStates';\r\nimport { TextField, Checkbox } from '@material-ui/core';\r\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport './ReferenceList.scss';\r\nimport { ReferenceService } from './Reference.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nexport class ReferenceList extends React.Component<ReferenceProps, ReferenceStates>{\r\n    referenceService: ReferenceService;\r\n    constructor(props: ReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = initialReferenceStates;\r\n        this.referenceService = new ReferenceService(apiConfig.apiConfig);\r\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\r\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n\r\n        let allReference = await this.referenceService.getByUrl(this.props.serverUrl);\r\n        let displayedData: any[] = [];\r\n        allReference.forEach(element => {\r\n            delete element['createdBy'];\r\n            delete element['createdDate'];\r\n            delete element['updatedBy'];\r\n            delete element['updatedDate'];\r\n            let newObj = JSON.parse(JSON.stringify(element));   //clone object\r\n            //remove the fields that do not display\r\n            if (this.props.listFields) {\r\n                for (let p in newObj) {\r\n                    if (this.props.listFields.indexOf(p) === -1 && p !== '_id' && p !== this.props.displayField) {\r\n                        delete newObj[p];\r\n                    }\r\n                }\r\n                displayedData.push(newObj);\r\n            }\r\n        });\r\n        //get selected items to show checkbox if multiple autocomplete is enable\r\n        if (this.props.multiple) {\r\n            selected = [];\r\n            displayedData.forEach((value) => {\r\n                if (selected && (selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\r\n                    selected.push(value);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            selected: selected,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            referenceKey: this.props.referenceKey,\r\n            data: displayedData\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            //get selected items to show checkbox if multiple autocomplete is enable\r\n            let selected = this.props.selected;\r\n            if (this.props.multiple) {\r\n                selected = [];\r\n                this.state.data.forEach((value) => {\r\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\r\n                        selected.push(value);\r\n                    }\r\n                });\r\n            }\r\n            this.setState({\r\n                selected: selected,\r\n                originalSelected: JSON.parse(JSON.stringify(selected))\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle action close dropdown list\r\n     * @param event change event\r\n     * @param reason reason for close\r\n     */\r\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\r\n        //update selected value for the parent component\r\n        this.props.onSelectionChange(this.state);\r\n    }\r\n\r\n    /**\r\n     * Handle action change selection\r\n     * @param event change event\r\n     * @param value value selected\r\n     * @param reason reason for change\r\n     */\r\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\r\n        this.setState({\r\n            selected: value\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete\r\n                multiple={this.props.multiple}\r\n                id=\"autocomplete-box\"\r\n                className=\"font-theme\"\r\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\r\n                onClose={this.onCloseDropdown}\r\n                onChange={this.onChangeDropdown}\r\n                options={this.state.data}\r\n                disableCloseOnSelect={this.props.multiple}\r\n                autoSelect\r\n                autoHighlight\r\n                getOptionLabel={(option) => option[this.props.displayField]}\r\n                renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                        {\r\n                            this.props.multiple ?\r\n                                (\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                )\r\n                                :\r\n                                ('')\r\n                        }\r\n                        {\r\n                            Object.keys(option).filter((val) => {\r\n                                return val !== '_id';\r\n                            }).map((opt, ind) => (\r\n                                <span className=\"font-theme\" style={{ paddingRight: '10px' }} key={ind}>{option[opt]}</span>\r\n                            ))\r\n                        }\r\n                    </React.Fragment>\r\n                )}\r\n                style={{ width: '100%' }}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}","export interface DateTimeProps {\n    dateTime?: Date,\n    onSelectionChange: (selected: DateTimeStates) => void,\n    referenceKey: string\n}\n\nexport interface DateTimeStates {\n    referenceKey: string,\n    originalDateTime?: Date,\n    dateTime?: Date,\n}\n\nexport const initialDateTimeStates: DateTimeStates = {\n    referenceKey: '',\n    originalDateTime: undefined,\n    dateTime: undefined\n}","/**\n * Require react-datepicker\n */\nimport React from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styled from 'styled-components';\n\nimport { DateTimeProps, DateTimeStates, initialDateTimeStates } from './DateTimePropsStates';\nimport './DateTime.scss';\n\nconst ContainerDiv = styled.div`\n    width: 100%;\n`;\nconst DateTimeDiv = styled.div`\n    display: inline-block;\n    width: 100%;\n`;\nexport class DateTime extends React.Component<DateTimeProps, DateTimeStates>{\n    constructor(props: DateTimeProps) {\n        super(props);\n        this.state = initialDateTimeStates;\n        this.handleChangeDateTime = this.handleChangeDateTime.bind(this);\n    }\n\n    componentDidMount() {\n        let dateTime = this.props.dateTime ? this.props.dateTime : undefined;\n        this.setState({\n            referenceKey: this.props.referenceKey,\n            dateTime: dateTime,\n            originalDateTime: this.props.dateTime ? JSON.parse(JSON.stringify(dateTime)) : undefined\n        });\n    }\n\n    componentDidUpdate() {\n        if(this.props.dateTime){\n            //update state when the comming props changed\n            if (JSON.stringify(this.state.originalDateTime) !== JSON.stringify(this.props.dateTime)) {\n                this.setState({\n                    dateTime: this.props.dateTime,\n                    originalDateTime: JSON.parse(JSON.stringify(this.props.dateTime))\n                });\n            }\n        }\n    }\n\n    /**\n     * handle date selection changed\n     * @param date selected date\n     */\n    handleChangeDateTime(date: Date) {\n        console.log(date);\n        this.setState({\n            dateTime: date\n        }, () => {\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <ContainerDiv>\n                <DateTimeDiv>\n                    <ReactDatePicker\n                        dateFormat=\"yyyy/MM/dd, HH:mm\"\n                        minDate={new Date()}\n                        selected={this.state.dateTime}\n                        showTimeSelect\n                        timeFormat=\"HH:mm\"\n                        onChange={this.handleChangeDateTime}\n                    />\n                </DateTimeDiv>\n            </ContainerDiv>\n        )\n    }\n}","import React from 'react';\nimport { RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\n\ninterface RadioButtonProps {\n    options?: any[],\n    onSelectionChange: (value: any) => void,\n    referenceKey: string\n}\n\nexport interface RadioButtonStates {\n    value: any,\n    referenceKey: string,\n}\n\nexport class RadioButton extends React.Component<RadioButtonProps, RadioButtonStates>{\n    constructor(props: RadioButtonProps) {\n        super(props);\n        this.state = {\n            value: null,\n            referenceKey: this.props.referenceKey\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /**\n     * Handle selection change\n     * @param event input change event\n     */\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            value: (event.target as HTMLInputElement).value\n        }, ()=>{\n            this.props.onSelectionChange(this.state);\n        });\n    }\n\n    render() {\n        return (\n            <RadioGroup aria-label=\"gender\"\n                name=\"gender1\"\n                value={this.state.value}\n                onChange={this.handleChange}>\n                {\n                    this.props.options?.map((val) => (\n                        <FormControlLabel value={JSON.stringify(val)}\n                            key={`${val.key}_radioButton`}\n                            control={<Radio />}\n                            label={val.value}\n                        />\n                    ))\n                }\n            </RadioGroup>\n        )\n    }\n}","export class FormConfig {\n    formValidators = {          //the understand the value => refer the attributes of Validators in angular form, see in question-control.service.ts\n        require: \"required\",\n        minLength: \"minLength\",\n        maxLength: \"maxLength\",\n        email: \"email\"\n    }\n\n    inputTypeDef = {\n        button: 'button',\n        checkbox: 'checkbox',\n        color: 'color',\n        date: 'date',\n        datetime: 'datetime',\n        datetimeLocal: 'datetime-local',\n        email: 'email',\n        file: 'file',\n        hidden: 'hidden',\n        image: 'image',\n        month: 'month',\n        number: 'number',\n        password: 'password',\n        radio: 'radio',\n        range: 'range',\n        reset: 'reset',\n        search: 'search',\n        submit: 'submit',\n        tel: 'tel',\n        text: 'text',\n        time: 'time',\n        url: 'url',\n        week: 'week'\n    }\n\n    questionControlType = {\n        textbox: 'textbox',\n        textarea: 'textarea',\n        dropdown: 'dropdown',\n        reference: 'reference',\n        dateRange: 'daterange',\n        ckeditor: 'ckeditor',\n        datetime: 'datetime',\n        radiobutton: 'radiobutton'\n    }\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nexport class About extends React.Component {\r\n\r\n    render() {\r\n        const myStyleBorder = {\r\n            border: 0\r\n        } as React.CSSProperties;\r\n        const mystyleAbout = {\r\n            width: '90%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div style={mystyleAbout}>\r\n                <section className=\"team1 cid-s05ipp9BuT\" id=\"team1-g\">\r\n                    <div className=\"container align-center\">\r\n                        <h2 className=\"pb-3 mbr-fonts-style mbr-section-title display-2\">\r\n                            OUR AWESOME TEAM\r\n                        </h2>\r\n                        <h3 className=\"pb-5 mbr-section-subtitle mbr-fonts-style mbr-light display-5\">\r\n                            Click any icon or text to edit or style it. Click blue \"Gear\" icon in the top right corner to hide/show text and change the block and cards background, icons count and other.\r\n                        </h3>\r\n                        <div className=\"row media-row\">\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Steven Bruce</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a href=\"https://twitter.com/mobirise\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Anissa Fisher</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"map2 cid-s05h5y5RKs\" id=\"map2-9\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"google-map\">\r\n                                    <iframe title=\"google map\" frameBorder=\"0\" style={myStyleBorder} src=\"https://www.google.com/maps/embed/v1/place?key=AIzaSyCy9r70T3NYf3PhvVflTo0_zdif2_IoIYs&amp;q=place_id:ChIJ3VvA2VkrdTERuSbE1OXl8E8\" allowFullScreen></iframe>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Home.scss';\r\nexport class Home extends React.Component {\r\n    render() {\r\n        const myStyle = {\r\n            opacity: '0.5',\r\n            backgroundColor: 'rgb(35, 35, 35)'\r\n        } as React.CSSProperties;\r\n        const myStyleWidth100 = {\r\n            width: '100%'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div>\r\n                <section className=\"cid-s05dw7YB4t mbr-fullscreen mbr-parallax-background\" id=\"header2-1\">\r\n                    <div className=\"mbr-overlay\" style={myStyle}></div>\r\n                    <div className=\"container align-center\">\r\n                        <div className=\"justify-content-md-center\">\r\n                            <div className=\"mbr-white\">\r\n                                <h1 className=\"mbr-section-title mbr-bold pb-3 mbr-fonts-style display-1\">\r\n                                    GrownUp\r\n                                </h1>\r\n                                <p className=\"mbr-text pb-3 mbr-fonts-style display-5\">\r\n                                    Build the future together\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mbr-arrow hidden-sm-down\" aria-hidden=\"true\">\r\n                        <a href=\"#footer\">\r\n                            <i className=\"mbri-down mbr-iconfont\"></i>\r\n                        </a>\r\n                    </div>\r\n                </section>\r\n                <section className=\"header7 cid-s05dxD9ioe\" id=\"header7-2\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"media-content align-right\">\r\n                                <h1 className=\"mbr-section-title mbr-white pb-3 mbr-fonts-style display-1\">\r\n                                    Intro with Video\r\n                                </h1>\r\n                                <div className=\"mbr-section-text mbr-white pb-3\">\r\n                                    <p className=\"mbr-text mbr-fonts-style display-5\">\r\n                                        Intro with background color, paddings and a video on the right. Mobirise helps you cut down development time by providing you with a flexible website editor with a drag and drop interface.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-figure\" style={myStyleWidth100}>\r\n                                <iframe title=\"introduce-video\" className=\"mbr-embedded-video\" src=\"https://www.youtube.com/embed/uNCr7NdOJgw?rel=0&amp;amp;showinfo=0&amp;autoplay=0&amp;loop=0\" width=\"1280\" height=\"720\" frameBorder=\"0\" allowFullScreen></iframe>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"testimonials1 cid-s05iIc8MxP\" id=\"testimonials1-h\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"title col-12 align-center\">\r\n                                <h2 className=\"pb-3 mbr-fonts-style display-2\">\r\n                                    WHAT OUR FANTASTIC USERS SAY\r\n                                </h2>\r\n                                <h3 className=\"mbr-section-subtitle mbr-light pb-3 mbr-fonts-style display-5\">\r\n                                    This theme is based on Bootstrap 4 - most powerful mobile first framework\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container pt-3 mt-2\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"1\" src={`${process.env.PUBLIC_URL}/assets/images/face1.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"2\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"3\" src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"4\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"5\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"6\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { logoutUser } from '../../../redux/store/user/actions';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../redux/store';\r\nimport { User } from '../../../class/user';\r\ntype ToolbarProps = {\r\n    logoutUser: typeof logoutUser,\r\n    user: User\r\n}\r\ntype ToolbarStates = {\r\n}\r\nclass Toolbar extends React.Component<ToolbarProps, ToolbarStates> {\r\n    constructor(props: ToolbarProps) {\r\n        super(props);\r\n\r\n        this.logout = this.logout.bind(this);\r\n        this.renderManagementLink = this.renderManagementLink.bind(this);\r\n        this.renderProfileLink = this.renderProfileLink.bind(this);\r\n        this.renderServiceLink = this.renderServiceLink.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle logout action\r\n     */\r\n    logout() {\r\n        this.props.logoutUser();\r\n    }\r\n\r\n    renderProfileLink() {\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        <span className=\"mbri-user mbr-iconfont mbr-iconfont-btn\"></span>{this.props.user.firstName} {this.props.user.lastName}\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to={`/users/${this.props.user._id}`}>Profile</Link>\r\n                        <Link className=\"nav-link link text-white display-4\" to=\"/login\" onClick={this.logout}>\r\n                            Logout\r\n                        </Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        else {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/login\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render Management Link\r\n     */\r\n    renderManagementLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        Management\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/projects\">Projects</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/activities\">Activities</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgebases\">Knowledge Bases</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgearticles\">Knowledge Articles</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/users\">Users</Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render service link\r\n     */\r\n    renderServiceLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/service\">Services</Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n    // After the component did mount\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const mystyles = {\r\n            height: '3.8rem'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <section className=\"menu cid-s05eVtUnGb\" id=\"menu1-7\" style={{zIndex: 100000}}>\r\n                <nav className=\"navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top navbar-toggleable-sm\">\r\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <div className=\"hamburger\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </button>\r\n                    <div className=\"menu-logo\">\r\n                        <div className=\"navbar-brand\">\r\n                            <span className=\"navbar-logo\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-122x68.jpg`} alt=\"GrownUp\" title=\"\" style={mystyles} />\r\n                                </a>\r\n                            </span>\r\n                            <span className=\"navbar-caption-wrap\">\r\n                                <a className=\"navbar-caption text-white display-4\" href=\"/\">\r\n                                    GrownUp\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav nav-dropdown\" data-app-modern-menu=\"true\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/home\">Home</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderManagementLink()\r\n                            }\r\n                            {\r\n                                this.renderServiceLink()\r\n                            }\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/about\">About Us</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderProfileLink()\r\n                            }\r\n                        </ul>\r\n                        <div className=\"navbar-buttons mbr-section-btn\">\r\n                            <Link className=\"text-white btn btn-sm btn-primary display-4\" to=\"/contact\">Contact Us</Link>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user.currentUser\r\n    }\r\n}\r\nconst MapDispatchToProps = {\r\n    logoutUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(Toolbar);","import { USER_LOGOUT, USER_LOGIN, STORE_USER } from \"./types\";\r\nimport { User } from \"../../../class/user\";\r\n\r\nexport function storeUser(users: User[]){\r\n  return {\r\n    type: STORE_USER,\r\n    payload: users\r\n  };\r\n}\r\n\r\nexport function loginUser(loginUser: User) {\r\n  return {\r\n    type: USER_LOGIN,\r\n    payload: loginUser\r\n  };\r\n}\r\n\r\nexport function logoutUser() {\r\n  return {\r\n    type: USER_LOGOUT,\r\n    meta: {}\r\n  };\r\n}\r\n","import { User } from \"../../../class/user\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const USER_LOGIN = \"USER_LOGIN\";\r\nexport const USER_LOGOUT = \"USER_LOGOUT\";\r\nexport const STORE_USER = \"STORE_USER\";\r\n\r\ninterface UserLoginAction {\r\n  type: typeof USER_LOGIN;\r\n  payload: User;\r\n}\r\n\r\ninterface UserLogoutAction {\r\n  type: typeof USER_LOGOUT;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\ninterface StoreUserAction {\r\n  type: typeof STORE_USER;\r\n  payload: User[];\r\n}\r\n\r\nexport type UserActionTypes = UserLoginAction | UserLogoutAction | StoreUserAction;\r\n","import React from 'react';\r\nexport class Contact extends React.Component {\r\n    render() {\r\n        const formContainer = {\r\n            width: '50%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div className=\"contact-component\">\r\n                <section className=\"mbr-section form4 cid-s05iX5CkzH\" id=\"form4-k\">\r\n                    <div className=\"container\">\r\n                        <div style={formContainer}>\r\n                            <div>\r\n                                <h2 className=\"pb-3 align-left mbr-fonts-style display-2\">\r\n                                    Drop a Line\r\n                                </h2>\r\n                                <div>\r\n                                    <div className=\"icon-block pb-3 align-left\">\r\n                                        <span className=\"icon-block__icon\">\r\n                                            <span className=\"mbri-letter mbr-iconfont\"></span>\r\n                                        </span>\r\n                                        <h4 className=\"icon-block__title align-left mbr-fonts-style display-5\">\r\n                                            Don't hesitate to contact us\r\n                                        </h4>\r\n                                    </div>\r\n                                    <div className=\"icon-contacts pb-3\">\r\n                                        <h5 className=\"align-left mbr-fonts-style display-7\">\r\n                                            Ready for offers and cooperation\r\n                                        </h5>\r\n                                        <p className=\"mbr-text align-left mbr-fonts-style display-7\">\r\n                                            Phone: +84 (0) 33 870 5850 <br />\r\n                                            Email: robertvo.developer.93@mail.com\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div data-form-type=\"formoid\">\r\n                                    <form action=\"https://mobirise.com/\" method=\"POST\" className=\"mbr-form form-with-styler\" data-form-title=\"Mobirise Form\">\r\n                                        <input type=\"hidden\" name=\"email\" data-form-email=\"true\" value=\"NHgs6oyl7goD/2aO9xww+qh9DyXQV7DlGeDDf/DT7dkPO7mgri3MdhyGoeU3Q+oRWWU12LOq8p80NGjERdbxIWvoy+fcupNDheS2fFJMm7aX6zD0pQ7swhjl+LGjC1UD\" />\r\n                                        <div className=\"row\">\r\n                                            <div hidden={true} data-form-alert=\"\" className=\"alert alert-success col-12\">\r\n                                                Thanks for filling out the form!\r\n                                            </div>\r\n                                            <div hidden={true} data-form-alert-danger=\"\" className=\"alert alert-danger col-12\"></div>\r\n                                        </div>\r\n                                        <div className=\"dragArea row\">\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"name\">\r\n                                                <input type=\"text\" name=\"name\" placeholder=\"Your Name\" data-form-field=\"Name\" required={true} className=\"form-control input display-7\" id=\"name-form4-k\" />\r\n                                            </div>\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"phone\">\r\n                                                <input type=\"text\" name=\"phone\" placeholder=\"Phone\" data-form-field=\"Phone\" required={true} className=\"form-control input display-7\" id=\"phone-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"email\" className=\"col-md-12  form-group\">\r\n                                                <input type=\"text\" name=\"email\" placeholder=\"Email\" data-form-field=\"Email\" className=\"form-control input display-7\" required={true} id=\"email-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"message\" className=\"col-md-12  form-group\">\r\n                                                <textarea name=\"message\" placeholder=\"Message\" data-form-field=\"Message\" className=\"form-control input display-7\" id=\"message-form4-k\"></textarea>\r\n                                            </div>\r\n                                            <div className=\"col-md-12 input-group-btn  mt-2 align-center\">\r\n                                                <button type=\"submit\" className=\"btn btn-primary btn-form display-4\">SEND MESSAGE</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","export interface SignUpProp {\r\n\tOnRegister: (form:SignUpState) => void,\r\n\tLoginRedirectLink: string\r\n}\r\n\r\nexport type SignUpState = {\r\n\tfirstName: string,\r\n\tlastName: string,\r\n\temail: string,\r\n\tpassword: string,\r\n\trepassword: string,\r\n\taddress: string,\r\n\tphone: string,\r\n\tredirectLoginPage: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\terrors: any,\r\n\tmandatoryFields: any\r\n}\r\n\r\nexport const initialSignUpState: SignUpState = {\r\n\tfirstName: '',\r\n\tlastName: '',\r\n\temail: '',\r\n\tpassword: '',\r\n\trepassword: '',\r\n\taddress: '',\r\n\tphone: '',\r\n\tredirectLoginPage: false,\r\n\tdisableSubmitButton: true,\r\n\terrors: {\r\n\t\tfirstName: 'First Name is required',\r\n\t\tlastName: 'Last Name is required',\r\n\t\temail: 'Email is required',\r\n\t\tpassword: 'Password is required',\r\n\t\trepassword: 'Re-Password is required'\r\n\t},\r\n\tmandatoryFields: {\r\n\t\tfirstName: true,\r\n\t\tlastName: true,\r\n\t\temail: true,\r\n\t\tpassword: true,\r\n\t\trepassword: true,\r\n\t}\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { SignUpProp, SignUpState, initialSignUpState } from \"./SignUpPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    background-color: #232323;\r\n    padding-top: 30px;\r\n    padding-bottom: 20px;\r\n`;\r\nconst LoginDiv = styled.div`\r\n    width: 400px;\r\n    margin: auto;\r\n    background-color: #e9ecef;\r\n    padding: 40px;\r\n    border-radius: 15px;\r\n`;\r\nconst CustomTextBox: React.CSSProperties = {\r\n    display: 'block',\r\n    width: '100%',\r\n    borderRadius: '.25rem',\r\n    backgroundColor: '#f5f5f5',\r\n    boxShadow: 'none',\r\n    color: '#565656',\r\n    lineHeight: 1.43,\r\n    padding: '1.07em 0.5em',\r\n    height: 'calc(2.25rem + 2px)',\r\n    border: '1px solid #e8e8e8'\r\n}\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst DangerText: React.CSSProperties = {\r\n    color: 'red',\r\n    fontStyle: 'italic'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class SignUp extends Component<SignUpProp, SignUpState> {\r\n    constructor(props: SignUpProp) {\r\n        super(props);\r\n\r\n        //initial variable\r\n        this.state = initialSignUpState;\r\n\r\n        //binding functions\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * handle change value of form\r\n     * @param event Change event\r\n     */\r\n    handleChange(event: any) {\r\n        event.preventDefault();\r\n        const { name, value } = event.target;\r\n        this.setState<never>({\r\n            [name]: value\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate the sign up form\r\n     */\r\n    validateForm() {\r\n        let valid = true;\r\n        let errors: { [s: string]: string } = {};\r\n        errors['firstName'] = this.state.firstName.length > 0 ? \"\" : \"First Name is required\";\r\n        errors['lastName'] = this.state.lastName.length > 0 ? \"\" : \"Last Name is required\";\r\n        errors['email'] = this.state.email.length > 0 ? \"\" : \"Email is required\";\r\n        errors['password'] = this.state.password.length > 0 ? \"\" : \"Password is required\";\r\n        errors['repassword'] = this.state.repassword.length > 0 ? \"\" : \"Re-Password is required\";\r\n        if(this.state.repassword  !== \"\" && this.state.password !== this.state.repassword){\r\n            errors.repassword = \"Password and Re-Password are not match\";\r\n        }\r\n\r\n        for (var key in errors) {\r\n            if (errors[key].length > 0) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return { errors, valid };\r\n    }\r\n\r\n    /**\r\n     * Render error message base on question key\r\n     * @param questionKey question key\r\n     */\r\n    renderErrorMessage(questionKey: string) {\r\n        //get state.error message base on question key\r\n        let errors = this.state.errors[questionKey];\r\n        //if there is no error => return\r\n        if (!errors || errors === \"\") return;\r\n        //else display error message\r\n        return (\r\n            <div style={DangerText}>\r\n                {\r\n                    <div key={questionKey}>\r\n                        <span>{errors}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle redirect to login page\r\n     */\r\n    handleLogin() {\r\n        this.setState({\r\n            redirectLoginPage: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectLoginPage) {\r\n            return <Redirect push={true} to={this.props.LoginRedirectLink} />\r\n        }\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => { e.preventDefault(); this.props.OnRegister(this.state) }}>\r\n                        <h3 style={TextCenter}>Sign Up</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"First name\">First name</span>\r\n                            </label>\r\n                            <input name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"First name\" />\r\n                            {this.renderErrorMessage('firstName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Last name\">Last name</span>\r\n                            </label>\r\n                            <input name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Last name\" />\r\n                            {this.renderErrorMessage('lastName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Email address\">Email address</span>\r\n                            </label>\r\n                            <input name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter email\" />\r\n                            {this.renderErrorMessage('email')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Password\">Password</span>\r\n                            </label>\r\n                            <input name=\"password\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter password\" />\r\n                            {this.renderErrorMessage('password')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"repassword\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Re-Password\">Re-Password</span>\r\n                            </label>\r\n                            <input name=\"repassword\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Re-Enter password\" />\r\n                            {this.renderErrorMessage('repassword')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"address\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Address\">Address</span>\r\n                            </label>\r\n                            <input name=\"address\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter address\" />\r\n                            {this.renderErrorMessage('address')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"phone\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Phone\">Phone</span>\r\n                            </label>\r\n                            <input name=\"phone\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter phone Number\" />\r\n                            {this.renderErrorMessage('phone')}\r\n                        </div>\r\n\r\n                        <button style={Margin0}\r\n                            disabled={this.state.disableSubmitButton}\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary btn-block\">\r\n                            Sign Up\r\n                        </button>\r\n                        <p className=\"forgot-password text-right\">\r\n                            Already registered <LinkA onClick={this.handleLogin}>Login?</LinkA>\r\n                        </p>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","export class KeyValue{\r\n    constructor(obj?: KeyValue){\r\n        this.key = obj ? obj.key : null;\r\n        this.value = obj ? obj.value : null;\r\n    }\r\n    key: any;\r\n    value: any;\r\n}","import { KeyValue } from \"../class/common/keyValue\"\r\n\r\nexport class Config {\r\n    apiServiceURL = {\r\n        server: `${process.env.REACT_APP_SERVER_URL}`,\r\n        serverAPI: `${process.env.REACT_APP_SERVER_URL}/api`,\r\n        users: `${process.env.REACT_APP_SERVER_URL}/api/users`,\r\n        login: `${process.env.REACT_APP_SERVER_URL}/api/login`,\r\n        register:`${process.env.REACT_APP_SERVER_URL}/api/register`,\r\n        todo: `${process.env.REACT_APP_SERVER_URL}/api/todos`,\r\n        activities: `${process.env.REACT_APP_SERVER_URL}/api/activities`,\r\n        knowledgeBases: `${process.env.REACT_APP_SERVER_URL}/api/knowledgebases`,\r\n        knowledgeArticles: `${process.env.REACT_APP_SERVER_URL}/api/knowledgearticles`,\r\n        projects: `${process.env.REACT_APP_SERVER_URL}/api/projects`\r\n    }\r\n\r\n    commonMessage = {\r\n        loginError: 'Login error!!!',\r\n        userNotFound: 'User not found!!!',\r\n        signUpError: 'Register error!!!'\r\n    }\r\n\r\n    alertVariants = {\r\n        primary :'primary',\r\n        secondar :'secondary',\r\n        success :'success',\r\n        danger :'danger',\r\n        warning :'warning',\r\n        info :'info',\r\n        light :'light',\r\n        dark :'dark'\r\n    }\r\n\r\n    activityStatus:any = {\r\n        'open': new KeyValue({key: 1, value: 'Open'}),\r\n        'inProgress': new KeyValue({key: 2, value: 'In Progress'}),\r\n        'completed': new KeyValue({key: 3, value: 'Completed'}),\r\n        'onPending': new KeyValue({key: 4, value: 'Pending'}),\r\n        'closed': new KeyValue({key: 5, value: 'Closed'}),\r\n        'cancelled': new KeyValue({key: 6, value: 'Cancelled'})\r\n    }\r\n\r\n    defaultDropDownOptions = {\r\n        all: new KeyValue({key: -1, value: '--All--'}),\r\n        none: new KeyValue({key: 0, value: '--None--'})\r\n    }\r\n\r\n    datetimeFormat = {\r\n        yyyyMMdd: 'yyyy/MM/dd',\r\n        ddMMyyyy: 'dd/mm/yyyy'\r\n    }\r\n\r\n    localStorageKey = {\r\n        appState: \"application_state\"\r\n    }\r\n}","import { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Credentials } from \"../../../interface/Credentials\";\r\nimport { User } from \"../../../class/user\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { JwtResponse } from \"../../../class/common/response-data\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\n/**\r\n * Example class\r\n *\r\n * @export\r\n * @class UserServiceApi\r\n * @extends {Api}\r\n *\r\n * @example\r\n * const axiosConfig = {\r\n *  baseUrl: \"www.domain.com\"\r\n * }\r\n * const api = new UserServiceApi(axiosConfig);\r\n *  */\r\nexport class UserServiceApi {\r\n    config: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor(configs: AxiosRequestConfig) {\r\n        // // this middleware is been called right before the http request is made.\r\n        // this.interceptors.request.use((param: AxiosRequestConfig) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        // // this middleware is been called right before the response is get it by the method that triggers the request\r\n        // this.interceptors.response.use((param: AxiosResponse) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        this.userLogin = this.userLogin.bind(this);\r\n        this.userRegister = this.userRegister.bind(this);\r\n        this.getAllUsers = this.getAllUsers.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n        this.config = new Config();\r\n        this.axiosConfig = configs;\r\n    }\r\n\r\n    public userLogin(credentials: Credentials): Promise<JwtResponse> {\r\n        return commonAPI.post<string, Credentials, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.login, credentials)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            });\r\n    }\r\n\r\n    public userRegister(user: User): Promise<JwtResponse> {\r\n        return commonAPI.post<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.register, user)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public updateUser(user: User): Promise<JwtResponse> {\r\n        return commonAPI.put<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.users, user)\r\n            .then((res)=>{\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public async deleteRecords(objs: User[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.config.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async getAllUsers(): Promise<User[]> {\r\n        try {\r\n            const res: AxiosResponse<User[]> = await commonAPI.get<User, AxiosResponse<User[]>>(this.config.apiServiceURL.users);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public getById(id: number): Promise<User> {\r\n        return commonAPI.get<User, AxiosResponse<User>>(`${this.config.apiServiceURL.users}/${id}`).then(commonAPI.success);\r\n    }\r\n}\r\n","export class User {\r\n    constructor(obj?: any){\r\n        this._id        = (obj && obj._id)?         obj._id : null;\r\n        this.userId     = (obj && obj.userId)?      obj.userId : '';\r\n        this.email      = (obj && obj.email)?       obj.email : '';\r\n        this.password   = (obj && obj.password)?    obj.password : '';\r\n        this.firstName  = (obj && obj.firstName)?   obj.firstName : '';\r\n        this.lastName   = (obj && obj.lastName)?    obj.lastName : '';\r\n        this.phone      = (obj && obj.phone)?       obj.phone : '';\r\n        this.address    = (obj && obj.address)?     obj.address : '';\r\n        this.token      = (obj && obj.token)?       obj.token : '';\r\n    }\r\n    _id: any;\r\n    userId: string;\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phone: string;\r\n    address: string;\r\n    token: string\r\n}","import { User } from \"../../../class/user\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport interface UserProps extends RouteComponentProps<any>{\r\n\r\n}\r\n\r\nexport interface UserStates {\r\n    user: User;\r\n}\r\n\r\nexport const initialUserState : UserStates = {\r\n    user: new User()\r\n}","import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { UserServiceApi } from './User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { User } from '../../../class/user';\r\nimport { UserProps, UserStates, initialUserState } from './UserPropsStates';\r\nimport styled from 'styled-components';\r\nimport { \r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion, DynamicFormStates \r\n} from '../../../share-components/DynamicForm';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n`;\r\n\r\nclass UserComponent extends React.Component<UserProps, UserStates> {\r\n    userService: UserServiceApi;\r\n    formConfig: FormConfig;\r\n    constructor(props: UserProps) {\r\n        super(props);\r\n\r\n        this.state = initialUserState;\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.formConfig = new FormConfig();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let user = await this.userService.getById(this.props.match.params['userId']);\r\n        this.setState({\r\n            user: user\r\n        });\r\n    }\r\n    \r\n    handleSubmit(form: DynamicFormStates) {\r\n        let user = new User(form.listFields);\r\n        console.log(user);\r\n        this.userService.updateUser(user).then((result)=>{\r\n            console.log(result);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    getQuestion(user: User) {\r\n        let questions: QuestionBase<string>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'email',\r\n            label: 'Email',\r\n            value: user.email,\r\n            type: this.formConfig.inputTypeDef.email,\r\n            readonly: true,\r\n            order: 10\r\n        }));\r\n        \r\n        //Add first name text\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'First name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'firstName',\r\n            label: 'First name',\r\n            value: user.firstName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 20\r\n        }));\r\n\r\n        //Add last name text\r\n        validators = {};\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Last name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'lastName',\r\n            label: 'Last name',\r\n            value: user.lastName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 30\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'address',\r\n            label: 'Address',\r\n            value: user.address,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 40\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'phone',\r\n            label: 'Phone',\r\n            value: user.phone,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 50\r\n        }));\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.user);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(UserComponent);","import React from 'react';\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter';\n\n// Define a default UI for filtering\nexport function DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n}) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onClick={e=> e.stopPropagation()}\n            onChange={e => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach(row => {\n            if(row.values[id] !== ''){\n                options.add(row.values[id])\n            }\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onClick={e=> e.stopPropagation()}\n            onChange={e => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nexport function SliderColumnFilter({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n    // Calculate the min and max\n    // using the preFilteredRows\n\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <>\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                value={filterValue || min}\n                onChange={e => {\n                    setFilter(parseInt(e.target.value, 10))\n                }}\n            />\n            <button onClick={() => setFilter(undefined)}>Off</button>\n        </>\n    )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nexport function NumberRangeColumnFilter({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach(row => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <input\n                value={filterValue[0] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n      to\n            <input\n                value={filterValue[1] || ''}\n                type=\"number\"\n                onChange={e => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nexport function fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Define a custom filter filter function!\nexport function filterGreaterThan(rows, id, filterValue) {\n    return rows.filter(row => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n//Add selection\r\nexport const IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n\r\n        React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <>\r\n                <Checkbox type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n            </>\r\n        );\r\n    }\r\n);","import React from 'react'\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport LastPageIcon from '@material-ui/icons/LastPage'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}))\r\n\r\nconst TablePaginationActions = props => {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const { count, page, rowsPerPage, onChangePage } = props\r\n\r\n  const handleFirstPageButtonClick = event => {\r\n    onChangePage(event, 0)\r\n  }\r\n\r\n  const handleBackButtonClick = event => {\r\n    onChangePage(event, page - 1)\r\n  }\r\n\r\n  const handleNextButtonClick = event => {\r\n    onChangePage(event, page + 1)\r\n  }\r\n\r\n  const handleLastPageButtonClick = event => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default TablePaginationActions\r\n","import React from 'react'\r\n\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing(7),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: 200,\r\n    },\r\n  },\r\n}))\r\n\r\nconst GlobalFilter = ({\r\n  preGlobalFilteredRows,\r\n  globalFilter = '',\r\n  setGlobalFilter,\r\n}) => {\r\n  const classes = useStyles()\r\n  const count = preGlobalFilteredRows.length\r\n\r\n  // Global filter only works with pagination from the first page.\r\n  // This may not be a problem for server side pagination when\r\n  // only the current page is downloaded.\r\n\r\n  return (\r\n    <div className={classes.search}>\r\n      <div className={classes.searchIcon}>\r\n        <SearchIcon />\r\n      </div>\r\n      <InputBase\r\n        value={globalFilter || ''}\r\n        onChange={e => {\r\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        classes={{\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        }}\r\n        inputProps={{ 'aria-label': 'search' }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nGlobalFilter.propTypes = {\r\n  preGlobalFilteredRows: PropTypes.array.isRequired,\r\n  setGlobalFilter: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GlobalFilter\r\n","import React from 'react'\n\nimport clsx from 'clsx'\nimport {\n\tSelect, IconButton, Toolbar, Typography,\n\tTooltip, FormControl, InputLabel, Input, MenuItem,\n\tCheckbox, ListItemText\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types'\nimport GlobalFilter from '../Filter/GlobalFilter';\n\nconst useToolbarStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t\tmaxWidth: 300,\n\t},\n\troot: {\n\t\tpaddingLeft: theme.spacing(2),\n\t\tpaddingRight: theme.spacing(1),\n\t},\n\thighlight:\n\t\ttheme.palette.type === 'light'\n\t\t\t? {\n\t\t\t\tcolor: theme.palette.secondary.main,\n\t\t\t\tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\n\t\t\t}\n\t\t\t: {\n\t\t\t\tcolor: theme.palette.text.primary,\n\t\t\t\tbackgroundColor: theme.palette.secondary.dark,\n\t\t\t},\n\ttitle: {\n\t\tflex: '1 1 100%',\n\t},\n}))\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n\tPaperProps: {\n\t\tstyle: {\n\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n\t\t\twidth: 250,\n\t\t},\n\t},\n};\n\nconst TableToolbar = props => {\n\tconst classes = useToolbarStyles()\n\tconst {\n\t\tnumSelected,\n\t\tdeleteRecordHandler,\n\t\taddRecordHandler,\n\t\tpreGlobalFilteredRows,\n\t\tsetGlobalFilter,\n\t\tglobalFilter = '',\n\t\tTableName = '',\n\t\tallColumns,\n\t\tshowAddRecord\n\t} = props\n\treturn (\n\t\t<Toolbar\n\t\t\tclassName={clsx(classes.root, {\n\t\t\t\t[classes.highlight]: numSelected > 0,\n\t\t\t})}\n\t\t>\n\t\t\t{\n\t\t\t\tshowAddRecord ?\n\t\t\t\t\t(\n\t\t\t\t\t\t<Tooltip title=\"Add\">\n\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={addRecordHandler}>\n\t\t\t\t\t\t\t\t<AddIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div></div>\n\t\t\t\t\t)\n\t\t\t}\n\n\t\t\t{numSelected > 0 ? (\n\t\t\t\t<Typography\n\t\t\t\t\tclassName={classes.title}\n\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\tvariant=\"subtitle1\"\n\t\t\t\t>\n\t\t\t\t\t{numSelected} selected\n\t\t\t\t</Typography>\n\t\t\t) : (\n\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTableName\n\t\t\t\t\t\t}\n\t\t\t\t\t</Typography>\n\t\t\t\t)}\n\n\t\t\t{numSelected > 0 ? (\n\t\t\t\t<Tooltip title=\"Delete\">\n\t\t\t\t\t<IconButton aria-label=\"delete\" onClick={deleteRecordHandler}>\n\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Tooltip>\n\t\t\t) : (\n\t\t\t\t\t<GlobalFilter\n\t\t\t\t\t\tpreGlobalFilteredRows={preGlobalFilteredRows}\n\t\t\t\t\t\tglobalFilter={globalFilter}\n\t\t\t\t\t\tsetGlobalFilter={setGlobalFilter}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t<InputLabel id=\"columns-visible-label\">Columns</InputLabel>\n\t\t\t\t<Select\n\t\t\t\t\tlabelId=\"columns-visible-label\"\n\t\t\t\t\tid=\"columns-visible-select\"\n\t\t\t\t\tmultiple\n\t\t\t\t\tvalue={[\"Select columns\"]}\n\t\t\t\t\tinput={<Input />}\n\t\t\t\t\trenderValue={(selected) => selected.join(', ')}\n\t\t\t\t\tMenuProps={MenuProps}\n\t\t\t\t>\n\t\t\t\t\t{allColumns.map(column => (\n\t\t\t\t\t\t<MenuItem key={column.id} value={column.id}>\n\t\t\t\t\t\t\t<Checkbox {...column.getToggleHiddenProps()} />\n\t\t\t\t\t\t\t<ListItemText primary={column.id} />\n\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t))}\n\t\t\t\t</Select>\n\t\t\t</FormControl>\n\t\t</Toolbar>\n\t)\n}\n\nTableToolbar.propTypes = {\n\tnumSelected: PropTypes.number.isRequired,\n\taddRecordHandler: PropTypes.func.isRequired,\n\tdeleteRecordHandler: PropTypes.func.isRequired,\n\tsetGlobalFilter: PropTypes.func.isRequired,\n\tpreGlobalFilteredRows: PropTypes.array.isRequired,\n\tallColumns: PropTypes.array.isRequired\n}\n\nexport default TableToolbar\n","import React from 'react';\nimport {\n    useTable,\n    usePagination,\n    useFilters,\n    useGlobalFilter,\n    useRowSelect,\n    useSortBy\n} from \"react-table\";\nimport * as filter from './Filter/Filter';\nimport { IndeterminateCheckbox } from './Selection/RowSelection';\nimport PropTypes from 'prop-types';\nimport { TableContainer, TableHead, TableRow, TableCell, TableBody, TableFooter, TablePagination, TableSortLabel } from '@material-ui/core';\nimport MaUTable from '@material-ui/core/Table'\nimport TablePaginationActions from './Pagination/TablePaginationActions';\nimport TableToolbar from './Toolbar/TableToolbar';\nimport './Table.scss';\n\n// Our table component\nexport function Table({\n    columns,\n    data,\n    fetchData,\n    pageCount: controlledPageCount,\n    skipPageReset = true,\n    deleteRecordHandler = (selectedId) => { },\n    addRecordHandler = () => { },\n    TableName = '',\n    showSelection = true,\n    showAddRecord = true\n}) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: filter.fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter(row => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                            .toLowerCase()\n                            .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        []\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: filter.DefaultColumnFilter,\n        }),\n        []\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page,\n        gotoPage,\n        setPageSize,\n        allColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n        state: { pageIndex, pageSize, selectedRowIds, globalFilter },\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n            autoResetPage: !skipPageReset,  //reset page after change (filter)\n            pageCount: controlledPageCount,\n            initialState: {\n                hiddenColumns: ['createdBy', 'createdDate', 'updatedBy', 'updatedDate']\n            }\n            // manualPagination: true, // Tell the usePagination\n        },\n        useGlobalFilter,\n        useFilters,\n        useSortBy,\n        usePagination,\n        useRowSelect,\n        hooks => {\n            hooks.allColumns.push(columns => {\n                if (showSelection) {\n                    columns.unshift({\n                        id: \"selection\",\n                        // The header can use the table's getToggleAllRowsSelectedProps method\n                        // to render a checkbox\n                        Header: ({ getToggleAllRowsSelectedProps }) => (\n                            <div style={{ textAlign: \"center\" }}>\n                                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n                            </div>\n                        ),\n                        // The cell can use the individual row's getToggleRowSelectedProps method\n                        // to the render a checkbox\n                        Cell: ({ row }) => (\n                            <div style={{ textAlign: \"center\" }}>\n                                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                            </div>\n                        )\n                    });\n                }\n                return columns\n            });\n        }\n    )\n\n    // Listen for changes in pagination and use the state to fetch our new data\n    React.useEffect(() => {\n        fetchData({ pageIndex, pageSize })\n    }, [fetchData, pageIndex, pageSize])\n\n    //Change row per page in pagination\n    const handleChangeRowsPerPage = event => {\n        setPageSize(Number(event.target.value))\n    }\n    //Change the selected page\n    const handleChangePage = (event, newPage) => {\n        gotoPage(newPage)\n    }\n    //pre-do to get selected record\n    const preDeleteRecordHandler = () => {\n        //get index of selected record\n        let selectedRowIndex = Object.keys(selectedRowIds).map(x => parseInt(x, 10));\n        //filter record\n        let selectedRecord = data.filter((_, i) => {\n            return selectedRowIndex.includes(i)\n        });\n        //send the record to handle page\n        deleteRecordHandler(selectedRecord);\n    }\n\n    return (\n        <TableContainer className=\"ReactTable\">\n            <TableToolbar\n                showAddRecord={showAddRecord}\n                numSelected={Object.keys(selectedRowIds).length}\n                deleteRecordHandler={preDeleteRecordHandler}\n                addRecordHandler={addRecordHandler}\n                TableName={TableName}\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                setGlobalFilter={setGlobalFilter}\n                globalFilter={globalFilter}\n                allColumns={allColumns}\n            />\n            <MaUTable {...getTableProps()} className=\"react-custom-table\">\n                <TableHead>\n                    {headerGroups.map(headerGroup => (\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <TableCell\n                                    {...(column.id === 'selection'\n                                        ? column.getHeaderProps()\n                                        : column.getHeaderProps(column.getSortByToggleProps()))}\n                                >\n                                    {column.render('Header')}\n                                    {column.id !== 'selection' ? (\n                                        <TableSortLabel\n                                            active={column.isSorted}\n                                            // react-table has a unsorted state which is not treated here\n                                            direction={column.isSortedDesc ? 'desc' : 'asc'}\n                                        />\n                                    ) : null}\n                                    <div className=\"table-header-filter\">\n                                        {(column.canFilter && !column.columnDisableGlobalFilter) ? column.render('Filter') : null}\n                                    </div>\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <TableRow {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return (\n                                        <TableCell {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n                <TableFooter className=\"pagination\">\n                    <TableRow>\n                        <TablePagination\n                            // rowsPerPageOptions={[\n                            //     5,\n                            //     10,\n                            //     25,\n                            //     50,\n                            //     100,\n                            //     { label: 'All', value: controlledPageCount },\n                            // ]}\n                            colSpan={10000}\n                            count={controlledPageCount}\n                            rowsPerPage={pageSize}\n                            page={pageIndex}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            ActionsComponent={TablePaginationActions}\n                        />\n                    </TableRow>\n                </TableFooter>\n            </MaUTable>\n        </TableContainer>\n    )\n}\n\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    data: PropTypes.array.isRequired,\n    fetchData: PropTypes.func.isRequired,\n    pageCount: PropTypes.number.isRequired,\n    deleteRecordHandler: PropTypes.func.isRequired\n}","import React, { Component } from 'react';\r\nimport { User } from '../../../class/user';\r\nimport { connect } from 'react-redux';\r\nimport { UserServiceApi } from '../../../components/Management/Users/User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport UserComponent from '../../../components/Management/Users/User';\r\nimport { storeUser } from '../../store/user/actions';\r\nimport { AppState } from '../../store';\r\nimport styled from 'styled-components';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface UserContainerProps {\r\n    user: any,\r\n    storeUser: typeof storeUser\r\n}\r\ninterface UserContainerStates {\r\n    allUser: User[],\r\n    userList: User[],\r\n    isLoading: boolean,\r\n    skipPageReset: boolean,\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nclass UserContainer extends Component<UserContainerProps, UserContainerStates>{\r\n    userService: UserServiceApi;\r\n    constructor(props: UserContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allUser: [],\r\n            userList: [],\r\n            isLoading: false,\r\n            skipPageReset: false\r\n        }\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.getUserByFilter = this.getUserByFilter.bind(this);\r\n        this.deleteUserHandler = this.deleteUserHandler.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let users = await this.userService.getAllUsers();\r\n        this.props.storeUser(users);\r\n        this.setState({ allUser: users });\r\n    }\r\n\r\n    async getUserByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let users = this.state.allUser;\r\n        if (users.length === 0) {\r\n            users = await this.userService.getAllUsers();\r\n            this.props.storeUser(users);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allUser: users,\r\n            userList: users.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    async deleteUserHandler(records: User[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.userService.deleteRecords(records);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`users/${row.original._id}`}>{row.original.email}</Link>)\r\n            },\r\n            {\r\n                Header: 'First Name',\r\n                accessor: 'firstName'\r\n            },\r\n            {\r\n                Header: 'Last Name',\r\n                accessor: 'lastName'\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone'\r\n            },\r\n            {\r\n                Header: 'Address',\r\n                accessor: 'address'\r\n            }];\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/users'>\r\n                    <ContainerDiv className=\"user-list\">\r\n                        <Table columns={columns}\r\n                            data={this.state.allUser}\r\n                            pageCount={this.state.allUser.length}\r\n                            fetchData={() => { }}\r\n                            deleteRecordHandler={this.deleteUserHandler}\r\n                            TableName=\"Users\"\r\n                        />\r\n                    </ContainerDiv>\r\n                </Route>\r\n                <Route path={`/users/:userId`}>\r\n                    <UserComponent></UserComponent>\r\n                </Route>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        userList: store.user\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(UserContainer)","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { Comment } from \"../../../share-components/CommentLog\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ActivityService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Activity[]> {\r\n        try {\r\n            const res: AxiosResponse<Activity[]> = await commonAPI.get(this.configs.apiServiceURL.activities);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Activity> {\r\n        try {\r\n            const res: AxiosResponse<Activity> = await commonAPI.get(`${this.configs.apiServiceURL.activities}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Activity[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"../share-components/CommentLog\";\r\nexport class Project {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.manager = obj ? obj.manager : new User();\r\n        this.members = obj ? obj.members : [];\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    manager: User;\r\n    members: any[];\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { ODateRange } from \"../share-components/Variables/DateRange\";\r\nimport { KeyValue } from \"./common/keyValue\";\r\nimport { User } from \"./user\";\r\nimport { Comment } from \"../share-components/CommentLog\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class Activity {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.description = obj ? obj.description : '';\r\n        this.implemetationPlan = obj ? obj.implemetationPlan : '';\r\n        this.project = obj ? obj.project : new Project();\r\n        this.planDate = obj ? obj.planDate : new ODateRange();\r\n        this.actualDate = obj ? obj.actualDate : new ODateRange();\r\n        this.status = obj ? obj.status : new KeyValue();\r\n        this.assignedTo = obj ? obj.assignedTo : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    description: string;\r\n    implemetationPlan: string;\r\n    project: Project;\r\n    planDate: ODateRange;\r\n    actualDate: ODateRange;\r\n    status: KeyValue;\r\n    assignedTo: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ActivityProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ActivityStates {\r\n    errors:{[s:string]: string[]},\r\n    activity: Activity,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialActivityStates: ActivityStates = {\r\n    errors: {},\r\n    activity: new Activity(),\r\n    isEditRecord: false\r\n}","import { User } from \"../../class/user\";\r\n\r\nexport class Comment {\r\n    constructor(obj?: any){\r\n        this.target = obj ? obj.target : null;\r\n        this.comment = obj ? obj.comment : null;\r\n        this.userComment = obj ? obj.userComment : null;\r\n        this.commentDate = obj ? obj.commentDate : null;\r\n    }\r\n    target: string; //target Object's _id\r\n    comment: string;\r\n    userComment: User;\r\n    commentDate: string;\r\n}","import { Comment } from \"./comment\";\r\n\r\nexport interface CommentProps {\r\n    comments: Comment[],\r\n    commentedUser: any,\r\n    onSubmitComment: (form: CommentStates) => void\r\n}\r\nexport interface CommentStates {\r\n    comments: Comment[],\r\n    newComment: string\r\n}\r\nexport const initialCommentStates: CommentStates = {\r\n    comments: [],\r\n    newComment: ''\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Comment } from './comment';\r\nimport { CommentStates, CommentProps, initialCommentStates } from './CommentLogPropsStates';\r\n\r\nconst LeftDiv = styled.div`\r\n    float: left;\r\n`;\r\nconst RightDiv = styled.div`\r\n    float: right;\r\n`;\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\nconst ButtonCustom = styled.button`\r\n    float: right;\r\n    margin-top: 10px;\r\n    border-radius: .25rem;\r\n    border: 0.5px solid #c9c9c9;\r\n    width: 50px;\r\n    height: 28px;\r\n    cursor: pointer;\r\n`;\r\nconst ContainerInlineBlock = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    border-bottom: 0.5px solid gray;\r\n    padding-bottom: 5px;\r\n`;\r\nconst CommentDiv = styled.div`\r\n    border: 0.5px solid gray;\r\n    border-radius: .25rem;\r\n    padding: 15px;\r\n    margin-top: 10px;\r\n`;\r\nexport class CommentLog extends React.Component<CommentProps, CommentStates> {\r\n    constructor(props: CommentProps) {\r\n        super(props);\r\n\r\n        this.state = initialCommentStates;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentTitle = this.renderCommentTitle.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if(this.props.comments){\r\n            this.setState({\r\n                comments: this.props.comments\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle event textarea change data\r\n     * @param e textarea changed\r\n     */\r\n    handleChange(e: any) {\r\n        this.setState({\r\n            newComment: e.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle submit comment\r\n     */\r\n    handleSubmitComment() {\r\n        //create new Comment object base on the user's input\r\n        let current = new Date();\r\n        let comments = this.state.comments;\r\n        let newComment = new Comment({\r\n            userComment: this.props.commentedUser,\r\n            comment: this.state.newComment,\r\n            commentDate: current.toUTCString()\r\n        });\r\n        comments.push(newComment);\r\n        this.setState({\r\n            comments: comments,\r\n            newComment: ''\r\n        }, () => {\r\n            this.props.onSubmitComment(this.state); //callback\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render Comment title\r\n     */\r\n    renderCommentTitle(){\r\n        let result;\r\n        if(this.state.comments.length > 0){\r\n            result = (\r\n                <div>Activities ({this.state.comments.length}):</div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * in case of html string => need this function to convert to html dom\r\n     * @param comment comment\r\n     */\r\n    renderCommentRawHTML(comment: string){\r\n        return (\r\n            <div dangerouslySetInnerHTML={{__html: comment}}></div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <div className=\"comment-new\">\r\n                    <div>Note <textarea value={this.state.newComment} onChange={this.handleChange} className=\"form-control\" rows={2}></textarea></div>\r\n                    <ContainerInlineBlock>\r\n                        <ButtonCustom onClick={this.handleSubmitComment}>Post</ButtonCustom>\r\n                    </ContainerInlineBlock>\r\n                </div>\r\n                <div className=\"comment-list\">\r\n                    {\r\n                        this.renderCommentTitle()\r\n                    }\r\n                    {\r\n                        this.state.comments.slice(0).reverse().map((com, ind) => (\r\n                            <CommentDiv className=\"comment\" key={ind}>\r\n                                <ContainerInlineBlock className=\"comment-header\">\r\n                                    <LeftDiv className=\"comment-user\">\r\n                                        {\r\n                                        `${com.userComment.firstName} ${com.userComment.lastName}`\r\n                                        }\r\n                                    </LeftDiv>\r\n                                    <RightDiv className=\"comment-date\">\r\n                                        {\r\n                                            com.commentDate\r\n                                        }\r\n                                    </RightDiv>\r\n                                </ContainerInlineBlock>\r\n                                <div className=\"comment-content\">\r\n                                    {\r\n                                        this.renderCommentRawHTML(com.comment)\r\n                                    }\r\n                                </div>\r\n                            </CommentDiv>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","export class CommonService {\r\n\r\n    /**\r\n     * convert date type to string base on format\r\n     * @param date date\r\n     * @param format format ex: yyyyMMdd or yyyyMMdd HHmmmSS ..etc\r\n     */\r\n    convertDateToStringByFormat(date: Date, format: string): string {\r\n        let result: string = '';\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth() + 1;\r\n        var day = date.getDate();\r\n        var hour = date.getHours();\r\n        var minute = date.getMinutes();\r\n        var second = date.getSeconds();\r\n        result = format.replace('yyyy', year.toString())\r\n            .replace('MM', this.fixedFormatTwoDigit(month))\r\n            .replace('dd', this.fixedFormatTwoDigit(day))\r\n            .replace('HH', this.fixedFormatTwoDigit(hour))\r\n            .replace('mmm', this.fixedFormatTwoDigit(minute))\r\n            .replace('SS', this.fixedFormatTwoDigit(second));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * return the number with two fixed digits\r\n     * @param number source number\r\n     */\r\n    fixedFormatTwoDigit(number: number): string {\r\n        let result: string = '';\r\n        result = number < 10 ? ('0' + number.toString()) : number.toString();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A short demo for compare two object. easiest way to compare object is JSON.stringify(obj)\r\n     * @param object1 object 1\r\n     * @param object2 object 2\r\n     */\r\n    compareTwoObject<T>(object1: T, object2: T): boolean {\r\n        let result: boolean = false;\r\n        //step 1: convert two object to {[s: string] : any} object\r\n        let obj1: { [s: string]: any } = {};\r\n        let obj2: { [s: string]: any } = {};\r\n        for (let [key, value] of Object.entries(object1)) {\r\n            obj1[key] = value;\r\n        }\r\n        for (let [key, value] of Object.entries(object2)) {\r\n            obj2[key] = value;\r\n        }\r\n        //step 2: loop through all properties to check out\r\n        for (let p in obj1) {\r\n            if (JSON.stringify(obj1[p]) !== JSON.stringify(obj2[p])) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","import React from 'react';\r\nimport './Activity.scss';\r\nimport { ActivityProps, ActivityStates, initialActivityStates } from './ActivityPropsState';\r\nimport styled from 'styled-components';\r\nimport { ActivityService } from './Activity.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, DropdownQuestion, DateRangeQuestion, ReferenceQuestion, TextAreaQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Activity } from '../../../class/activity';\r\nimport { KeyValue } from '../../../class/common/keyValue';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentStates, Comment, CommentLog } from '../../../share-components/CommentLog';\r\nimport { CommonService } from '../../../service/common.service';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ActivityComponent extends React.Component<ActivityProps, ActivityStates> {\r\n    config: Config;\r\n    activityService: ActivityService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityProps) {\r\n        super(props);\r\n\r\n        this.state = initialActivityStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getActivityUpdated = this.getActivityUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let activityId = this.props.match.params['activityId'];\r\n        if (activityId !== \"createnew\") {\r\n            let activity = await this.activityService.getById(this.props.match.params['activityId']);\r\n            this.setState({\r\n                activity: activity,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit activity\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get activity object from dynamic form\r\n        let activity = this.convertFormToObject(form);\r\n        if(activity.project){\r\n            delete activity.project.comments;\r\n            delete activity.project.members;\r\n        }\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.activityService.update(activity);\r\n        }\r\n        else {\r\n            res = await this.activityService.createNew(activity);\r\n        }\r\n        //find out which part is updated\r\n        let activityChanged = this.getActivityUpdated(activity);\r\n        if (activityChanged !== \"\") {\r\n            let activityId = this.state.isEditRecord ? activity._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: activityId,\r\n                comment: activityChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            activity.comments.push(nComment);\r\n            //update comment\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            activity: activity\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted activity with current activity to find out which parts are updated\r\n     * use to show in activity log\r\n     * @param activity new activity\r\n     */\r\n    getActivityUpdated(activity: Activity) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.activity) !== JSON.stringify(activity)) {\r\n            if (JSON.stringify(this.state.activity.description) !== JSON.stringify(activity.description)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Description:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.description\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.implemetationPlan) !== JSON.stringify(activity.implemetationPlan)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Implemetation Plan:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.implemetationPlan\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.project) !== JSON.stringify(activity.project)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Project:</div>\r\n                                <div>Project</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(activity.project && activity.project._id) ?\r\n                                        `${activity.project.name}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.status) !== JSON.stringify(activity.status)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Status:</div>\r\n                                <div>Status</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.status ?\r\n                                        `${activity.status.value}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.assignedTo) !== JSON.stringify(activity.assignedTo)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Assigned to:</div>\r\n                                <div>Assigned To</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(activity.assignedTo && activity.assignedTo._id) ?\r\n                                        `${activity.assignedTo.firstName} ${activity.assignedTo.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.planDate) !== JSON.stringify(activity.planDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Plan date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.planDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.planDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.actualDate) !== JSON.stringify(activity.actualDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Actual date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.actualDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.actualDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to activity\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Activity {\r\n        let currentAct = this.state.activity;\r\n        let formAct = new Activity(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let activity = this.state.activity;\r\n        activity.comments = form.comments;\r\n        activity.comments.forEach((val) => {\r\n            val.target = activity._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        activity: activity\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate activity questions\r\n     * @param activity activity object\r\n     */\r\n    getQuestion(activity: Activity) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'description',\r\n            label: 'Description',\r\n            value: activity.description,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 10\r\n        }));\r\n\r\n        //Add implementation plan text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Implementation plan is required.'\r\n        };\r\n        questions.push(new TextAreaQuestion({\r\n            key: 'implemetationPlan',\r\n            label: 'Implemetation Plan',\r\n            value: activity.implemetationPlan,\r\n            validators: validators,\r\n            rows: 5,\r\n            order: 20\r\n        }));\r\n\r\n        //Add project to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'project',\r\n            label: 'Project',\r\n            value: activity.project,\r\n            serverUrl: this.config.apiServiceURL.projects,\r\n            displayField: 'name',\r\n            listFields: ['name'],\r\n            searchBar: true,\r\n            order: 30\r\n        }));\r\n\r\n        let options: KeyValue[] = [];\r\n        Object.keys(this.config.activityStatus).forEach((opt, ind) => {\r\n            options.push(this.config.activityStatus[opt]);\r\n        });\r\n        options = options.sort((a, b) => a.key - b.key);\r\n        options.unshift(this.config.defaultDropDownOptions.none);   //default value\r\n        //Add Status text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Status is required.'\r\n        };\r\n        questions.push(new DropdownQuestion({\r\n            key: 'status',\r\n            label: 'Status',\r\n            value: activity.status,\r\n            validators: validators,\r\n            options: options,\r\n            searchBar: true,\r\n            order: 50\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'assignedTo',\r\n            label: 'Assigned to',\r\n            value: activity.assignedTo,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 60\r\n        }));\r\n\r\n\r\n        //Add plan date\r\n        let dateRange = activity.planDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Plan date is required.'\r\n        };\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'planDate',\r\n            label: 'Plan',\r\n            value: dateRange,\r\n            validators: validators,\r\n            order: 70\r\n        }));\r\n\r\n        //Add actual date\r\n        dateRange = activity.actualDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'actualDate',\r\n            label: 'Actual',\r\n            value: dateRange,\r\n            order: 80\r\n        }));\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog commentedUser={this.props.loginUser}\r\n                        comments={this.state.activity.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.activity);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ActivityComponent);","import './ActivityContainer.scss';\r\nimport React, { Component } from 'react';\r\nimport { Activity } from '../../../class/activity';\r\nimport { ActivityService } from '../../../components/Management/Activities/Activity.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ActivityComponent from '../../../components/Management/Activities/Activity';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeActivities } from '../../store/activity/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\nimport { SelectColumnFilter } from '../../../share-components/Table/Filter/Filter';\r\n\r\ninterface ActivityContainerProps {\r\n    user: any,\r\n    storeActivities: typeof storeActivities\r\n}\r\ninterface ActivityContainerStates {\r\n    allActivity: Activity[],\r\n    activityList: Activity[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ActivityContainer extends Component<ActivityContainerProps, ActivityContainerStates> {\r\n    activityService: ActivityService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allActivity: [],\r\n            activityList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getActivityByFilter = this.getActivityByFilter.bind(this);\r\n        this.deleteActivityHandler = this.deleteActivityHandler.bind(this);\r\n        this.addActivityHandler = this.addActivityHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let activities = await this.activityService.getAllData();\r\n        this.props.storeActivities(activities);\r\n        this.setState({ allActivity: activities });\r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getActivityByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let activities = this.state.allActivity;\r\n        if (activities.length === 0) {\r\n            activities = await this.activityService.getAllData();\r\n            this.props.storeActivities(activities);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allActivity: activities,\r\n            activityList: activities.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete activity\r\n     * @param records deleted records\r\n     */\r\n    async deleteActivityHandler(records: Activity[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.activityService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addActivityHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/activities/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Description',\r\n                id: 'description',\r\n                accessor: 'description',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`activities/${row.original._id}`}>{row.original.description}</Link>)\r\n            },\r\n            {\r\n                Header: 'Implementation Plan',\r\n                id: 'implemetationPlan',\r\n                accessor: 'implemetationPlan',\r\n            },\r\n            {\r\n                Header: 'Project',\r\n                id: 'project',\r\n                accessor: (row: Activity) => row.project ? `${row.project.name}` : ''\r\n            },\r\n            {\r\n                Header: 'Plan date',\r\n                id: 'planDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'planStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.startDate) {\r\n                                let accessor = new Date(row.planDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'planEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.endDate) {\r\n                                let accessor = new Date(row.planDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Actual date',\r\n                id: 'actualDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'actualStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.startDate) {\r\n                                let accessor = new Date(row.actualDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'actualEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.endDate) {\r\n                                let accessor = new Date(row.actualDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Status',\r\n                id: 'status',\r\n                // disableFilters: true,\r\n                Filter: SelectColumnFilter,\r\n                filter: 'includes',\r\n                accessor: (row: Activity) => {\r\n                    let result = '';\r\n                    if (row.status) {\r\n                        result = row.status.value\r\n                    }\r\n                    return result;\r\n                },\r\n            },\r\n            {\r\n                Header: 'Assigned to',\r\n                id: 'assignedTo',\r\n                accessor: (row: Activity) => row.assignedTo ? `${row.assignedTo.firstName} ${row.assignedTo.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/activities\">\r\n                        <ContainerDiv className=\"activity-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.allActivity}\r\n                                pageCount={this.state.allActivity.length}\r\n                                fetchData={() => { }}\r\n                                deleteRecordHandler={this.deleteActivityHandler}\r\n                                addRecordHandler={this.addActivityHandler}\r\n                                TableName=\"Activities\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/activities/:activityId`}>\r\n                        <ActivityComponent loginUser={this.props.user.currentUser}></ActivityComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        activityList: store.activities\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeActivities\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ActivityContainer)","import { REMOVE_ACTIVITIES, STORE_ACTIVITIES } from \"./types\";\r\nimport { Activity } from \"../../../class/activity\";\r\n\r\nexport function storeActivities(acts: Activity[]) {\r\n  return {\r\n    type: STORE_ACTIVITIES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeActivities(timestamp: number) {\r\n  return {\r\n    type: REMOVE_ACTIVITIES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Activity } from \"../../../class/activity\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_ACTIVITIES = \"STORE_ACTIVITIES\";\r\nexport const REMOVE_ACTIVITIES = \"REMOVE_ACTIVITIES\";\r\n\r\ninterface StoreActivitiesAction {\r\n  type: typeof STORE_ACTIVITIES;\r\n  payload: Activity[];\r\n}\r\n\r\ninterface RemoveActivitiesAction {\r\n  type: typeof REMOVE_ACTIVITIES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ActivityActionTypes = StoreActivitiesAction | RemoveActivitiesAction;\r\n","export interface LoginProps {\r\n\tOnLogin: (form:LoginState) => void,\r\n\tForgotPasswordRedirectLink: string,\r\n\tRegisterPageRedirectLink: string\r\n}\r\n\r\nexport type LoginState = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\tredirectForgotPassword: boolean,\r\n\tredirectRegisterPage: boolean\r\n}\r\n\r\nexport const initialLoginState: LoginState = {\r\n\temail: '',\r\n\tpassword: '',\r\n\trememberMe: false,\r\n\tdisableSubmitButton: true,\r\n\tredirectForgotPassword: false,\r\n\tredirectRegisterPage: false\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { LoginProps, LoginState, initialLoginState } from \"./LoginPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Container = styled.div`\r\n            background-color: #232323;\r\n            padding-top: 30px;\r\n            padding-bottom: 20px;\r\n        `;\r\nconst LoginDiv = styled.div`\r\n            width: 400px;\r\n            margin: auto;\r\n            background-color: #e9ecef;\r\n            padding: 40px;\r\n            border-radius: 15px;\r\n        `;\r\nconst LinkDiv = styled.div`\r\n            margin-top: 15px;\r\n        `;\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class Login extends Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = initialLoginState;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeByClick = this.handleChangeByClick.bind(this);\r\n        this.handleForgotPassowrd = this.handleForgotPassowrd.bind(this);\r\n        this.handleRegisterPage = this.handleRegisterPage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle change form's fields\r\n     * @param event change event\r\n     */\r\n    handleChange(event: any) {\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.value\r\n        }, ()=>{\r\n            let disabled = this.state.email !== '' && this.state.password !== '' ? false : true;\r\n            this.setState({\r\n                disableSubmitButton: disabled\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle state change by click\r\n     * @param event click event\r\n     */\r\n    handleChangeByClick(event: any){\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.checked\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle forgot password click link\r\n     */\r\n    handleForgotPassowrd(){\r\n        this.setState({\r\n            redirectForgotPassword: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle click register page\r\n     */\r\n    handleRegisterPage(){\r\n        this.setState({\r\n            redirectRegisterPage: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //redirect to forgot password page\r\n        if(this.state.redirectForgotPassword){\r\n            return <Redirect push={true} to={this.props.ForgotPasswordRedirectLink} />\r\n        }\r\n        //redirect to register page\r\n        if(this.state.redirectRegisterPage){\r\n            return <Redirect push={true} to={this.props.RegisterPageRedirectLink}/>\r\n        }\r\n        //load login form\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => {e.preventDefault(); this.props.OnLogin(this.state)}}>\r\n                        <h3 style={TextCenter}>Login</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Email address</strong></label>\r\n                            <input name=\"email\" \r\n                                type=\"email\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter email\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Password</strong></label>\r\n                            <input name=\"password\" \r\n                                type=\"password\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter password\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"custom-control custom-checkbox\">\r\n                                <input name=\"rememberMe\"\r\n                                    type=\"checkbox\" \r\n                                    className=\"custom-control-input\" \r\n                                    onClick={this.handleChangeByClick}\r\n                                    id=\"customCheck1\" />\r\n                                <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                                    <strong>Remember me</strong>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <input style={Margin0} \r\n                            type=\"submit\" \r\n                            value=\"Submit\" \r\n                            className=\"btn btn-primary btn-block\" \r\n                            disabled={this.state.disableSubmitButton}\r\n                            />                        \r\n                        <LinkDiv>\r\n                            <p className=\"float-left\">\r\n                                <LinkA className=\"App-link\" onClick={this.handleRegisterPage}>Sign Up</LinkA>\r\n                            </p>\r\n                            <p className=\"float-right\">\r\n                                Forgot <LinkA onClick={this.handleForgotPassowrd}>password?</LinkA>\r\n                            </p>\r\n                        </LinkDiv>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { Comment } from \"../../../share-components/CommentLog\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeBaseService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeBase[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeBases);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeBase> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeBases}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeBase[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeBases}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"../share-components/CommentLog\";\r\nexport class KnowledgeBase {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.owner = obj ? obj.owner : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    owner: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeBaseProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeBaseStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeBase: KnowledgeBase,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeBaseStates: KnowledgeBaseStates = {\r\n    errors: {},\r\n    knowledgeBase: new KnowledgeBase(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { KnowledgeBaseProps, KnowledgeBaseStates, initialKnowledgeBaseStates } from './KnowledgeBasePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeBaseService } from './KnowledgeBase.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog, CommentStates, Comment } from '../../../share-components/CommentLog';\r\nimport { CommonService } from '../../../service/common.service';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass KnowledgeBaseComponent extends React.Component<KnowledgeBaseProps, KnowledgeBaseStates> {\r\n    config: Config;\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeBaseStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getKnowledgeBaseUpdated = this.getKnowledgeBaseUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeBaseId = this.props.match.params['knowledgeBaseId'];\r\n        if (knowledgeBaseId !== \"createnew\") {\r\n            let knowledgeBase = await this.knowledgeBaseService.getById(this.props.match.params['knowledgeBaseId']);\r\n            this.setState({\r\n                knowledgeBase: knowledgeBase,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeBase object from dynamic form\r\n        let knowledgeBase = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.knowledgeBaseService.update(knowledgeBase);\r\n        }\r\n        else {\r\n            res = await this.knowledgeBaseService.createNew(knowledgeBase);\r\n        }\r\n        //find out which part is updated\r\n        let knowledgeBaseChanged = this.getKnowledgeBaseUpdated(knowledgeBase);\r\n        if (knowledgeBaseChanged !== \"\") {\r\n            let knowledgeBaseId = this.state.isEditRecord ? knowledgeBase._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: knowledgeBaseId,\r\n                comment: knowledgeBaseChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            knowledgeBase.comments.push(nComment);\r\n            //update comment\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            knowledgeBase: knowledgeBase\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted knowledgeBase with current knowledgeBase to find out which parts are updated\r\n     * use to show in knowledgeBase log\r\n     * @param knowledgeBase new knowledgeBase\r\n     */\r\n    getKnowledgeBaseUpdated(knowledgeBase: KnowledgeBase) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.knowledgeBase) !== JSON.stringify(knowledgeBase)) {\r\n            if (JSON.stringify(this.state.knowledgeBase.name) !== JSON.stringify(knowledgeBase.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    knowledgeBase.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.knowledgeBase.owner) !== JSON.stringify(knowledgeBase.owner)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Owner:</div>\r\n                                <div>Owner</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(knowledgeBase.owner && knowledgeBase.owner._id) ?\r\n                                        `${knowledgeBase.owner.firstName} ${knowledgeBase.owner.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeBase {\r\n        let currentAct = this.state.knowledgeBase;\r\n        let formAct = new KnowledgeBase(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let knowledgeBase = this.state.knowledgeBase;\r\n        knowledgeBase.comments = form.comments;\r\n        knowledgeBase.comments.forEach((val) => {\r\n            val.target = knowledgeBase._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        knowledgeBase: knowledgeBase\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeBase questions\r\n     * @param knowledgeBase knowledgeBase object\r\n     */\r\n    getQuestion(knowledgeBase: KnowledgeBase) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: knowledgeBase.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'owner',\r\n            label: 'Owner',\r\n            value: knowledgeBase.owner,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog commentedUser={this.props.loginUser}\r\n                        comments={this.state.knowledgeBase.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeBase);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeBaseComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { KnowledgeBaseService } from '../../../components/Management/KnowledgeBase/KnowledgeBase.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeBaseComponent from '../../../components/Management/KnowledgeBase/KnowledgeBase';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeBases } from '../../store/knowledgeBase/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeBaseContainerProps {\r\n    user: any,\r\n    storeKnowledgeBases: typeof storeKnowledgeBases\r\n}\r\ninterface KnowledgeBaseContainerStates {\r\n    allKnowledgeBase: KnowledgeBase[],\r\n    knowledgeBaseList: KnowledgeBase[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass KnowledgeBaseContainer extends Component<KnowledgeBaseContainerProps, KnowledgeBaseContainerStates> {\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeBase: [],\r\n            knowledgeBaseList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeBaseByFilter = this.getKnowledgeBaseByFilter.bind(this);\r\n        this.deleteKnowledgeBaseHandler = this.deleteKnowledgeBaseHandler.bind(this);\r\n        this.addKnowledgeBaseHandler = this.addKnowledgeBaseHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeBases = await this.knowledgeBaseService.getAllData();\r\n        this.props.storeKnowledgeBases(knowledgeBases);\r\n        this.setState({ allKnowledgeBase: knowledgeBases });\r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeBaseByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeBases = this.state.allKnowledgeBase;\r\n        if (knowledgeBases.length === 0) {\r\n            knowledgeBases = await this.knowledgeBaseService.getAllData();\r\n            this.props.storeKnowledgeBases(knowledgeBases);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeBase: knowledgeBases,\r\n            knowledgeBaseList: knowledgeBases.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeBase\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeBaseHandler(records: KnowledgeBase[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeBaseService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeBaseHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgebases/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgebases/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Owner',\r\n                id: 'owner',\r\n                accessor: (row: KnowledgeBase) => row.owner ? `${row.owner.firstName} ${row.owner.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgebases\">\r\n                        <ContainerDiv className=\"knowledgeBase-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.allKnowledgeBase}\r\n                                pageCount={this.state.allKnowledgeBase.length}\r\n                                fetchData={() => { }}\r\n                                deleteRecordHandler={this.deleteKnowledgeBaseHandler}\r\n                                addRecordHandler={this.addKnowledgeBaseHandler}\r\n                                TableName=\"Knowledge Bases\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgebases/:knowledgeBaseId`}>\r\n                        <KnowledgeBaseComponent loginUser={this.props.user.currentUser}></KnowledgeBaseComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeBaseList: store.knowledgeBases\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeBases\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeBaseContainer)","import { REMOVE_KNOWLEDGE_BASES, STORE_KNOWLEDGE_BASES } from \"./types\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\nexport function storeKnowledgeBases(acts: KnowledgeBase[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_BASES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeBases(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_BASES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_BASES = \"STORE_KNOWLEDGE_BASES\";\r\nexport const REMOVE_KNOWLEDGE_BASES = \"REMOVE_KNOWLEDGE_BASES\";\r\n\r\ninterface StoreKnowledgeBasesAction {\r\n  type: typeof STORE_KNOWLEDGE_BASES;\r\n  payload: KnowledgeBase[];\r\n}\r\n\r\ninterface RemoveKnowledgeBasesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_BASES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeBaseActionTypes = StoreKnowledgeBasesAction | RemoveKnowledgeBasesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeArticleService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeArticle[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeArticles);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeArticle> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeArticles}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeArticle[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeArticles}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { KnowledgeBase } from \"./knowledgeBase\";\r\nexport class KnowledgeArticle {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.shortDescription = obj ? obj.shortDescription : '';\r\n        this.knowledgeBase = obj ? obj.knowledgeBase : new KnowledgeBase();\r\n        this.contents = obj ? obj.contents : '';\r\n        this.reviewer = obj ? obj.reviewer : new User();\r\n        this.version = obj ? obj.version : 0;\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    shortDescription: string;\r\n    knowledgeBase: KnowledgeBase;\r\n    contents: string;\r\n    reviewer: User;\r\n    version: number;\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeArticleProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeArticleStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeArticle: KnowledgeArticle,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeArticleStates: KnowledgeArticleStates = {\r\n    errors: {},\r\n    knowledgeArticle: new KnowledgeArticle(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst DownloadContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nconst dropdownStyle: React.CSSProperties = {\r\n    height: '38px',\r\n    width: '100%',\r\n    fontWeight: 400,\r\n    fontSize: 'small',\r\n    borderRadius: '.25rem',\r\n    border: '1px solid #e8e8e8 !important',\r\n    padding: '1.07em 1em'\r\n};\r\nexport interface DocumentViewerProps {\r\n    contents: string\r\n}\r\nexport class DocumentViewer extends React.Component<DocumentViewerProps, {}> {\r\n    handleOnclick(type: string) {\r\n        switch (type) {\r\n            case 'PDF':\r\n                var printWindow = window.open('', '');\r\n                if (printWindow) {\r\n                    printWindow.document.write('<html><head><title></title>');\r\n                    printWindow.document.write('</head><body >');\r\n                    printWindow.document.write(this.props.contents);\r\n                    printWindow.document.write('</body></html>');\r\n                    printWindow.document.close();\r\n                    printWindow.print();\r\n                }\r\n                break;\r\n            case 'CSV':\r\n                //TODO: Implement\r\n                break;\r\n            case 'JSON':\r\n                //TODO: implement\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <DownloadContainerDiv>\r\n                    <Dropdown className=\"float-right\">\r\n                        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\" style={dropdownStyle}>\r\n                            Download\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('PDF')}>PDF</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('CSV')}>CSV</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('JSON')}>JSON</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </DownloadContainerDiv>\r\n                <div id=\"contents\" style={{ fontFamily: 'times' }} dangerouslySetInnerHTML={{ __html: this.props.contents }} ></div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { KnowledgeArticleProps, KnowledgeArticleStates, initialKnowledgeArticleStates } from './KnowledgeArticlePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeArticleService } from './KnowledgeArticle.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion, CkeditorQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { Config } from '../../../configuration/config';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Button } from '@material-ui/core';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport { DocumentViewer } from '../../../share-components/DocumentViewer/DocumentViewer';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst PreviewContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nclass KnowledgeArticleComponent extends React.Component<KnowledgeArticleProps, KnowledgeArticleStates> {\r\n    config: Config;\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeArticleStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeArticleId = this.props.match.params['knowledgeArticleId'];\r\n        if (knowledgeArticleId !== \"createnew\") {\r\n            let knowledgeArticle = await this.knowledgeArticleService.getById(this.props.match.params['knowledgeArticleId']);\r\n            this.setState({\r\n                knowledgeArticle: knowledgeArticle,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeArticle object from dynamic form\r\n        let knowledgeArticle = this.convertFormToObject(form);\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeArticleService.update(knowledgeArticle)\r\n                .then((result) => {\r\n                    //TODO: show message\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            this.knowledgeArticleService.createNew(knowledgeArticle)\r\n                .then((result) => {\r\n                    if (this.state.isEditRecord) {\r\n                        this.setState({\r\n                            knowledgeArticle: knowledgeArticle\r\n                        });\r\n                    }\r\n                    else {\r\n                        window.location.reload(false);\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeArticle {\r\n        let currentAct = this.state.knowledgeArticle;\r\n        let formAct = new KnowledgeArticle(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeArticle questions\r\n     * @param knowledgeArticle knowledgeArticle object\r\n     */\r\n    getQuestion(knowledgeArticle: KnowledgeArticle) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Short description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Short Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'shortDescription',\r\n            label: 'Short Description',\r\n            value: knowledgeArticle.shortDescription,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add knowledge base\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Knowledge Base is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'knowledgeBase',\r\n            label: 'Knowledge Base',\r\n            value: knowledgeArticle.knowledgeBase,\r\n            validators: validators,\r\n            serverUrl: this.config.apiServiceURL.knowledgeBases,\r\n            displayField: 'name',\r\n            listFields: ['name'],\r\n            searchBar: true,\r\n            order: 150\r\n        }));\r\n\r\n        //add contents\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Contents is required.'\r\n        };\r\n        questions.push(new CkeditorQuestion({\r\n            key: 'contents',\r\n            label: 'Contents',\r\n            value: knowledgeArticle.contents,\r\n            validators: validators,\r\n            order: 200\r\n        }));\r\n\r\n        //Add reviewer\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'reviewer',\r\n            label: 'Reviewer',\r\n            value: knowledgeArticle.reviewer,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeArticle);\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <ContainerDiv>\r\n                            {\r\n                                this.state.isEditRecord ?\r\n                                    (\r\n                                        <PreviewContainerDiv>\r\n                                            <Button className=\"float-right\" variant=\"contained\" color=\"primary\">\r\n                                                <Link to={`${this.state.knowledgeArticle._id}/preview`} style={{color: 'white'}}>Preview</Link>\r\n                                            </Button>\r\n                                        </PreviewContainerDiv>\r\n                                    )\r\n                                    :\r\n                                    ('')\r\n                            }\r\n                            <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId/preview`}>\r\n                        <DocumentViewer contents={this.state.knowledgeArticle.contents}></DocumentViewer>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeArticleComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { KnowledgeArticleService } from '../../../components/Management/KnowledgeArticle/KnowledgeArticle.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeArticleComponent from '../../../components/Management/KnowledgeArticle/KnowledgeArticle';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeArticles } from '../../store/knowledgeArticle/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeArticleContainerProps {\r\n    user: any,\r\n    storeKnowledgeArticles: typeof storeKnowledgeArticles\r\n}\r\ninterface KnowledgeArticleContainerStates {\r\n    allKnowledgeArticle: KnowledgeArticle[],\r\n    knowledgeArticleList: KnowledgeArticle[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nconst contentStyle: React.CSSProperties = {\r\n    maxHeight: '55px',\r\n    overflow: 'hidden'\r\n}\r\nclass KnowledgeArticleContainer extends Component<KnowledgeArticleContainerProps, KnowledgeArticleContainerStates> {\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeArticle: [],\r\n            knowledgeArticleList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeArticleByFilter = this.getKnowledgeArticleByFilter.bind(this);\r\n        this.deleteKnowledgeArticleHandler = this.deleteKnowledgeArticleHandler.bind(this);\r\n        this.addKnowledgeArticleHandler = this.addKnowledgeArticleHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeArticles = await this.knowledgeArticleService.getAllData();\r\n        this.props.storeKnowledgeArticles(knowledgeArticles);\r\n        this.setState({ allKnowledgeArticle: knowledgeArticles });\r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeArticleByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeArticles = this.state.allKnowledgeArticle;\r\n        if (knowledgeArticles.length === 0) {\r\n            knowledgeArticles = await this.knowledgeArticleService.getAllData();\r\n            this.props.storeKnowledgeArticles(knowledgeArticles);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeArticle: knowledgeArticles,\r\n            knowledgeArticleList: knowledgeArticles.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeArticle\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeArticleHandler(records: KnowledgeArticle[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeArticleService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeArticleHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgearticles/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Short Description',\r\n                id: 'shortDescription',\r\n                accessor: 'shortDescription',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgearticles/${row.original._id}`}>{row.original.shortDescription}</Link>)\r\n            },\r\n            {\r\n                Header: 'Base',\r\n                id: 'knowledgeBase',\r\n                accessor: (row: KnowledgeArticle) => row.knowledgeBase ? `${row.knowledgeBase.name}` : ''\r\n            },\r\n            {\r\n                Header: 'Contents',\r\n                id: 'contents',\r\n                accessor: (row: KnowledgeArticle) => (<div style={contentStyle} dangerouslySetInnerHTML={{ __html: row.contents }}></div>)\r\n            },\r\n            {\r\n                Header: 'Reviewer',\r\n                id: 'reviewer',\r\n                accessor: (row: KnowledgeArticle) => row.reviewer ? `${row.reviewer.firstName} ${row.reviewer.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgearticles\">\r\n                        <ContainerDiv className=\"knowledgeArticle-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.allKnowledgeArticle}\r\n                                pageCount={this.state.allKnowledgeArticle.length}\r\n                                fetchData={() => { }}\r\n                                deleteRecordHandler={this.deleteKnowledgeArticleHandler}\r\n                                addRecordHandler={this.addKnowledgeArticleHandler}\r\n                                TableName=\"Knowledge Articles\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <KnowledgeArticleComponent loginUser={this.props.user.currentUser}></KnowledgeArticleComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeArticleList: store.knowledgeArticles\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeArticles\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeArticleContainer)","import { REMOVE_KNOWLEDGE_ARTICLES, STORE_KNOWLEDGE_ARTICLES } from \"./types\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\nexport function storeKnowledgeArticles(acts: KnowledgeArticle[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_ARTICLES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeArticles(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_ARTICLES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_ARTICLES = \"STORE_KNOWLEDGE_ARTICLES\";\r\nexport const REMOVE_KNOWLEDGE_ARTICLES = \"REMOVE_KNOWLEDGE_ARTICLES\";\r\n\r\ninterface StoreKnowledgeArticlesAction {\r\n  type: typeof STORE_KNOWLEDGE_ARTICLES;\r\n  payload: KnowledgeArticle[];\r\n}\r\n\r\ninterface RemoveKnowledgeArticlesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_ARTICLES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeArticleActionTypes = StoreKnowledgeArticlesAction | RemoveKnowledgeArticlesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { Comment } from \"../../../share-components/CommentLog\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ProjectService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Project[]> {\r\n        try {\r\n            const res: AxiosResponse<Project[]> = await commonAPI.get(this.configs.apiServiceURL.projects);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Project> {\r\n        try {\r\n            const res: AxiosResponse<Project> = await commonAPI.get(`${this.configs.apiServiceURL.projects}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Project[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.projects}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ProjectProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ProjectStates {\r\n    errors:{[s:string]: string[]},\r\n    project: Project,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialProjectStates: ProjectStates = {\r\n    errors: {},\r\n    project: new Project(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { ProjectProps, ProjectStates, initialProjectStates } from './ProjectPropsState';\r\nimport styled from 'styled-components';\r\nimport { ProjectService } from './Project.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Project } from '../../../class/project';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentStates, Comment, CommentLog } from '../../../share-components/CommentLog';\r\nimport { CommonService } from '../../../service/common.service';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ProjectComponent extends React.Component<ProjectProps, ProjectStates> {\r\n    config: Config;\r\n    projectService: ProjectService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectProps) {\r\n        super(props);\r\n\r\n        this.state = initialProjectStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getProjectUpdated = this.getProjectUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let projectId = this.props.match.params['projectId'];\r\n        if (projectId !== \"createnew\") {\r\n            let project = await this.projectService.getById(projectId);\r\n            this.setState({\r\n                project: project,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit Project\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get Project object from dynamic form\r\n        let project = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.projectService.update(project);\r\n        }\r\n        else {\r\n            res = await this.projectService.createNew(project);\r\n        }\r\n        //find out which part is updated\r\n        let projectChanged = this.getProjectUpdated(project);\r\n        if (projectChanged !== \"\") {\r\n            let projectId = this.state.isEditRecord ? project._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: projectId,\r\n                comment: projectChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            project.comments.push(nComment);\r\n            //update comment\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            project: project\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted Project with current Project to find out which parts are updated\r\n     * use to show in Project log\r\n     * @param project new Project\r\n     */\r\n    getProjectUpdated(project: Project) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.project) !== JSON.stringify(project)) {\r\n            if (JSON.stringify(this.state.project.name) !== JSON.stringify(project.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    project.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.project.manager) !== JSON.stringify(project.manager)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Manager:</div>\r\n                                <div>Manager</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(project.manager && project.manager._id) ?\r\n                                        `${project.manager.firstName} ${project.manager.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to Project\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Project {\r\n        let currentAct = this.state.project;\r\n        let formAct = new Project(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let project = this.state.project;\r\n        project.comments = form.comments;\r\n        project.comments.forEach((val) => {\r\n            val.target = project._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        project: project\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate Project questions\r\n     * @param record Project object\r\n     */\r\n    getQuestion(record: Project) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: record.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add manager text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Manager is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'manager',\r\n            label: 'Manager',\r\n            value: record.manager,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            validators: validators,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        //Add member list\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'members',\r\n            label: 'Member',\r\n            value: record.members,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            multiple: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog commentedUser={this.props.loginUser}\r\n                        comments={this.state.project.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.project);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ProjectComponent);","import React, { Component } from 'react';\r\nimport { Project } from '../../../class/project';\r\nimport { ProjectService } from '../../../components/Management/Project/Project.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ProjectComponent from '../../../components/Management/Project/Project';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeProjects } from '../../store/project/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface ProjectContainerProps {\r\n    user: any,\r\n    storeProjects: typeof storeProjects\r\n}\r\ninterface ProjectContainerStates {\r\n    allProject: Project[],\r\n    projectList: Project[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ProjectContainer extends Component<ProjectContainerProps, ProjectContainerStates> {\r\n    projectService: ProjectService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allProject: [],\r\n            projectList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getProjectByFilter = this.getProjectByFilter.bind(this);\r\n        this.deleteProjectHandler = this.deleteProjectHandler.bind(this);\r\n        this.addProjectHandler = this.addProjectHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let projects = await this.projectService.getAllData();\r\n        this.props.storeProjects(projects);\r\n        this.setState({ allProject: projects });\r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getProjectByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let projects = this.state.allProject;\r\n        if (projects.length === 0) {\r\n            projects = await this.projectService.getAllData();\r\n            this.props.storeProjects(projects);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allProject: projects,\r\n            projectList: projects.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete Project\r\n     * @param records deleted records\r\n     */\r\n    async deleteProjectHandler(records: Project[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.projectService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addProjectHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/projects/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`projects/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Manager',\r\n                id: 'manager',\r\n                accessor: (row: Project) => row.manager ? `${row.manager.firstName} ${row.manager.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/projects\">\r\n                        <ContainerDiv className=\"project-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.allProject}\r\n                                pageCount={this.state.allProject.length}\r\n                                fetchData={() => { }}\r\n                                deleteRecordHandler={this.deleteProjectHandler}\r\n                                addRecordHandler={this.addProjectHandler}\r\n                                TableName=\"Projects\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/projects/:projectId`}>\r\n                        <ProjectComponent loginUser={this.props.user.currentUser}></ProjectComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        projectList: store.projects\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeProjects\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ProjectContainer)","import { REMOVE_PROJECTS, STORE_PROJECTS } from \"./types\";\r\nimport { Project } from \"../../../class/project\";\r\n\r\nexport function storeProjects(acts: Project[]) {\r\n  return {\r\n    type: STORE_PROJECTS,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeProjects(timestamp: number) {\r\n  return {\r\n    type: REMOVE_PROJECTS,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Project } from \"../../../class/project\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_PROJECTS = \"STORE_PROJECTS\";\r\nexport const REMOVE_PROJECTS = \"REMOVE_PROJECTS\";\r\n\r\ninterface StoreProjectsAction {\r\n  type: typeof STORE_PROJECTS;\r\n  payload: Project[];\r\n}\r\n\r\ninterface RemoveProjectsAction {\r\n  type: typeof REMOVE_PROJECTS;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ProjectActionTypes = StoreProjectsAction | RemoveProjectsAction;\r\n","import { UpdateRequestsAction, UPDATE_REQUEST, UPDATE_ALERT } from \"./types\";\r\n\r\nexport function updateRequest(noRequests: number): UpdateRequestsAction {\r\n\treturn {\r\n\t\ttype: UPDATE_REQUEST,\r\n\t\tpayload: noRequests\r\n\t};\r\n}\r\n\r\nexport function updateAlert(alert: any) {\r\n\treturn {\r\n\t\ttype: UPDATE_ALERT,\r\n\t\tpayload: alert\r\n\t}\r\n}\r\n","export const UPDATE_REQUEST = \"UPDATE_REQUEST\";\r\nexport const UPDATE_ALERT = \"UPDATE_ALERT\";\r\n\r\nexport interface UpdateRequestsAction {\r\n\ttype: typeof UPDATE_REQUEST;\r\n\tpayload: number;\r\n}\r\n\r\ninterface UpdateAlertsAction {\r\n\ttype: typeof UPDATE_ALERT;\r\n\tpayload: any;\r\n}\r\n\r\nexport type RequestActionTypes = UpdateRequestsAction | UpdateAlertsAction;\r\n","import * as React from 'react';\r\nimport {\r\n    Route,\r\n    Redirect,\r\n    RouteProps,\r\n    RouteComponentProps\r\n} from \"react-router-dom\";\r\n\r\ninterface SecureRouteProps extends RouteProps {\r\n    user: any,\r\n    isUnauthorize?: boolean\r\n}\r\n\r\nexport class SecureRoute extends Route<SecureRouteProps> {\r\n    render() {\r\n        return (\r\n            <Route render={\r\n                (props: RouteComponentProps) => {\r\n                    if (!this.props.user._id) {\r\n                        //user haven't login yet => redirect to login page\r\n                        return <Redirect to='/login' />\r\n                    }\r\n                    else if (this.props.isUnauthorize) {\r\n                        //user is not authorize\r\n                        return <Redirect to=\"/page401\" />\r\n                    }\r\n                    else {\r\n                        //user could access the page\r\n                        if (this.props.component) {\r\n                            return React.createElement(this.props.component);\r\n                        }\r\n                        else if (this.props.render) {\r\n                            return this.props.render(props);\r\n                        }\r\n                    }\r\n                }\r\n            } />\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport class Page401 extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                minHeight: 'calc(100vh - 80px)',\r\n                color: 'red'\r\n            }\r\n            }>\r\n                <h2>401 Access denied</h2>\r\n            </div >\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {\r\n\tHashRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tRedirect\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { About } from './components/About/About';\r\nimport { Home } from './components/Home/Home';\r\nimport Toolbar from './components/UI/Toolbar/Toolbar';\r\nimport { Contact } from './components/Contact/Contact';\r\nimport SignUp from './components/Auth/SignUp/SignUp';\r\nimport { SignUpState } from './components/Auth/SignUp/SignUpPropsStates';\r\nimport { UserServiceApi } from './components/Management/Users/User.service';\r\nimport * as apiConfig from './configuration/api.config';\r\nimport { User } from './class/user';\r\nimport { Config } from './configuration/config';\r\nimport UserContainer from './redux/containers/Users/UserContainer';\r\nimport ActivityContainer from './redux/containers/Activities/ActivityContainer';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from './redux/store';\r\nimport { loginUser } from './redux/store/user/actions';\r\nimport { LoginState } from './components/Auth/Login/LoginPropsStates';\r\nimport { Credentials } from './interface/Credentials';\r\nimport Login from './components/Auth/Login/Login';\r\nimport KnowledgeBaseContainer from './redux/containers/KnowledgeBases/KnowledgeBaseContainer';\r\nimport KnowledgeArticleContainer from './redux/containers/KnowledgeArticles/KnowledgeArticleContainer';\r\nimport ProjectContainer from './redux/containers/Projects/ProjectContainer';\r\nimport { updateAlert } from './redux/store/request/actions';\r\nimport { SecureRoute } from './share-components/SecureRoute';\r\nimport { Page401 } from './share-components/Page401';\r\n\r\ntype AppStates = {\r\n\tredirectLogin: boolean,\r\n\tredirectHome: boolean\r\n}\r\ntype AppProps = {\r\n\tuser: any,\r\n\tloginUser: typeof loginUser,\r\n\tupdateAlert: typeof updateAlert\r\n}\r\nclass App extends React.Component<AppProps, AppStates> {\r\n\tuserService: UserServiceApi;\t//user service\r\n\tconfig: Config;\r\n\tconstructor(props: AppProps) {\r\n\t\tsuper(props);\r\n\t\t//initial variables\r\n\t\tthis.state = {\r\n\t\t\tredirectLogin: false,\r\n\t\t\tredirectHome: false\r\n\t\t}\r\n\t\tthis.userService = new UserServiceApi(apiConfig.apiConfig);\r\n\t\tthis.config = new Config();\r\n\r\n\t\tthis.handleOnSubmitLoginForm = this.handleOnSubmitLoginForm.bind(this);\r\n\t\tthis.handleOnSubmitRegisterForm = this.handleOnSubmitRegisterForm.bind(this);\r\n\t\tthis.handleRenderRedirectRouter = this.handleRenderRedirectRouter.bind(this);\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.state.redirectHome) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectHome: false\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (this.state.redirectLogin) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectLogin: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t//------------------------------------------LOG IN COMPONENT-----------------------------\r\n\t/**\r\n\t * handle login form submit\r\n\t * @param form login state\r\n\t */\r\n\tasync handleOnSubmitLoginForm(form: LoginState) {\r\n\t\tlet credentials: Credentials = {\r\n\t\t\tusername: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\trememberMe: form.rememberMe\r\n\t\t}\r\n\t\tthis.userService.userLogin(credentials)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tlet user = new User(result);\r\n\t\t\t\t\tthis.props.loginUser(user);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectHome: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.props.updateAlert({\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.userNotFound,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch((err) => {\r\n\t\t\t\tthis.props.updateAlert({\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tvalue: this.config.commonMessage.loginError,\r\n\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t//------------------------------------------SIGN UP COMPONENT----------------------------\r\n\t/**\r\n\t * handle sign up form submit\r\n\t * @param form sign up state\r\n\t */\r\n\thandleOnSubmitRegisterForm(form: SignUpState) {\r\n\t\tlet newUser = new User({\r\n\t\t\tfirstName: form.firstName,\r\n\t\t\tlastName: form.lastName,\r\n\t\t\temail: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\tphone: form.phone,\r\n\t\t\taddress: form.address\r\n\t\t});\r\n\t\tthis.userService.userRegister(newUser)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectLogin: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.props.updateAlert({\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthis.props.updateAlert({\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the case system want to redirect new page\r\n\t */\r\n\thandleRenderRedirectRouter() {\r\n\t\tif (this.state.redirectLogin) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/login\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse if (this.state.redirectHome) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<Toolbar />\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.handleRenderRedirectRouter()\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<SecureRoute path=\"/management/projects\"\r\n\t\t\t\t\t\t\tcomponent={ProjectContainer}\r\n\t\t\t\t\t\t\tuser={this.props.user.currentUser}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SecureRoute path=\"/management/activities\"\r\n\t\t\t\t\t\t\tcomponent={ActivityContainer}\r\n\t\t\t\t\t\t\tuser={this.props.user.currentUser}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SecureRoute path=\"/management/knowledgebases\"\r\n\t\t\t\t\t\t\tcomponent={KnowledgeBaseContainer}\r\n\t\t\t\t\t\t\tuser={this.props.user.currentUser}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SecureRoute path=\"/management/knowledgearticles\"\r\n\t\t\t\t\t\t\tcomponent={KnowledgeArticleContainer}\r\n\t\t\t\t\t\t\tuser={this.props.user.currentUser}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<SecureRoute path=\"/users\"\r\n\t\t\t\t\t\t\tcomponent={UserContainer}\r\n\t\t\t\t\t\t\tuser={this.props.user.currentUser}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.user.currentUser._id === undefined ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/login\">\r\n\t\t\t\t\t\t\t\t\t\t<Login OnLogin={this.handleOnSubmitLoginForm}\r\n\t\t\t\t\t\t\t\t\t\t\tRegisterPageRedirectLink=\"/signup\"\r\n\t\t\t\t\t\t\t\t\t\t\tForgotPasswordRedirectLink=\"/forgotpassword\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t('')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Route exact path=\"/signup\">\r\n\t\t\t\t\t\t\t<SignUp OnRegister={this.handleOnSubmitRegisterForm}\r\n\t\t\t\t\t\t\t\tLoginRedirectLink=\"/login\" />\r\n\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/contact\">\r\n\t\t\t\t\t\t\t<Contact />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/page401\">\r\n\t\t\t\t\t\t\t<Page401 />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/home\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route component={Page401} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n\tuser: state.user\r\n});\r\nconst mapDispatchToProps = {\r\n\tupdateAlert,\r\n\tloginUser\r\n}\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(App);","import React from 'react';\r\nexport class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"cid-s05i0OO9sN\" id=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"media-container-row content text-white\">\r\n                        <div className=\"col-12 col-md-3\">\r\n                            <div className=\"media-wrap\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-192x108.jpg`} alt=\"GrownUp\" title=\"\" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-3 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Address\r\n                            </h5>\r\n                            <p className=\"mbr-text\">36 Bo Bao Tan Thang,<br />Tan Phu, Ho Chi Minh, VN</p>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Contacts\r\n                            </h5>\r\n                            <p className=\"mbr-text\">\r\n                                Email: robertvo.developer.93@gmail.com &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />Phone: +84 (0) 33 870 5850\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"footer-lower\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-sm-12\">\r\n                                <hr />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"media-container-row mbr-white\">\r\n                            <div className=\"col-sm-6 copyright\">\r\n                                <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                    © Copyright 2020 GrownUp - All Rights Reserved {process.env.REACT_APP_ACTIVITY_LOGS_SERVER}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"social-list align-right\">\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/c/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://instagram.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.behance.net/Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-behance socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import {\r\n  USER_LOGIN,\r\n  USER_LOGOUT,\r\n  UserActionTypes,\r\n  STORE_USER\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  currentUser: {},\r\n  userList: []\r\n}\r\n\r\nexport function userReducer(\r\n  state = initialState,\r\n  action: UserActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case USER_LOGIN:\r\n      return {\r\n        ...state, currentUser: action.payload\r\n      };\r\n    case USER_LOGOUT:\r\n      return {\r\n        ...state, currentUser: {}\r\n      };\r\n    case STORE_USER:\r\n      return {\r\n        ...state, userList: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_ACTIVITIES,\r\n  REMOVE_ACTIVITIES,\r\n  ActivityActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  activities: []\r\n}\r\n\r\nexport function activityReducer(\r\n  state = initialState,\r\n  action: ActivityActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: action.payload\r\n      };\r\n    case REMOVE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\n\tUPDATE_REQUEST,\n\tUPDATE_ALERT,\n\tRequestActionTypes\n} from \"./types\";\n\nconst initialState = {\n\tnumberOfRequest: 0,\n\talertConfig: {}\n}\n\nexport function requestReducer(\n\tstate = initialState,\n\taction: RequestActionTypes\n): any {\n\tswitch (action.type) {\n\t\tcase UPDATE_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state, numberOfRequest: action.payload\n\t\t\t};\n\t\tcase UPDATE_ALERT:\n\t\t\treturn {\n\t\t\t\t...state, alertConfig: action.payload\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\r\n  STORE_KNOWLEDGE_BASES,\r\n  REMOVE_KNOWLEDGE_BASES,\r\n  KnowledgeBaseActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeBases: []\r\n}\r\n\r\nexport function knowledgeBaseReducer(\r\n  state = initialState,\r\n  action: KnowledgeBaseActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_KNOWLEDGE_ARTICLES,\r\n  REMOVE_KNOWLEDGE_ARTICLES,\r\n  KnowledgeArticleActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeArticles: []\r\n}\r\n\r\nexport function knowledgeArticleReducer(\r\n  state = initialState,\r\n  action: KnowledgeArticleActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_PROJECTS,\r\n  REMOVE_PROJECTS,\r\n  ProjectActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  projects: []\r\n}\r\n\r\nexport function projectReducer(\r\n  state = initialState,\r\n  action: ProjectActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_PROJECTS:\r\n      return {\r\n        ...state, projects: action.payload\r\n      };\r\n    case REMOVE_PROJECTS:\r\n      return {\r\n        ...state, projects: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\t//https://github.com/rt2zz/redux-persist\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { userReducer } from \"./user/reducers\";\r\nimport { activityReducer } from \"./activity/reducers\";\r\nimport { requestReducer } from \"./request/reducers\";\r\nimport { knowledgeBaseReducer } from \"./knowledgeBase/reducers\";\r\nimport { knowledgeArticleReducer } from \"./knowledgeArticle/reducers\";\r\nimport axiosMiddleware from 'redux-axios-middleware';\r\nimport { commonAPI } from \"../../service/common-api.service\";\r\nimport { updateRequest } from \"./request/actions\";\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { projectReducer } from \"./project/reducers\";\r\n\r\n//define persistConfig\r\nconst persistConfig = {\r\n\tkey: 'root',\r\n\tstorage,\r\n}\r\n//combine all reducer\r\nconst rootReducer = combineReducers({\r\n\tuser: userReducer,\r\n\tactivities: activityReducer,\r\n\trequest: requestReducer,\r\n\tknowledgeBases: knowledgeBaseReducer,\r\n\tknowledgeArticles: knowledgeArticleReducer,\r\n\tprojects: projectReducer\r\n});\r\n//define AppState\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n//persist reducer\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n//add middleware redux-thunk => could view on chrome browser\r\nconst middlewares = [thunkMiddleware];\r\nlet numberOfRequest = 0;\r\nconst middlewareConfig = {\r\n\tinterceptors: {\r\n\t\trequest: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, req : AxiosRequestConfig) {\r\n\t\t\t\tlet appState:AppState = getState();\r\n\t\t\t\treq.headers.Authorization =  `bearer ${appState.user.currentUser.token}`;\r\n\t\t\t\tnumberOfRequest++;\r\n\t\t\t\tconsole.log(numberOfRequest);\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn req;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t],\r\n\t\tresponse: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, res : AxiosResponse) {\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn res;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\t//TODO: Redirect to login page if not loged in: 401\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t]\r\n\t}\r\n};\r\nconst middleWareEnhancer = applyMiddleware(...middlewares\r\n\t, axiosMiddleware(commonAPI.api, middlewareConfig)\r\n\t);\r\nexport default () => {\r\n\tlet store: any = createStore(\r\n\t\tpersistedReducer\r\n\t\t, composeWithDevTools(middleWareEnhancer)\r\n\t)\r\n\tlet persistor = persistStore(store)\r\n\treturn { store, persistor }\r\n}","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\"; //https://github.com/davidhu2000/react-spinners\r\nimport { connect } from 'react-redux';\r\nimport styled from \"styled-components\";\r\n\r\nimport { AppState } from \"../../../redux/store\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\ndisplay: block;\r\nmargin: 0 auto;\r\nmargin-top: 200px;\r\nborder-color: red;\r\n`;\r\n\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 10000;\r\n    opacity: 0.5;\r\n    background-color: gray;\r\n    top: 0px;\r\n`;\r\n\r\ninterface LoadingSpinnerProps {\r\n    numberOfRequest: number\r\n}\r\n\r\nclass LoadingSpinner extends React.PureComponent<LoadingSpinnerProps, {}> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.numberOfRequest > 0 ?\r\n                        (\r\n                            <ContainerDiv className=\"sweet-loading\">\r\n                                <BounceLoader\r\n                                    css={override}\r\n                                    size={100}\r\n                                    color={\"#123abc\"}\r\n                                    loading={this.props.numberOfRequest > 0}\r\n                                />\r\n                            </ContainerDiv>\r\n                        )\r\n                        : ('')\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    numberOfRequest: state.request.numberOfRequest\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(LoadingSpinner);","import React from \"react\";\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport './GlobalAlert.scss';\r\nimport { AppState } from \"../../../redux/store\";\r\nimport { updateAlert } from \"../../../redux/store/request/actions\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    top: -20px;\r\n    width: 100%;\r\n    z-index: 1000000;\r\n    padding: 30px;\r\n`;\r\n\r\nconst CloseButton = styled.div`\r\n    float: right;\r\n    margin-top: -18px;\r\n    cursor: pointer;\r\n    margin-right: -10px;\r\n`;\r\n\r\nconst AlertStyle: React.CSSProperties = {\r\n    borderRadius: '.25rem'\r\n};\r\n\r\ninterface GlobalAlertProps {\r\n    show?: boolean,\r\n    variant?: any,\r\n    value?: any,\r\n    timeKeepAlive?: number,\r\n    updateAlert: typeof updateAlert\r\n}\r\n\r\nclass GlobalAlert extends React.Component<GlobalAlertProps, {}> {\r\n\r\n    componentDidUpdate(){\r\n        if(this.props.show){\r\n            //hide alert after 2 seconds or predefined time alive\r\n            setTimeout(()=>{\r\n                this.props.updateAlert({});\r\n            }, this.props.timeKeepAlive || 2000)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handle click on close button [x]\r\n     */\r\n    handleOnCloseButton() {\r\n        this.props.updateAlert({});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.show ?\r\n                        (\r\n                            <ContainerDiv>\r\n                                <Alert style={AlertStyle}\r\n                                    key=\"GlobalAlert\"\r\n                                    variant={this.props.variant}>\r\n                                    <CloseButton onClick={() => this.handleOnCloseButton()}>\r\n                                        <strong>x</strong>\r\n                                    </CloseButton>\r\n                                    {this.props.value}\r\n                                </Alert>\r\n                            </ContainerDiv>\r\n                        )\r\n                        : ('')\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    if(state.request.alertConfig){\r\n        return {\r\n            show: state.request.alertConfig.show,\r\n            variant: state.request.alertConfig.variant,\r\n            value: state.request.alertConfig.value\r\n        }\r\n    }\r\n};\r\n\r\nconst MapDispatchToProps = {\r\n    updateAlert\r\n};\r\n\r\nexport default connect(mapStateToProps, MapDispatchToProps)(GlobalAlert);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport { Footer } from './components/Footer/Footer';\r\nimport * as persistStore from './redux/store';\r\nimport LoadingSpinner from './components/Common/Spinner/LoadingSpinner';\r\nimport GlobalAlert from './components/Common/Alert/GlobalAlert';\r\n\r\nReactDOM.render(\r\n\t<Provider store={persistStore.default().store}>\r\n\t\t<PersistGate loading={null} persistor={persistStore.default().persistor}>\r\n\t\t\t<LoadingSpinner />\r\n\t\t\t<App />\r\n\t\t\t<Footer />\r\n\t\t\t<GlobalAlert />\r\n\t\t</PersistGate>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","import { Validator } from \"../class/validator\";\r\n\r\nexport class QuestionBase<T> {\r\n\tvalue?: T;\r\n\tkey: string;\r\n\tlabel: string;\r\n\trequired: boolean;\r\n\torder: number;\r\n\tcontrolType: string;\r\n\ttype: string;\r\n\toptions: { key: string, value: string }[];\r\n\tvalidators: {[s:string]: Validator<any>};\r\n\tmultiple: boolean;    //dropdown list multiple\r\n\trows: number;       //number of rows in text area\r\n\treadonly: boolean;  //question is readonly or not\r\n\tsearchBar: boolean;\r\n\tserverUrl: string;\r\n\tdisplayField: string;\r\n\tlistFields: string[];\r\n\tfilterCondition: string;\r\n\r\n\tconstructor(options: {\r\n\t\tvalue?: T,\r\n\t\tkey?: string,\r\n\t\tlabel?: string,\r\n\t\trequired?: boolean,\r\n\t\torder?: number,\r\n\t\tcontrolType?: string,\r\n\t\ttype?: string,\r\n\t\toptions?: { key: string, value: string }[],\r\n\t\tvalidators?: any,\r\n\t\tmultiple?: boolean,\r\n\t\trows?: number,\r\n\t\treadonly?: boolean,\r\n\t\tsearchBar?: boolean,\r\n\t\tserverUrl?: string,\r\n\t\tdisplayField?: string,\r\n\t\tlistFields?: string[],\r\n\t\tfilterCondition?: string\r\n\t} = {}) {\r\n\t\tthis.value = options.value;\r\n\t\tthis.key = options.key || '';\r\n\t\tthis.label = options.label || '';\r\n\t\tthis.required = !!options.required;\r\n\t\tthis.order = options.order === undefined ? 1 : options.order;\r\n\t\tthis.controlType = options.controlType || '';\r\n\t\tthis.type = options.type || '';\r\n\t\tthis.options = options.options || [];\r\n\t\tthis.validators = options.validators || [];\r\n\t\tthis.multiple = !!options.multiple;\r\n\t\tthis.rows = options.rows === undefined ? 1 : options.rows;\r\n\t\tthis.readonly = !!options.readonly;\r\n\t\tthis.searchBar = !!options.searchBar;\r\n\t\tthis.serverUrl = options.serverUrl || '';\r\n\t\tthis.displayField = options.displayField || '';\r\n\t\tthis.listFields = options.listFields || [];\r\n\t\tthis.filterCondition = options.filterCondition || '';\r\n\t}\r\n}\r\n","import { AxiosRequestConfig } from \"axios\";\r\nconst qs = require(\"qs\");\r\nexport const API_TIMEOUT = Number(process.env.REACT_APP_API_TIMEOUT) || 10000;\r\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL || \"\";\r\n\r\nexport const apiConfig: AxiosRequestConfig = {\r\n    // withCredentials: true,\r\n    timeout: API_TIMEOUT,\r\n    baseURL: REACT_APP_SERVER_URL,\r\n    headers: {\r\n        common: {\r\n            // \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\r\n            // Pragma: \"no-cache\",\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\"\r\n        }\r\n    },\r\n    paramsSerializer: (params: string) => qs.stringify(params, { indices: false })\r\n};\r\n","export class ODateRange{\r\n    constructor(obj?: any){\r\n        this.startDate = obj ? obj.startDate : null;\r\n        this.endDate = obj ? obj.endDate : null;\r\n    }\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n}","import { ODateRange } from \"./date-range\";\r\n\r\nexport interface DateRangeProps {\r\n    dateRange?: ODateRange,\r\n    onSelectionChange: (selected: DateRangeStates) => void,\r\n    referenceKey: string\r\n}\r\n\r\nexport interface DateRangeStates {\r\n    referenceKey: string,\r\n    originalDateRange: ODateRange,\r\n    dateRange: ODateRange,\r\n    startDate: any,\r\n    endDate: any\r\n}\r\n\r\nexport const initialDateRangeStates: DateRangeStates = {\r\n    referenceKey: '',\r\n    originalDateRange: new ODateRange(),\r\n    dateRange: new ODateRange(),\r\n    startDate: null,\r\n    endDate: null\r\n}","/**\r\n * Require react-datepicker\r\n */\r\nimport React from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport styled from 'styled-components';\r\n\r\nimport './DateRange.scss';\r\nimport { DateRangeProps, DateRangeStates, initialDateRangeStates } from './DateRangePropsStates';\r\nimport { ODateRange } from './date-range';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 100%;\r\n`;\r\nconst StartDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nconst EndDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nexport class DateRange extends React.Component<DateRangeProps, DateRangeStates>{\r\n    constructor(props: DateRangeProps) {\r\n        super(props);\r\n\r\n        this.state = initialDateRangeStates;\r\n\r\n        this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\r\n        this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let dateRange = new ODateRange();\r\n        if (this.props.dateRange) {\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n        }\r\n        this.setState({\r\n            referenceKey: this.props.referenceKey,\r\n            dateRange: dateRange,\r\n            originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.dateRange){\r\n            let dateRange = new ODateRange();\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n            if (JSON.stringify(this.state.originalDateRange) !== JSON.stringify(dateRange)) {\r\n                this.setState({\r\n                    dateRange: dateRange,\r\n                    originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle start date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeStartDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: date,\r\n            endDate: this.state.dateRange.endDate\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle end date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeEndDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: this.state.dateRange.startDate,\r\n            endDate: date\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <StartDateDiv>\r\n                    <div>Start Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        maxDate={this.state.dateRange.endDate}\r\n                        selected={this.state.dateRange.startDate}\r\n                        onChange={this.handleChangeStartDate}\r\n                    />\r\n                </StartDateDiv>\r\n                <EndDateDiv>\r\n                    <div>End Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        minDate={this.state.dateRange.startDate}\r\n                        selected={this.state.dateRange.endDate}\r\n                        onChange={this.handleChangeEndDate}\r\n                    />\r\n                </EndDateDiv>\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}"],"sourceRoot":""}