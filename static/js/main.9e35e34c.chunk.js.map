{"version":3,"sources":["share-components/DynamicForm/DynamicFormPropState.ts","share-components/Variables/ReferenceList/ReferencePropsStates.ts","share-components/Variables/ReferenceList/Reference.service.ts","share-components/Variables/ReferenceList/ReferenceList.tsx","share-components/Variables/DropdownList/DropDownPropsStates.ts","share-components/Variables/DropdownList/DropdownList.tsx","share-components/Variables/DateRange/DateRangePropsStates.ts","share-components/Variables/DateRange/DateRange.tsx","service/common-api.service.ts","share-components/DynamicForm/questions/question-dropdown.ts","share-components/DynamicForm/questions/question-textarea.ts","share-components/DynamicForm/questions/question-textbox.ts","share-components/DynamicForm/questions/question-daterange.ts","share-components/DynamicForm/questions/question-reference.ts","share-components/DynamicForm/questions/question-ckeditor.ts","share-components/Ckeditor/Ckeditor.jsx","share-components/DynamicForm/DynamicForm.tsx","share-components/DynamicForm/index.ts","configuration/api.config.ts","share-components/DynamicForm/form.config.ts","serviceWorker.ts","components/About/About.tsx","components/Home/Home.tsx","components/UI/Toolbar/Toolbar.tsx","redux/store/user/actions.ts","redux/store/user/types.ts","components/Contact/Contact.tsx","components/Auth/SignUp/SignUpPropsStates.ts","components/Auth/SignUp/SignUp.tsx","class/common/keyValue.ts","configuration/config.ts","components/Management/Users/User.service.ts","class/user.ts","share-components/Alert/AlertComponent.tsx","components/Management/Users/UserPropsStates.ts","components/Management/Users/User.tsx","share-components/Table/Filter/Filter.jsx","share-components/Table/Selection/RowSelection.jsx","share-components/Table/Pagination/TablePaginationActions.jsx","share-components/Table/Filter/GlobalFilter.jsx","share-components/Table/Toolbar/TableToolbar.jsx","share-components/Table/Table.jsx","redux/containers/Users/UserContainer.tsx","components/Management/Activities/Activity.service.ts","class/project.ts","class/activity.ts","components/Management/Activities/ActivityPropsState.ts","share-components/Variables/BreakLine/BreakLine.tsx","share-components/CommentLog/CommentLogPropsStates.ts","class/common/comment.ts","share-components/CommentLog/CommentLog.tsx","service/common.service.ts","components/Management/Activities/Activity.tsx","redux/containers/Activities/ActivityContainer.tsx","redux/store/activity/actions.ts","redux/store/activity/types.ts","components/Auth/Login/LoginPropsStates.ts","components/Auth/Login/Login.tsx","components/Management/KnowledgeBase/KnowledgeBase.service.ts","class/knowledgeBase.ts","components/Management/KnowledgeBase/KnowledgeBasePropsState.ts","components/Management/KnowledgeBase/KnowledgeBase.tsx","redux/containers/KnowledgeBases/KnowledgeBaseContainer.tsx","redux/store/knowledgeBase/actions.ts","redux/store/knowledgeBase/types.ts","components/Management/KnowledgeArticle/KnowledgeArticle.service.ts","class/knowledgeArticle.ts","components/Management/KnowledgeArticle/KnowledgeArticlePropsState.ts","share-components/DocumentViewer/DocumentViewer.tsx","components/Management/KnowledgeArticle/KnowledgeArticle.tsx","redux/containers/KnowledgeArticles/KnowledgeArticleContainer.tsx","redux/store/knowledgeArticle/actions.ts","redux/store/knowledgeArticle/types.ts","components/Management/Project/Project.service.ts","components/Management/Project/ProjectPropsState.ts","components/Management/Project/Project.tsx","redux/containers/Projects/ProjectContainer.tsx","redux/store/project/actions.ts","redux/store/project/types.ts","App.tsx","components/Footer/Footer.tsx","redux/store/user/reducers.ts","redux/store/activity/reducers.ts","redux/store/request/types.ts","redux/store/request/reducers.ts","redux/store/knowledgeBase/reducers.ts","redux/store/knowledgeArticle/reducers.ts","redux/store/request/actions.ts","redux/store/project/reducers.ts","redux/store/index.ts","share-components/Spinner/LoadingSpinner.tsx","index.tsx","share-components/DynamicForm/questions/question-base.ts","class/common/date-range.ts"],"names":["initialDynamicFormStates","originalListFields","listFields","errors","disableSubmitButton","initialReferenceStates","referenceKey","originalSelected","selected","data","ReferenceService","config","this","getByUrl","bind","url","commonAPI","get","res","success","icon","fontSize","checkedIcon","ReferenceList","props","referenceService","state","apiConfig","onCloseDropdown","onChangeDropdown","serverUrl","allReference","displayedData","forEach","element","newObj","JSON","parse","stringify","p","indexOf","displayField","push","multiple","value","filter","val","length","setState","event","reason","onSelectionChange","Autocomplete","id","className","onClose","onChange","options","disableCloseOnSelect","autoSelect","autoHighlight","getOptionLabel","option","renderOption","Fragment","Checkbox","style","marginRight","checked","Object","keys","map","opt","ind","paddingRight","key","width","renderInput","params","TextField","variant","label","placeholder","React","Component","initialDropDownStates","dropdownKey","searchKey","CustomDropDown","initialDateRangeStates","originalDateRange","ODateRange","dateRange","startDate","endDate","ContainerDiv","styled","div","StartDateDiv","EndDateDiv","DateRange","handleChangeStartDate","handleChangeEndDate","undefined","date","console","log","dateFormat","maxDate","minDate","numberOfRequest","api","axios","create","getUri","request","delete","head","post","put","patch","response","error","DropdownQuestion","controlType","FormConfig","questionControlType","dropdown","QuestionBase","TextAreaQuestion","type","textarea","TextboxQuestion","textbox","DateRangeQuestion","ReferenceQuestion","reference","CkeditorQuestion","ckeditor","ReactCkeditor","editor","ClassicEditor","onInit","getData","dataChange","ckeditorKey","onBlur","onFocus","DangerText","color","fontStyle","Margin0","margin","DynamicForm","formConfig","renderErrorMessage","renderQuestion","validateForm","handleChange","onSelectionChangeCallback","onSelectionReferenceListChange","onselectionDateRangeChange","onCkeditorChange","ListFields","disabled","valid","e","newDateRange","preventDefault","target","name","str","key1","validators","formValidators","require","errorMessage","minLength","maxLength","email","key2","_id","key3","key4","questionKey","err","i","question","htmlFor","hidden","data-text","readOnly","readonly","rows","filterCondition","onSubmit","OnSubmitCallback","field","qs","timeout","Number","process","baseURL","headers","common","Accept","paramsSerializer","indices","inputTypeDef","button","checkbox","datetime","datetimeLocal","file","image","month","number","password","radio","range","reset","search","submit","tel","text","time","week","Boolean","window","location","hostname","match","About","src","alt","title","href","rel","frameBorder","border","allowFullScreen","Home","opacity","backgroundColor","aria-hidden","height","Toolbar","logout","renderManagementLink","renderProfileLink","renderServiceLink","logoutUser","user","data-toggle","aria-expanded","firstName","lastName","to","onClick","result","zIndex","data-target","aria-controls","aria-label","data-app-modern-menu","MapDispatchToProps","meta","connect","store","currentUser","Contact","data-form-type","action","method","data-form-title","data-form-email","data-form-alert","data-form-alert-danger","data-for","data-form-field","required","initialSignUpState","repassword","address","phone","redirectLoginPage","mandatoryFields","Container","LoginDiv","CustomTextBox","display","borderRadius","boxShadow","lineHeight","padding","TextCenter","textAlign","LinkA","a","SignUp","handleLogin","LoginRedirectLink","OnRegister","KeyValue","obj","Config","apiServiceURL","server","serverAPI","users","login","register","todo","activities","knowledgeBases","knowledgeArticles","projects","commonMessage","loginError","userNotFound","signUpError","alertVariants","primary","secondar","danger","warning","info","light","dark","activityStatus","defaultDropDownOptions","all","none","datetimeFormat","yyyyMMdd","ddMMyyyy","localStorageKey","appState","UserServiceApi","configs","axiosConfig","userLogin","userRegister","getAllUsers","getById","credentials","then","localStorage","setItem","catch","objs","User","userId","token","CloseButton","AlertStyle","AlertDiv","show","setShow","flag","Alert","handleOnCloseButton","initialUserState","UserComponent","userService","getQuestion","handleSubmit","form","updateUser","questions","order","sort","b","withRouter","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","stopPropagation","SelectColumnFilter","useMemo","Set","row","add","values","fuzzyTextFilterFn","matchSorter","autoRemove","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","classes","useTheme","page","rowsPerPage","onChangePage","IconButton","direction","Math","ceil","max","position","shape","fade","palette","white","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","InputBase","input","inputProps","useToolbarStyles","formControl","minWidth","maxWidth","paddingLeft","highlight","secondary","main","lighten","flex","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","TableToolbar","numSelected","deleteRecordHandler","addRecordHandler","TableName","allColumns","clsx","toString","Tooltip","Typography","FormControl","InputLabel","Select","labelId","Input","renderValue","join","MenuItem","getToggleHiddenProps","ListItemText","Table","columns","fetchData","controlledPageCount","pageCount","skipPageReset","selectedId","filterTypes","fuzzyText","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetPage","manualPagination","useGlobalFilter","useFilters","useSortBy","usePagination","useRowSelect","hooks","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","gotoPage","setPageSize","pageIndex","pageSize","selectedRowIds","TableContainer","selectedRowIndex","x","parseInt","selectedRecord","_","includes","TableHead","headerGroup","TableRow","getHeaderGroupProps","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","canFilter","columnDisableGlobalFilter","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","native","newPage","onChangeRowsPerPage","ActionsComponent","UserContainer","allUser","userList","isLoading","getUserByFilter","deleteUserHandler","pagination","storeUser","startRow","endRow","slice","records","confirm","deleteRecords","accessor","original","exact","path","payload","ActivityService","getAllData","Project","manager","members","comments","createdBy","createdDate","updatedBy","updatedDate","comment","Date","Activity","description","implemetationPlan","project","planDate","actualDate","status","assignedTo","initialActivityStates","activity","isEditRecord","BreakLine","cssProperties","initialCommentStates","newComment","Comment","userComment","commentDate","LeftDiv","RightDiv","ButtonCustom","ContainerInlineBlock","CommentDiv","CommentLog","handleSubmitComment","renderCommentTitle","loginUser","toUTCString","onSubmitComment","dangerouslySetInnerHTML","__html","reverse","com","renderCommentRawHTML","CommonService","format","year","getFullYear","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","replace","fixedFormatTwoDigit","object1","object2","obj1","obj2","entries","CommentLeftStyle","CommentRightStyle","CommentHeaderStyle","CommentBreakLineStyle","paddingTop","borderBottom","TextCenterStyle","ActivityComponent","activityService","commonService","renderCommentLog","convertFormToObject","getActivityUpdated","update","createNew","activityChanged","activityId","nComment","updateComment","reload","ReactDOMServer","renderToString","convertDateToStringByFormat","currentAct","formAct","searchBar","unshift","ActivityContainer","allActivity","activityList","redirectCreateNew","getActivityByFilter","deleteActivityHandler","addActivityHandler","redirectToCreateNew","storeActivities","acts","initialLoginState","rememberMe","redirectForgotPassword","redirectRegisterPage","LinkDiv","Login","handleChangeByClick","handleForgotPassowrd","handleRegisterPage","ForgotPasswordRedirectLink","RegisterPageRedirectLink","OnLogin","KnowledgeBaseService","KnowledgeBase","owner","initialKnowledgeBaseStates","knowledgeBase","KnowledgeBaseComponent","knowledgeBaseService","getKnowledgeBaseUpdated","knowledgeBaseChanged","knowledgeBaseId","KnowledgeBaseContainer","allKnowledgeBase","knowledgeBaseList","getKnowledgeBaseByFilter","deleteKnowledgeBaseHandler","addKnowledgeBaseHandler","storeKnowledgeBases","KnowledgeArticleService","KnowledgeArticle","shortDescription","contents","reviewer","version","initialKnowledgeArticleStates","knowledgeArticle","DownloadContainerDiv","dropdownStyle","fontWeight","DocumentViewer","printWindow","open","document","write","close","print","Dropdown","Toggle","Menu","Item","handleOnclick","fontFamily","PreviewContainerDiv","KnowledgeArticleComponent","knowledgeArticleService","Button","contentStyle","overflow","KnowledgeArticleContainer","allKnowledgeArticle","knowledgeArticleList","getKnowledgeArticleByFilter","deleteKnowledgeArticleHandler","addKnowledgeArticleHandler","storeKnowledgeArticles","ProjectService","initialProjectStates","ProjectComponent","projectService","getProjectUpdated","projectId","projectChanged","record","ProjectContainer","allProject","projectList","getProjectByFilter","deleteProjectHandler","addProjectHandler","storeProjects","App","redirectLogin","redirectHome","alertConfig","handleOnSubmitLoginForm","handleOnSubmitRegisterForm","handleRenderRedirectRouter","handleRenderAlert","handleOnCloseAlert","username","newUser","Footer","REACT_APP_ACTIVITY_LOGS_SERVER","initialState","updateRequest","noRequests","persistConfig","storage","rootReducer","combineReducers","persistedReducer","persistReducer","middlewares","thunkMiddleware","middlewareConfig","interceptors","req","getState","dispatch","getSourceAction","Authorization","middleWareEnhancer","applyMiddleware","axiosMiddleware","createStore","composeWithDevTools","persistor","persistStore","override","css","LoadingSpinner","size","loading","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9e35e34c.chunk.js","sourcesContent":["import { QuestionBase } from \"./questions/question-base\";\r\n\r\n\r\nexport interface DynamicFormProps {\r\n    ListFields: QuestionBase<string>[],\r\n    OnSubmitCallback: (form: DynamicFormStates) => void\r\n}\r\n\r\nexport interface DynamicFormStates {\r\n    originalListFields: any,\r\n    listFields: any,\r\n    errors:{[s:string]: string[]},\r\n    disableSubmitButton: boolean\r\n    \r\n}\r\n\r\nexport const initialDynamicFormStates: DynamicFormStates = {\r\n    originalListFields: {},\r\n    listFields : {},\r\n    errors: {},\r\n    disableSubmitButton: true\r\n}","export interface ReferenceProps {\r\n    serverUrl: string,\r\n    displayField: string,   //the field will show on search bar\r\n    listFields?: string[],  //the list of field will show in options\r\n    filterCondition?: string,\r\n    onSelectionChange: (selected: ReferenceStates) => void,\r\n    selected?: any,\r\n    referenceKey: string,\r\n    multiple?: boolean\r\n}\r\n\r\nexport interface ReferenceStates {\r\n    referenceKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    data: any[]\r\n}\r\n\r\nexport const initialReferenceStates: ReferenceStates = {\r\n    referenceKey: '',\r\n    originalSelected: null,\r\n    selected: null,\r\n    data: []\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\nexport class ReferenceService {\r\n    constructor(config: AxiosRequestConfig) {\r\n        this.getByUrl = this.getByUrl.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get data by url\r\n     */\r\n    public async getByUrl(url: string): Promise<any[]>{\r\n        try {\r\n            const res: AxiosResponse<any[]> = await commonAPI.get<any, AxiosResponse<any[]>>(url);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { ReferenceProps, ReferenceStates, initialReferenceStates } from './ReferencePropsStates';\r\nimport { TextField, Checkbox } from '@material-ui/core';\r\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport './ReferenceList.scss';\r\nimport { ReferenceService } from './Reference.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nexport class ReferenceList extends React.Component<ReferenceProps, ReferenceStates>{\r\n    referenceService: ReferenceService;\r\n    constructor(props: ReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = initialReferenceStates;\r\n        this.referenceService = new ReferenceService(apiConfig.apiConfig);\r\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\r\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n\r\n        let allReference = await this.referenceService.getByUrl(this.props.serverUrl);\r\n        let displayedData: any[] = [];\r\n        allReference.forEach(element => {\r\n            delete element['createdBy'];\r\n            delete element['createdDate'];\r\n            delete element['updatedBy'];\r\n            delete element['updatedDate'];\r\n            let newObj = JSON.parse(JSON.stringify(element));   //clone object\r\n            //remove the fields that do not display\r\n            if (this.props.listFields) {\r\n                for (let p in newObj) {\r\n                    if (this.props.listFields.indexOf(p) === -1 && p !== '_id' && p !== this.props.displayField) {\r\n                        delete newObj[p];\r\n                    }\r\n                }\r\n                displayedData.push(newObj);\r\n            }\r\n        });\r\n        //get selected items to show checkbox if multiple autocomplete is enable\r\n        if (this.props.multiple) {\r\n            selected = [];\r\n            displayedData.forEach((value) => {\r\n                if (selected && (selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\r\n                    selected.push(value);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            selected: selected,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            referenceKey: this.props.referenceKey,\r\n            data: displayedData\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            //get selected items to show checkbox if multiple autocomplete is enable\r\n            let selected = this.props.selected;\r\n            if (this.props.multiple) {\r\n                selected = [];\r\n                this.state.data.forEach((value) => {\r\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"_id\"] === value[\"_id\"] }).length === 1) {\r\n                        selected.push(value);\r\n                    }\r\n                });\r\n            }\r\n            this.setState({\r\n                selected: selected,\r\n                originalSelected: JSON.parse(JSON.stringify(selected))\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle action close dropdown list\r\n     * @param event change event\r\n     * @param reason reason for close\r\n     */\r\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\r\n        //update selected value for the parent component\r\n        this.props.onSelectionChange(this.state);\r\n    }\r\n\r\n    /**\r\n     * Handle action change selection\r\n     * @param event change event\r\n     * @param value value selected\r\n     * @param reason reason for change\r\n     */\r\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\r\n        this.setState({\r\n            selected: value\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete\r\n                multiple={this.props.multiple}\r\n                id=\"autocomplete-box\"\r\n                className=\"font-theme\"\r\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\r\n                onClose={this.onCloseDropdown}\r\n                onChange={this.onChangeDropdown}\r\n                options={this.state.data}\r\n                disableCloseOnSelect={this.props.multiple}\r\n                autoSelect\r\n                autoHighlight\r\n                getOptionLabel={(option) => option[this.props.displayField]}\r\n                renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                        {\r\n                            this.props.multiple ?\r\n                                (\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                )\r\n                                :\r\n                                ('')\r\n                        }\r\n                        {\r\n                            Object.keys(option).filter((val) => {\r\n                                return val !== '_id';\r\n                            }).map((opt, ind) => (\r\n                                <span className=\"font-theme\" style={{ paddingRight: '10px' }} key={ind}>{option[opt]}</span>\r\n                            ))\r\n                        }\r\n                    </React.Fragment>\r\n                )}\r\n                style={{ width: '100%' }}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}","import { KeyValue } from \"../../../class/common/keyValue\";\r\n\r\nexport interface DropDownProps {\r\n    options: KeyValue[],\r\n    dropdownKey: string,\r\n    onSelectionChange: (selected: DropDownStates) => void,\r\n    selected?: any,\r\n    multiple?: boolean\r\n}\r\n\r\nexport interface DropDownStates {\r\n    dropdownKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    searchKey: string,\r\n}\r\n\r\nexport const initialDropDownStates: DropDownStates = {\r\n    dropdownKey: '',\r\n    originalSelected: null,\r\n    //default value is None\r\n    selected: null,\r\n    searchKey: ''\r\n}","import React from 'react';\r\nimport { DropDownProps, DropDownStates, initialDropDownStates } from './DropDownPropsStates';\r\nimport { TextField, Checkbox } from '@material-ui/core';\r\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport './DropdownList.scss';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nexport class CustomDropDown extends React.Component<DropDownProps, DropDownStates>{\r\n    constructor(props: DropDownProps) {\r\n        super(props);\r\n\r\n        this.state = initialDropDownStates;\r\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\r\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;    //default option\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n\r\n        //get selected items to show checkbox if multiple autocomplete is enable\r\n        if (this.props.multiple) {\r\n            selected = [];\r\n            this.props.options.forEach((value) => {\r\n                if (selected && (selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\r\n                    selected.push(value);\r\n                }\r\n            });\r\n        }\r\n        this.setState({\r\n            selected: selected,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            dropdownKey: this.props.dropdownKey\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            //get selected items to show checkbox if multiple autocomplete is enable\r\n            let selected = this.props.selected;\r\n            if (this.props.multiple) {\r\n                selected = [];\r\n                this.props.options.forEach((value) => {\r\n                    if (this.props.selected && (this.props.selected as any[]).filter((val) => { return val[\"key\"] === value[\"key\"] }).length === 1) {\r\n                        selected.push(value);\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                selected: selected,\r\n                originalSelected: JSON.parse(JSON.stringify(selected))\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle action close dropdown list\r\n     * @param event change event\r\n     * @param reason reason for close\r\n     */\r\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\r\n        //update selected value for the parent component\r\n        this.props.onSelectionChange(this.state);\r\n    }\r\n\r\n    /**\r\n     * Handle action change selection\r\n     * @param event change event\r\n     * @param value value selected\r\n     * @param reason reason for change\r\n     */\r\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\r\n        this.setState({\r\n            selected: value\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete\r\n                multiple={this.props.multiple}\r\n                id=\"autocomplete-box\"\r\n                className=\"font-theme\"\r\n                value={(this.props.multiple && !this.state.selected) ? [] : this.state.selected}\r\n                onClose={this.onCloseDropdown}\r\n                onChange={this.onChangeDropdown}\r\n                options={this.props.options}\r\n                disableCloseOnSelect={this.props.multiple}\r\n                autoSelect\r\n                autoHighlight\r\n                getOptionLabel={(option) => option['value'] ? option['value'] : ''}\r\n                renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                        {\r\n                            this.props.multiple ?\r\n                                (\r\n                                    <Checkbox\r\n                                        icon={icon}\r\n                                        checkedIcon={checkedIcon}\r\n                                        style={{ marginRight: 8 }}\r\n                                        checked={selected}\r\n                                    />\r\n                                )\r\n                                :\r\n                                ('')\r\n                        }\r\n                        <span>{option.value}</span>\r\n                    </React.Fragment>\r\n                )}\r\n                style={{ width: '100%' }}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}","import { ODateRange } from \"../../../class/common/date-range\";\r\n\r\nexport interface DateRangeProps {\r\n    dateRange?: ODateRange,\r\n    onSelectionChange: (selected: DateRangeStates) => void,\r\n    referenceKey: string\r\n}\r\n\r\nexport interface DateRangeStates {\r\n    referenceKey: string,\r\n    originalDateRange: ODateRange,\r\n    dateRange: ODateRange,\r\n    startDate: any,\r\n    endDate: any\r\n}\r\n\r\nexport const initialDateRangeStates: DateRangeStates = {\r\n    referenceKey: '',\r\n    originalDateRange: new ODateRange(),\r\n    dateRange: new ODateRange(),\r\n    startDate: null,\r\n    endDate: null\r\n}","/**\r\n * Require react-datepicker\r\n */\r\nimport React from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { DateRangeProps, DateRangeStates, initialDateRangeStates } from './DateRangePropsStates';\r\nimport './DateRange.scss';\r\nimport styled from 'styled-components';\r\nimport { ODateRange } from '../../../class/common/date-range';\r\nconst ContainerDiv = styled.div`\r\n    width: 100%;\r\n`;\r\nconst StartDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nconst EndDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nexport class DateRange extends React.Component<DateRangeProps, DateRangeStates>{\r\n    constructor(props: DateRangeProps) {\r\n        super(props);\r\n\r\n        this.state = initialDateRangeStates;\r\n\r\n        this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\r\n        this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let dateRange = new ODateRange();\r\n        if (this.props.dateRange) {\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n        }\r\n        this.setState({\r\n            referenceKey: this.props.referenceKey,\r\n            dateRange: dateRange,\r\n            originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.dateRange){\r\n            let dateRange = new ODateRange();\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n            if (JSON.stringify(this.state.originalDateRange) !== JSON.stringify(dateRange)) {\r\n                this.setState({\r\n                    dateRange: dateRange,\r\n                    originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle start date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeStartDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: date,\r\n            endDate: this.state.dateRange.endDate\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle end date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeEndDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: this.state.dateRange.startDate,\r\n            endDate: date\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <StartDateDiv>\r\n                    <div>Start Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        maxDate={this.state.dateRange.endDate}\r\n                        selected={this.state.dateRange.startDate}\r\n                        onChange={this.handleChangeStartDate}\r\n                    />\r\n                </StartDateDiv>\r\n                <EndDateDiv>\r\n                    <div>End Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        minDate={this.state.dateRange.startDate}\r\n                        selected={this.state.dateRange.endDate}\r\n                        onChange={this.handleChangeEndDate}\r\n                    />\r\n                </EndDateDiv>\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from \"axios\";\r\nimport { apiConfig } from \"../configuration/api.config\";\r\n\r\n/**\r\n * ES6 Axios Class.\r\n *\r\n * @class Api\r\n * @extends {Axios}\r\n * @example\r\n * class UserApi extends Api {\r\n *   public constructor (config) {\r\n *     super(config);\r\n *\r\n *     this.login=this.login.bind(this);\r\n *   }\r\n *\r\n *   public login (user: User) {\r\n *     return this.api.post<string, User, AxiosResponse<User>>(\"https://www.domain/login\", {name: user.name, pass: user.pass})\r\n *        .then((res: AxiosResponse<string>) => res.data);\r\n *   }\r\n * }\r\n */\r\nclass Api {\r\n    [x: string]: any;\r\n    numberOfRequest: number;\r\n    api: AxiosInstance;\r\n    /**\r\n     * Creates an instance of Api.\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios configuration.\r\n     * @memberof Api\r\n     */\r\n    public constructor(config?: AxiosRequestConfig) {\r\n        this.api = axios.create(config);\r\n        this.numberOfRequest = 0;\r\n\r\n        this.getUri = this.getUri.bind(this);\r\n        this.request = this.request.bind(this);\r\n        this.get = this.get.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.head = this.head.bind(this);\r\n        this.post = this.post.bind(this);\r\n        this.put = this.put.bind(this);\r\n        this.patch = this.patch.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get Uri\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config]\r\n     * @returns {string}\r\n     * @memberof Api\r\n     */\r\n    public getUri(config?: AxiosRequestConfig): string {\r\n        return this.api.getUri(config);\r\n    }\r\n\r\n    /**\r\n     * Generic request.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP axios response payload.\r\n     * @memberof Api\r\n     *\r\n     * @example\r\n     * api.request({\r\n     *   method: \"GET|POST|DELETE|PUT|PATCH\"\r\n     *   baseUrl: \"http://www.domain.com\",\r\n     *   url: \"/api/v1/users\",\r\n     *   headers: {\r\n     *     \"Content-Type\": \"application/json\"\r\n     *  }\r\n     * }).then((response: AxiosResponse<User>) => response.data)\r\n     *\r\n     */\r\n    public request<T, R = AxiosResponse<T>>(config: AxiosRequestConfig): Promise<R> {\r\n        return this.api.request(config);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET method, used to fetch data `statusCode`: 200.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} HTTP `axios` response payload.\r\n     * @memberof Api\r\n     */\r\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.get(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP DELETE method, `statusCode`: 204 No Content.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.delete(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP HEAD method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public head<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.head(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP POST method `statusCode`: 201 Created.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public post<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.post(url, data, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP PUT method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public put<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.put(url, data, config);\r\n    }\r\n\r\n    /**\r\n      * HTTP PATCH method.\r\n      *\r\n      * @access public\r\n      * @template T - `TYPE`: expected object.\r\n      * @template B - `BODY`: body request object.\r\n      * @template R - `RESPONSE`: expected object inside a axios response format.\r\n      * @param {string} url - endpoint you want to reach.\r\n      * @param {B} data - payload to be send as the `request body`,\r\n      * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n      * @returns {Promise<R>} - HTTP [axios] response payload.\r\n      * @memberof Api\r\n      */\r\n    public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.patch(url, data, config);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @template T - type.\r\n     * @param {import(\"axios\").AxiosResponse<T>} response - axios response.\r\n     * @returns {T} - expected object.\r\n     * @memberof Api\r\n     */\r\n    public success<T>(response: AxiosResponse<T>): T {\r\n        return response.data;\r\n    }\r\n\r\n    public error(error: AxiosError<Error>) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const commonAPI = new Api(apiConfig);","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class DropdownQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  options: {key: string, value: string}[] = [];\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.options = options['options'] || [];\r\n    this.controlType = new FormConfig().questionControlType.dropdown;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextAreaQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textarea;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextboxQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textbox;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\nimport { ODateRange } from '../../../class/common/date-range';\r\n\r\nexport class DateRangeQuestion extends QuestionBase<ODateRange> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.dateRange;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class ReferenceQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.reference;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class CkeditorQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.ckeditor;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport styled from 'styled-components';\r\nimport './Ckeditor.scss';\r\n\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\n\r\nexport class ReactCkeditor extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={this.props.data}\r\n                    onInit={editor => {\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                        console.log('Editor is ready to use!', editor);\r\n                    }}\r\n                    onChange={(event, editor) => {\r\n                        const data = editor.getData();\r\n                        console.log({ event, editor, data });\r\n                        this.props.dataChange(data, this.props.ckeditorKey);\r\n                    }}\r\n                    onBlur={(event, editor) => {\r\n                        console.log('Blur.', editor);\r\n                    }}\r\n                    onFocus={(event, editor) => {\r\n                        console.log('Focus.', editor);\r\n                    }}\r\n                />\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}\r\n\r\nReactCkeditor.propTypes = {\r\n    data: PropTypes.string.isRequired,\r\n    dataChange: PropTypes.func.isRequired,\r\n    ckeditorKey: PropTypes.string.isRequired\r\n}","import React from 'react';\r\nimport { DynamicFormProps, DynamicFormStates, initialDynamicFormStates } from './DynamicFormPropState';\r\nimport styled from 'styled-components';\r\nimport { QuestionBase } from './questions/question-base';\r\nimport { FormConfig } from './form.config';\r\nimport { CustomDropDown } from '../Variables/DropdownList/DropdownList';\r\nimport { DropDownStates } from '../Variables/DropdownList/DropDownPropsStates';\r\nimport { ReferenceList } from '../Variables/ReferenceList/ReferenceList';\r\nimport { ReferenceStates } from '../Variables/ReferenceList/ReferencePropsStates';\r\nimport { DateRange } from '../Variables/DateRange/DateRange';\r\nimport { DateRangeStates } from '../Variables/DateRange/DateRangePropsStates';\r\nimport './DynamicForm.scss';\r\nimport { ODateRange } from '../../class/common/date-range';\r\nimport { ReactCkeditor } from '../Ckeditor/Ckeditor';\r\nconst ContainerDiv = styled.div`\r\n`;\r\nconst DangerText: React.CSSProperties = {\r\n    color: 'red',\r\n    fontStyle: 'italic'\r\n};\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nexport class DynamicForm extends React.Component<DynamicFormProps, DynamicFormStates>{\r\n    formConfig: FormConfig;\r\n    constructor(props: DynamicFormProps) {\r\n        super(props);\r\n\r\n        this.formConfig = new FormConfig();\r\n        this.state = initialDynamicFormStates;\r\n\r\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\r\n        this.renderQuestion = this.renderQuestion.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        //handle change\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onSelectionChangeCallback = this.onSelectionChangeCallback.bind(this);\r\n        this.onSelectionReferenceListChange = this.onSelectionReferenceListChange.bind(this);\r\n        this.onselectionDateRangeChange = this.onselectionDateRangeChange.bind(this);\r\n        this.onCkeditorChange = this.onCkeditorChange.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //wait for update from container element\r\n        let listFields: { [s: string]: any } = {};\r\n        this.props.ListFields.forEach((val) => {\r\n            listFields[val.key] = val.value;\r\n        });\r\n        if (JSON.stringify(this.state.originalListFields) !== JSON.stringify(listFields)) {\r\n            this.setState({\r\n                listFields: listFields,\r\n                originalListFields: JSON.parse(JSON.stringify(listFields))\r\n            }, () => {\r\n                let { errors, valid } = this.validateForm();\r\n                let disabled = !valid;\r\n                this.setState({\r\n                    disableSubmitButton: disabled,\r\n                    errors\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle date range selection changed\r\n     * @param e date range state\r\n     */\r\n    onselectionDateRangeChange(e: DateRangeStates) {\r\n        let listFields = this.state.listFields;\r\n        let newDateRange: ODateRange = e.dateRange;\r\n        listFields[e.referenceKey] = newDateRange;\r\n        this.setState({\r\n            listFields: listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handle reference list selected record\r\n     * @param e reference state\r\n     */\r\n    onSelectionReferenceListChange(e: ReferenceStates) {\r\n        let listFields = this.state.listFields;\r\n        listFields[e.referenceKey] = e.selected;\r\n        this.setState({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle dropdown list change\r\n     * @param e Dropdown state\r\n     */\r\n    onSelectionChangeCallback(e: DropDownStates) {\r\n        let listFields = this.state.listFields;\r\n        listFields[e.dropdownKey] = e.selected;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle input change\r\n     * @param event event\r\n     */\r\n    handleChange(event: any) {\r\n        event.preventDefault();\r\n        const { name, value } = event.target;\r\n        let listFields = this.state.listFields;\r\n        listFields[name] = value;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On ckeditor change handler\r\n     * @param str string value\r\n     * @param key key of question\r\n     */\r\n    onCkeditorChange(str: string, key: string) {\r\n        let listFields = this.state.listFields;\r\n        listFields[key] = str;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate the form\r\n     */\r\n    validateForm() {\r\n        let valid = true;\r\n        let errors: { [s: string]: string[] } = {};\r\n        this.props.ListFields.forEach(element => {\r\n            errors[element.key] = [];\r\n            switch (element.controlType) {\r\n                case this.formConfig.questionControlType.textbox:\r\n                case this.formConfig.questionControlType.textarea:\r\n                    for (var key1 in element.validators) {\r\n                        switch (key1) {\r\n                            case this.formConfig.formValidators.require:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key] !== \"\")) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.minLength:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length >= element.validators[key].value)) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.maxLength:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length <= element.validators[key].value)) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.email:\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.reference:\r\n                    for (var key2 in element.validators) {\r\n                        switch (key2) {\r\n                            case this.formConfig.formValidators.require:\r\n                                if (!this.state.listFields[element.key] || this.state.listFields[element.key]._id == null) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key2].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.dropdown:\r\n                    for (var key3 in element.validators) {\r\n                        switch (key3) {\r\n                            case this.formConfig.formValidators.require:\r\n                                //not have value or value is 0 = [--none--]\r\n                                if (!this.state.listFields[element.key]\r\n                                    || !this.state.listFields[element.key].key\r\n                                    || this.state.listFields[element.key].key === 0\r\n                                ) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key3].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.dateRange:\r\n                    for (var key4 in element.validators) {\r\n                        switch (key4) {\r\n                            case this.formConfig.formValidators.require:\r\n                                //not have value or value of one of two date is null\r\n                                if (!this.state.listFields[element.key] ||\r\n                                    this.state.listFields[element.key].startDate == null ||\r\n                                    this.state.listFields[element.key].endDate == null) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key4].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        });\r\n        for (var key in errors) {\r\n            if (errors[key].length > 0) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return { errors, valid };\r\n    }\r\n\r\n    /**\r\n     * Render error message base on question key\r\n     * @param questionKey question key\r\n     */\r\n    renderErrorMessage(questionKey: string) {\r\n        //get state.error message base on question key\r\n        let errors = this.state.errors[questionKey];\r\n        //if there is no error => return\r\n        if (!errors) return;\r\n        //else display error message\r\n        return (\r\n            <div style={DangerText}>\r\n                {\r\n                    errors.map((err, i) => (\r\n                        <div key={i}>\r\n                            <span>{err}</span>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Render questions\r\n     * @param question question definition\r\n     */\r\n    renderQuestion(question: QuestionBase<any>) {\r\n        //depend on type of question => render appropriate element\r\n        switch (question.controlType) {\r\n            case this.formConfig.questionControlType.textbox: //type textbox\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <input className=\"form-control\"\r\n                            onChange={this.handleChange}\r\n                            readOnly={question.readonly}\r\n                            type={question.type}\r\n                            name={question.key}\r\n                            value={this.state.listFields[question.key] || ''}\r\n                            id={question.key} />\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.textarea:    //type text area\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <textarea className=\"form-control\"\r\n                            onChange={this.handleChange}\r\n                            readOnly={question.readonly}\r\n                            rows={question.rows}\r\n                            name={question.key}\r\n                            value={this.state.listFields[question.key]}\r\n                            id={question.key} ></textarea>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.dropdown:    //type dropdown\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <CustomDropDown\r\n                            selected={question.value}\r\n                            dropdownKey={question.key}\r\n                            onSelectionChange={this.onSelectionChangeCallback}\r\n                            options={question.options}\r\n                            multiple={question.multiple}\r\n                            ></CustomDropDown>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.reference:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        {\r\n\r\n                            <ReferenceList serverUrl={question.serverUrl}\r\n                                displayField={question.displayField}\r\n                                listFields={question.listFields}\r\n                                filterCondition={question.filterCondition}\r\n                                referenceKey={question.key}\r\n                                selected={question.value}\r\n                                onSelectionChange={this.onSelectionReferenceListChange}\r\n                                multiple={question.multiple}\r\n                            ></ReferenceList>\r\n\r\n                        }\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            case this.formConfig.questionControlType.dateRange:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <DateRange referenceKey={question.key}\r\n                            dateRange={question.value}\r\n                            onSelectionChange={this.onselectionDateRangeChange}>\r\n                        </DateRange>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            case this.formConfig.questionControlType.ckeditor:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <ReactCkeditor\r\n                            data={question.value}\r\n                            dataChange={this.onCkeditorChange}\r\n                            ckeditorKey={question.key}\r\n                        />\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <form onSubmit={(e) => { e.preventDefault(); this.props.OnSubmitCallback(this.state) }}>\r\n                    {this.props.ListFields.map((field, i) => (\r\n                        this.renderQuestion(field)\r\n                    ))}\r\n                    <input style={Margin0}\r\n                        type=\"submit\"\r\n                        value=\"Submit\"\r\n                        disabled={this.state.disableSubmitButton}\r\n                        className=\"btn btn-primary btn-block\" />\r\n                </form>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","export * from './DynamicForm';\r\nexport * from './DynamicFormPropState';\r\nexport * from './form.config';\r\nexport * from './class/validator';\r\nexport * from './questions/question-base';\r\nexport * from './questions/question-dropdown';\r\nexport * from './questions/question-textarea';\r\nexport * from './questions/question-textbox';\r\nexport * from './questions/question-daterange';\r\nexport * from './questions/question-reference';\r\nexport * from './questions/question-ckeditor';","import { AxiosRequestConfig } from \"axios\";\r\nconst qs = require(\"qs\");\r\nexport const API_TIMEOUT = Number(process.env.REACT_APP_API_TIMEOUT) || 10000;\r\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL || \"\";\r\n\r\nexport const apiConfig: AxiosRequestConfig = {\r\n    // withCredentials: true,\r\n    timeout: API_TIMEOUT,\r\n    baseURL: REACT_APP_SERVER_URL,\r\n    headers: {\r\n        common: {\r\n            // \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\r\n            // Pragma: \"no-cache\",\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\"\r\n        }\r\n    },\r\n    paramsSerializer: (params: string) => qs.stringify(params, { indices: false })\r\n};\r\n","export class FormConfig {\r\n    formValidators = {          //the understand the value => refer the attributes of Validators in angular form, see in question-control.service.ts\r\n        require: \"required\",\r\n        minLength: \"minLength\",\r\n        maxLength: \"maxLength\",\r\n        email: \"email\"\r\n    }\r\n\r\n    inputTypeDef = {\r\n        button: 'button',\r\n        checkbox: 'checkbox',\r\n        color: 'color',\r\n        date: 'date',\r\n        datetime: 'datetime',\r\n        datetimeLocal: 'datetime-local',\r\n        email: 'email',\r\n        file: 'file',\r\n        hidden: 'hidden',\r\n        image: 'image',\r\n        month: 'month',\r\n        number: 'number',\r\n        password: 'password',\r\n        radio: 'radio',\r\n        range: 'range',\r\n        reset: 'reset',\r\n        search: 'search',\r\n        submit: 'submit',\r\n        tel: 'tel',\r\n        text: 'text',\r\n        time: 'time',\r\n        url: 'url',\r\n        week: 'week'\r\n    }\r\n\r\n    questionControlType = {\r\n        textbox: 'textbox',\r\n        textarea: 'textarea',\r\n        dropdown: 'dropdown',\r\n        reference: 'reference',\r\n        dateRange: 'daterange',\r\n        ckeditor: 'ckeditor'\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nexport class About extends React.Component {\r\n\r\n    render() {\r\n        const myStyleBorder = {\r\n            border: 0\r\n        } as React.CSSProperties;\r\n        const mystyleAbout = {\r\n            width: '90%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div style={mystyleAbout}>\r\n                <section className=\"team1 cid-s05ipp9BuT\" id=\"team1-g\">\r\n                    <div className=\"container align-center\">\r\n                        <h2 className=\"pb-3 mbr-fonts-style mbr-section-title display-2\">\r\n                            OUR AWESOME TEAM\r\n                        </h2>\r\n                        <h3 className=\"pb-5 mbr-section-subtitle mbr-fonts-style mbr-light display-5\">\r\n                            Click any icon or text to edit or style it. Click blue \"Gear\" icon in the top right corner to hide/show text and change the block and cards background, icons count and other.\r\n                        </h3>\r\n                        <div className=\"row media-row\">\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Steven Bruce</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a href=\"https://twitter.com/mobirise\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Anissa Fisher</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"map2 cid-s05h5y5RKs\" id=\"map2-9\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"google-map\">\r\n                                    <iframe title=\"google map\" frameBorder=\"0\" style={myStyleBorder} src=\"https://www.google.com/maps/embed/v1/place?key=AIzaSyCy9r70T3NYf3PhvVflTo0_zdif2_IoIYs&amp;q=place_id:ChIJ3VvA2VkrdTERuSbE1OXl8E8\" allowFullScreen></iframe>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Home.scss';\r\nexport class Home extends React.Component {\r\n    render() {\r\n        const myStyle = {\r\n            opacity: '0.5',\r\n            backgroundColor: 'rgb(35, 35, 35)'\r\n        } as React.CSSProperties;\r\n        const myStyleWidth100 = {\r\n            width: '100%'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div>\r\n                <section className=\"cid-s05dw7YB4t mbr-fullscreen mbr-parallax-background\" id=\"header2-1\">\r\n                    <div className=\"mbr-overlay\" style={myStyle}></div>\r\n                    <div className=\"container align-center\">\r\n                        <div className=\"justify-content-md-center\">\r\n                            <div className=\"mbr-white\">\r\n                                <h1 className=\"mbr-section-title mbr-bold pb-3 mbr-fonts-style display-1\">\r\n                                    GrownUp\r\n                                </h1>\r\n                                <p className=\"mbr-text pb-3 mbr-fonts-style display-5\">\r\n                                    Build the future together\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mbr-arrow hidden-sm-down\" aria-hidden=\"true\">\r\n                        <a href=\"#footer\">\r\n                            <i className=\"mbri-down mbr-iconfont\"></i>\r\n                        </a>\r\n                    </div>\r\n                </section>\r\n                <section className=\"header7 cid-s05dxD9ioe\" id=\"header7-2\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"media-content align-right\">\r\n                                <h1 className=\"mbr-section-title mbr-white pb-3 mbr-fonts-style display-1\">\r\n                                    Intro with Video\r\n                                </h1>\r\n                                <div className=\"mbr-section-text mbr-white pb-3\">\r\n                                    <p className=\"mbr-text mbr-fonts-style display-5\">\r\n                                        Intro with background color, paddings and a video on the right. Mobirise helps you cut down development time by providing you with a flexible website editor with a drag and drop interface.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-figure\" style={myStyleWidth100}>\r\n                                <iframe title=\"introduce-video\" className=\"mbr-embedded-video\" src=\"https://www.youtube.com/embed/uNCr7NdOJgw?rel=0&amp;amp;showinfo=0&amp;autoplay=0&amp;loop=0\" width=\"1280\" height=\"720\" frameBorder=\"0\" allowFullScreen></iframe>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"testimonials1 cid-s05iIc8MxP\" id=\"testimonials1-h\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"title col-12 align-center\">\r\n                                <h2 className=\"pb-3 mbr-fonts-style display-2\">\r\n                                    WHAT OUR FANTASTIC USERS SAY\r\n                                </h2>\r\n                                <h3 className=\"mbr-section-subtitle mbr-light pb-3 mbr-fonts-style display-5\">\r\n                                    This theme is based on Bootstrap 4 - most powerful mobile first framework\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container pt-3 mt-2\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"1\" src={`${process.env.PUBLIC_URL}/assets/images/face1.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"2\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"3\" src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"4\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"5\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"6\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { logoutUser } from '../../../redux/store/user/actions';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../redux/store';\r\nimport { User } from '../../../class/user';\r\ntype ToolbarProps = {\r\n    logoutUser: typeof logoutUser,\r\n    user: User\r\n}\r\ntype ToolbarStates = {\r\n}\r\nclass Toolbar extends React.Component<ToolbarProps, ToolbarStates> {\r\n    constructor(props: ToolbarProps) {\r\n        super(props);\r\n\r\n        this.logout = this.logout.bind(this);\r\n        this.renderManagementLink = this.renderManagementLink.bind(this);\r\n        this.renderProfileLink = this.renderProfileLink.bind(this);\r\n        this.renderServiceLink = this.renderServiceLink.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle logout action\r\n     */\r\n    logout() {\r\n        this.props.logoutUser();\r\n    }\r\n\r\n    renderProfileLink() {\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        <span className=\"mbri-user mbr-iconfont mbr-iconfont-btn\"></span>{this.props.user.firstName} {this.props.user.lastName}\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to={`/users/${this.props.user._id}`}>Profile</Link>\r\n                        <Link className=\"nav-link link text-white display-4\" to=\"/login\" onClick={this.logout}>\r\n                            Logout\r\n                        </Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        else {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/login\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render Management Link\r\n     */\r\n    renderManagementLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        Management\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/projects\">Projects</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/activities\">Activities</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgebases\">Knowledge Bases</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgearticles\">Knowledge Articles</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/users\">Users</Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render service link\r\n     */\r\n    renderServiceLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/service\">Services</Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n    // After the component did mount\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const mystyles = {\r\n            height: '3.8rem'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <section className=\"menu cid-s05eVtUnGb\" id=\"menu1-7\" style={{zIndex: 100000}}>\r\n                <nav className=\"navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top navbar-toggleable-sm\">\r\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <div className=\"hamburger\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </button>\r\n                    <div className=\"menu-logo\">\r\n                        <div className=\"navbar-brand\">\r\n                            <span className=\"navbar-logo\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-122x68.jpg`} alt=\"GrownUp\" title=\"\" style={mystyles} />\r\n                                </a>\r\n                            </span>\r\n                            <span className=\"navbar-caption-wrap\">\r\n                                <a className=\"navbar-caption text-white display-4\" href=\"/\">\r\n                                    GrownUp\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav nav-dropdown\" data-app-modern-menu=\"true\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderManagementLink()\r\n                            }\r\n                            {\r\n                                this.renderServiceLink()\r\n                            }\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/about\">About Us</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderProfileLink()\r\n                            }\r\n                        </ul>\r\n                        <div className=\"navbar-buttons mbr-section-btn\">\r\n                            <Link className=\"text-white btn btn-sm btn-primary display-4\" to=\"/contact\">Contact Us</Link>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user.currentUser\r\n    }\r\n}\r\nconst MapDispatchToProps = {\r\n    logoutUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(Toolbar);","import { USER_LOGOUT, USER_LOGIN, STORE_USER } from \"./types\";\r\nimport { User } from \"../../../class/user\";\r\n\r\nexport function storeUser(users: User[]){\r\n  return {\r\n    type: STORE_USER,\r\n    payload: users\r\n  };\r\n}\r\n\r\nexport function loginUser(loginUser: User) {\r\n  return {\r\n    type: USER_LOGIN,\r\n    payload: loginUser\r\n  };\r\n}\r\n\r\nexport function logoutUser() {\r\n  return {\r\n    type: USER_LOGOUT,\r\n    meta: {}\r\n  };\r\n}\r\n","import { User } from \"../../../class/user\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const USER_LOGIN = \"USER_LOGIN\";\r\nexport const USER_LOGOUT = \"USER_LOGOUT\";\r\nexport const STORE_USER = \"STORE_USER\";\r\n\r\ninterface UserLoginAction {\r\n  type: typeof USER_LOGIN;\r\n  payload: User;\r\n}\r\n\r\ninterface UserLogoutAction {\r\n  type: typeof USER_LOGOUT;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\ninterface StoreUserAction {\r\n  type: typeof STORE_USER;\r\n  payload: User[];\r\n}\r\n\r\nexport type UserActionTypes = UserLoginAction | UserLogoutAction | StoreUserAction;\r\n","import React from 'react';\r\nexport class Contact extends React.Component {\r\n    render() {\r\n        const formContainer = {\r\n            width: '50%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div className=\"contact-component\">\r\n                <section className=\"mbr-section form4 cid-s05iX5CkzH\" id=\"form4-k\">\r\n                    <div className=\"container\">\r\n                        <div style={formContainer}>\r\n                            <div>\r\n                                <h2 className=\"pb-3 align-left mbr-fonts-style display-2\">\r\n                                    Drop a Line\r\n                                </h2>\r\n                                <div>\r\n                                    <div className=\"icon-block pb-3 align-left\">\r\n                                        <span className=\"icon-block__icon\">\r\n                                            <span className=\"mbri-letter mbr-iconfont\"></span>\r\n                                        </span>\r\n                                        <h4 className=\"icon-block__title align-left mbr-fonts-style display-5\">\r\n                                            Don't hesitate to contact us\r\n                                        </h4>\r\n                                    </div>\r\n                                    <div className=\"icon-contacts pb-3\">\r\n                                        <h5 className=\"align-left mbr-fonts-style display-7\">\r\n                                            Ready for offers and cooperation\r\n                                        </h5>\r\n                                        <p className=\"mbr-text align-left mbr-fonts-style display-7\">\r\n                                            Phone: +84 (0) 33 870 5850 <br />\r\n                                            Email: robertvo.developer.93@mail.com\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div data-form-type=\"formoid\">\r\n                                    <form action=\"https://mobirise.com/\" method=\"POST\" className=\"mbr-form form-with-styler\" data-form-title=\"Mobirise Form\">\r\n                                        <input type=\"hidden\" name=\"email\" data-form-email=\"true\" value=\"NHgs6oyl7goD/2aO9xww+qh9DyXQV7DlGeDDf/DT7dkPO7mgri3MdhyGoeU3Q+oRWWU12LOq8p80NGjERdbxIWvoy+fcupNDheS2fFJMm7aX6zD0pQ7swhjl+LGjC1UD\" />\r\n                                        <div className=\"row\">\r\n                                            <div hidden={true} data-form-alert=\"\" className=\"alert alert-success col-12\">\r\n                                                Thanks for filling out the form!\r\n                                            </div>\r\n                                            <div hidden={true} data-form-alert-danger=\"\" className=\"alert alert-danger col-12\"></div>\r\n                                        </div>\r\n                                        <div className=\"dragArea row\">\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"name\">\r\n                                                <input type=\"text\" name=\"name\" placeholder=\"Your Name\" data-form-field=\"Name\" required={true} className=\"form-control input display-7\" id=\"name-form4-k\" />\r\n                                            </div>\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"phone\">\r\n                                                <input type=\"text\" name=\"phone\" placeholder=\"Phone\" data-form-field=\"Phone\" required={true} className=\"form-control input display-7\" id=\"phone-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"email\" className=\"col-md-12  form-group\">\r\n                                                <input type=\"text\" name=\"email\" placeholder=\"Email\" data-form-field=\"Email\" className=\"form-control input display-7\" required={true} id=\"email-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"message\" className=\"col-md-12  form-group\">\r\n                                                <textarea name=\"message\" placeholder=\"Message\" data-form-field=\"Message\" className=\"form-control input display-7\" id=\"message-form4-k\"></textarea>\r\n                                            </div>\r\n                                            <div className=\"col-md-12 input-group-btn  mt-2 align-center\">\r\n                                                <button type=\"submit\" className=\"btn btn-primary btn-form display-4\">SEND MESSAGE</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","export interface SignUpProp {\r\n\tOnRegister: (form:SignUpState) => void,\r\n\tLoginRedirectLink: string\r\n}\r\n\r\nexport type SignUpState = {\r\n\tfirstName: string,\r\n\tlastName: string,\r\n\temail: string,\r\n\tpassword: string,\r\n\trepassword: string,\r\n\taddress: string,\r\n\tphone: string,\r\n\tredirectLoginPage: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\terrors: any,\r\n\tmandatoryFields: any\r\n}\r\n\r\nexport const initialSignUpState: SignUpState = {\r\n\tfirstName: '',\r\n\tlastName: '',\r\n\temail: '',\r\n\tpassword: '',\r\n\trepassword: '',\r\n\taddress: '',\r\n\tphone: '',\r\n\tredirectLoginPage: false,\r\n\tdisableSubmitButton: true,\r\n\terrors: {\r\n\t\tfirstName: 'First Name is required',\r\n\t\tlastName: 'Last Name is required',\r\n\t\temail: 'Email is required',\r\n\t\tpassword: 'Password is required',\r\n\t\trepassword: 'Re-Password is required'\r\n\t},\r\n\tmandatoryFields: {\r\n\t\tfirstName: true,\r\n\t\tlastName: true,\r\n\t\temail: true,\r\n\t\tpassword: true,\r\n\t\trepassword: true,\r\n\t}\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { SignUpProp, SignUpState, initialSignUpState } from \"./SignUpPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    background-color: #232323;\r\n    padding-top: 30px;\r\n    padding-bottom: 20px;\r\n`;\r\nconst LoginDiv = styled.div`\r\n    width: 400px;\r\n    margin: auto;\r\n    background-color: #e9ecef;\r\n    padding: 40px;\r\n    border-radius: 15px;\r\n`;\r\nconst CustomTextBox: React.CSSProperties = {\r\n    display: 'block',\r\n    width: '100%',\r\n    borderRadius: '.25rem',\r\n    backgroundColor: '#f5f5f5',\r\n    boxShadow: 'none',\r\n    color: '#565656',\r\n    lineHeight: 1.43,\r\n    padding: '1.07em 0.5em',\r\n    height: 'calc(2.25rem + 2px)',\r\n    border: '1px solid #e8e8e8'\r\n}\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst DangerText: React.CSSProperties = {\r\n    color: 'red',\r\n    fontStyle: 'italic'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class SignUp extends Component<SignUpProp, SignUpState> {\r\n    constructor(props: SignUpProp) {\r\n        super(props);\r\n\r\n        //initial variable\r\n        this.state = initialSignUpState;\r\n\r\n        //binding functions\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * handle change value of form\r\n     * @param event Change event\r\n     */\r\n    handleChange(event: any) {\r\n        event.preventDefault();\r\n        const { name, value } = event.target;\r\n        this.setState<never>({\r\n            [name]: value\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate the sign up form\r\n     */\r\n    validateForm() {\r\n        let valid = true;\r\n        let errors: { [s: string]: string } = {};\r\n        errors['firstName'] = this.state.firstName.length > 0 ? \"\" : \"First Name is required\";\r\n        errors['lastName'] = this.state.lastName.length > 0 ? \"\" : \"Last Name is required\";\r\n        errors['email'] = this.state.email.length > 0 ? \"\" : \"Email is required\";\r\n        errors['password'] = this.state.password.length > 0 ? \"\" : \"Password is required\";\r\n        errors['repassword'] = this.state.repassword.length > 0 ? \"\" : \"Re-Password is required\";\r\n        if(this.state.repassword  !== \"\" && this.state.password !== this.state.repassword){\r\n            errors.repassword = \"Password and Re-Password are not match\";\r\n        }\r\n\r\n        for (var key in errors) {\r\n            if (errors[key].length > 0) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return { errors, valid };\r\n    }\r\n\r\n    /**\r\n     * Render error message base on question key\r\n     * @param questionKey question key\r\n     */\r\n    renderErrorMessage(questionKey: string) {\r\n        //get state.error message base on question key\r\n        let errors = this.state.errors[questionKey];\r\n        //if there is no error => return\r\n        if (!errors || errors === \"\") return;\r\n        //else display error message\r\n        return (\r\n            <div style={DangerText}>\r\n                {\r\n                    <div key={questionKey}>\r\n                        <span>{errors}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle redirect to login page\r\n     */\r\n    handleLogin() {\r\n        this.setState({\r\n            redirectLoginPage: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectLoginPage) {\r\n            return <Redirect push={true} to={this.props.LoginRedirectLink} />\r\n        }\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => { e.preventDefault(); this.props.OnRegister(this.state) }}>\r\n                        <h3 style={TextCenter}>Sign Up</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"First name\">First name</span>\r\n                            </label>\r\n                            <input name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"First name\" />\r\n                            {this.renderErrorMessage('firstName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Last name\">Last name</span>\r\n                            </label>\r\n                            <input name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Last name\" />\r\n                            {this.renderErrorMessage('lastName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Email address\">Email address</span>\r\n                            </label>\r\n                            <input name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter email\" />\r\n                            {this.renderErrorMessage('email')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Password\">Password</span>\r\n                            </label>\r\n                            <input name=\"password\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter password\" />\r\n                            {this.renderErrorMessage('password')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"repassword\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Re-Password\">Re-Password</span>\r\n                            </label>\r\n                            <input name=\"repassword\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Re-Enter password\" />\r\n                            {this.renderErrorMessage('repassword')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"address\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Address\">Address</span>\r\n                            </label>\r\n                            <input name=\"address\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter address\" />\r\n                            {this.renderErrorMessage('address')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"phone\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Phone\">Phone</span>\r\n                            </label>\r\n                            <input name=\"phone\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter phone Number\" />\r\n                            {this.renderErrorMessage('phone')}\r\n                        </div>\r\n\r\n                        <button style={Margin0}\r\n                            disabled={this.state.disableSubmitButton}\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary btn-block\">\r\n                            Sign Up\r\n                        </button>\r\n                        <p className=\"forgot-password text-right\">\r\n                            Already registered <LinkA onClick={this.handleLogin}>Login?</LinkA>\r\n                        </p>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","export class KeyValue{\r\n    constructor(obj?: KeyValue){\r\n        this.key = obj ? obj.key : null;\r\n        this.value = obj ? obj.value : null;\r\n    }\r\n    key: any;\r\n    value: any;\r\n}","import { KeyValue } from \"../class/common/keyValue\"\r\n\r\nexport class Config {\r\n    apiServiceURL = {\r\n        server: `${process.env.REACT_APP_SERVER_URL}`,\r\n        serverAPI: `${process.env.REACT_APP_SERVER_URL}/api`,\r\n        users: `${process.env.REACT_APP_SERVER_URL}/api/users`,\r\n        login: `${process.env.REACT_APP_SERVER_URL}/api/login`,\r\n        register:`${process.env.REACT_APP_SERVER_URL}/api/register`,\r\n        todo: `${process.env.REACT_APP_SERVER_URL}/api/todos`,\r\n        activities: `${process.env.REACT_APP_SERVER_URL}/api/activities`,\r\n        knowledgeBases: `${process.env.REACT_APP_SERVER_URL}/api/knowledgebases`,\r\n        knowledgeArticles: `${process.env.REACT_APP_SERVER_URL}/api/knowledgearticles`,\r\n        projects: `${process.env.REACT_APP_SERVER_URL}/api/projects`\r\n    }\r\n\r\n    commonMessage = {\r\n        loginError: 'Login error!!!',\r\n        userNotFound: 'User not found!!!',\r\n        signUpError: 'Register error!!!'\r\n    }\r\n\r\n    alertVariants = {\r\n        primary :'primary',\r\n        secondar :'secondary',\r\n        success :'success',\r\n        danger :'danger',\r\n        warning :'warning',\r\n        info :'info',\r\n        light :'light',\r\n        dark :'dark'\r\n    }\r\n\r\n    activityStatus:any = {\r\n        'open': new KeyValue({key: 1, value: 'Open'}),\r\n        'inProgress': new KeyValue({key: 2, value: 'In Progress'}),\r\n        'completed': new KeyValue({key: 3, value: 'Completed'}),\r\n        'onPending': new KeyValue({key: 4, value: 'Pending'}),\r\n        'closed': new KeyValue({key: 5, value: 'Closed'}),\r\n        'cancelled': new KeyValue({key: 6, value: 'Cancelled'})\r\n    }\r\n\r\n    defaultDropDownOptions = {\r\n        all: new KeyValue({key: -1, value: '--All--'}),\r\n        none: new KeyValue({key: 0, value: '--None--'})\r\n    }\r\n\r\n    datetimeFormat = {\r\n        yyyyMMdd: 'yyyy/MM/dd',\r\n        ddMMyyyy: 'dd/mm/yyyy'\r\n    }\r\n\r\n    localStorageKey = {\r\n        appState: \"application_state\"\r\n    }\r\n}","import { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Credentials } from \"../../../interface/Credentials\";\r\nimport { User } from \"../../../class/user\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { JwtResponse } from \"../../../class/common/response-data\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\n/**\r\n * Example class\r\n *\r\n * @export\r\n * @class UserServiceApi\r\n * @extends {Api}\r\n *\r\n * @example\r\n * const axiosConfig = {\r\n *  baseUrl: \"www.domain.com\"\r\n * }\r\n * const api = new UserServiceApi(axiosConfig);\r\n *  */\r\nexport class UserServiceApi {\r\n    config: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor(configs: AxiosRequestConfig) {\r\n        // // this middleware is been called right before the http request is made.\r\n        // this.interceptors.request.use((param: AxiosRequestConfig) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        // // this middleware is been called right before the response is get it by the method that triggers the request\r\n        // this.interceptors.response.use((param: AxiosResponse) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        this.userLogin = this.userLogin.bind(this);\r\n        this.userRegister = this.userRegister.bind(this);\r\n        this.getAllUsers = this.getAllUsers.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n        this.config = new Config();\r\n        this.axiosConfig = configs;\r\n    }\r\n\r\n    public userLogin(credentials: Credentials): Promise<JwtResponse> {\r\n        return commonAPI.post<string, Credentials, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.login, credentials)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            });\r\n    }\r\n\r\n    public userRegister(user: User): Promise<JwtResponse> {\r\n        return commonAPI.post<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.register, user)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public updateUser(user: User): Promise<JwtResponse> {\r\n        return commonAPI.put<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.users, user)\r\n            .then((res)=>{\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public async deleteRecords(objs: User[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.config.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async getAllUsers(): Promise<User[]> {\r\n        try {\r\n            const res: AxiosResponse<User[]> = await commonAPI.get<User, AxiosResponse<User[]>>(this.config.apiServiceURL.users);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public getById(id: number): Promise<User> {\r\n        return commonAPI.get<User, AxiosResponse<User>>(`${this.config.apiServiceURL.users}/${id}`).then(commonAPI.success);\r\n    }\r\n}\r\n","export class User {\r\n    constructor(obj?: any){\r\n        this._id        = (obj && obj._id)?         obj._id : null;\r\n        this.userId     = (obj && obj.userId)?      obj.userId : '';\r\n        this.email      = (obj && obj.email)?       obj.email : '';\r\n        this.password   = (obj && obj.password)?    obj.password : '';\r\n        this.firstName  = (obj && obj.firstName)?   obj.firstName : '';\r\n        this.lastName   = (obj && obj.lastName)?    obj.lastName : '';\r\n        this.phone      = (obj && obj.phone)?       obj.phone : '';\r\n        this.address    = (obj && obj.address)?     obj.address : '';\r\n        this.token      = (obj && obj.token)?       obj.token : '';\r\n    }\r\n    _id: any;\r\n    userId: string;\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phone: string;\r\n    address: string;\r\n    token: string\r\n}","import React from 'react';\r\nimport Alert, { AlertProps } from 'react-bootstrap/Alert';\r\nimport styled from 'styled-components';\r\nimport './Alert.scss';\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    top: -20px;\r\n    width: 100%;\r\n    z-index: 1000000;\r\n    padding: 30px;\r\n`;\r\nconst CloseButton = styled.div`\r\n    float: right;\r\n    margin-top: -18px;\r\n    cursor: pointer;\r\n    margin-right: -10px;\r\n`;\r\nconst AlertStyle: React.CSSProperties = {\r\n    borderRadius: '.25rem'\r\n};\r\ntype AlertStates = {\r\n    show?: boolean\r\n}\r\nexport class AlertDiv extends React.Component<AlertProps, AlertStates> {\r\n    constructor(props:AlertProps){\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n\r\n        this.setShow = this.setShow.bind(this);\r\n    }\r\n    setShow(flag: boolean){\r\n        this.setState({\r\n            show: flag\r\n        });\r\n    }\r\n    handleOnCloseButton(){\r\n        return this.props.onClose? this.props.onClose() : null;\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <ContainerDiv>\r\n                {this.state.show ? (\r\n                    <Alert style={AlertStyle}\r\n                        key={this.props.key} \r\n                        variant={this.props.variant}>\r\n                        <CloseButton onClick={()=> this.handleOnCloseButton()}>\r\n                            <strong>x</strong>\r\n                        </CloseButton>\r\n                        {this.props.value}\r\n                    </Alert>\r\n                ) : ''\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","import { User } from \"../../../class/user\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport interface UserProps extends RouteComponentProps<any>{\r\n\r\n}\r\n\r\nexport interface UserStates {\r\n    user: User;\r\n}\r\n\r\nexport const initialUserState : UserStates = {\r\n    user: new User()\r\n}","import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { UserServiceApi } from './User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { User } from '../../../class/user';\r\nimport { UserProps, UserStates, initialUserState } from './UserPropsStates';\r\nimport styled from 'styled-components';\r\nimport { \r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion, DynamicFormStates \r\n} from '../../../share-components/DynamicForm';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n`;\r\n\r\nclass UserComponent extends React.Component<UserProps, UserStates> {\r\n    userService: UserServiceApi;\r\n    formConfig: FormConfig;\r\n    constructor(props: UserProps) {\r\n        super(props);\r\n\r\n        this.state = initialUserState;\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.formConfig = new FormConfig();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let user = await this.userService.getById(this.props.match.params['userId']);\r\n        this.setState({\r\n            user: user\r\n        });\r\n    }\r\n    \r\n    handleSubmit(form: DynamicFormStates) {\r\n        let user = new User(form.listFields);\r\n        console.log(user);\r\n        this.userService.updateUser(user).then((result)=>{\r\n            console.log(result);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    getQuestion(user: User) {\r\n        let questions: QuestionBase<string>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'email',\r\n            label: 'Email',\r\n            value: user.email,\r\n            type: this.formConfig.inputTypeDef.email,\r\n            readonly: true,\r\n            order: 10\r\n        }));\r\n        \r\n        //Add first name text\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'First name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'firstName',\r\n            label: 'First name',\r\n            value: user.firstName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 20\r\n        }));\r\n\r\n        //Add last name text\r\n        validators = {};\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Last name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'lastName',\r\n            label: 'Last name',\r\n            value: user.lastName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 30\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'address',\r\n            label: 'Address',\r\n            value: user.address,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 40\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'phone',\r\n            label: 'Phone',\r\n            value: user.phone,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 50\r\n        }));\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.user);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(UserComponent);","import React from 'react';\r\n// A great library for fuzzy filtering/sorting items\r\nimport matchSorter from 'match-sorter';\r\n\r\n// Define a default UI for filtering\r\nexport function DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n\r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onClick={e=> e.stopPropagation()}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n        />\r\n    )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nexport function SelectColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the options for filtering\r\n    // using the preFilteredRows\r\n    const options = React.useMemo(() => {\r\n        const options = new Set()\r\n        preFilteredRows.forEach(row => {\r\n            options.add(row.values[id])\r\n        })\r\n        return [...options.values()]\r\n    }, [id, preFilteredRows])\r\n\r\n    // Render a multi-select box\r\n    return (\r\n        <select\r\n            value={filterValue}\r\n            onClick={e=> e.stopPropagation()}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined)\r\n            }}\r\n        >\r\n            <option value=\"\">All</option>\r\n            {options.map((option, i) => (\r\n                <option key={i} value={option}>\r\n                    {option}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nexport function SliderColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the min and max\r\n    // using the preFilteredRows\r\n\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={filterValue || min}\r\n                onChange={e => {\r\n                    setFilter(parseInt(e.target.value, 10))\r\n                }}\r\n            />\r\n            <button onClick={() => setFilter(undefined)}>Off</button>\r\n        </>\r\n    )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nexport function NumberRangeColumnFilter({\r\n    column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n            }}\r\n        >\r\n            <input\r\n                value={filterValue[0] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n                }}\r\n                placeholder={`Min (${min})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginRight: '0.5rem',\r\n                }}\r\n            />\r\n      to\r\n            <input\r\n                value={filterValue[1] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n                }}\r\n                placeholder={`Max (${max})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginLeft: '0.5rem',\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function fuzzyTextFilterFn(rows, id, filterValue) {\r\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Define a custom filter filter function!\r\nexport function filterGreaterThan(rows, id, filterValue) {\r\n    return rows.filter(row => {\r\n        const rowValue = row.values[id]\r\n        return rowValue >= filterValue\r\n    })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n//Add selection\r\nexport const IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n\r\n        React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <>\r\n                <Checkbox type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n            </>\r\n        );\r\n    }\r\n);","import React from 'react'\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport LastPageIcon from '@material-ui/icons/LastPage'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}))\r\n\r\nconst TablePaginationActions = props => {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const { count, page, rowsPerPage, onChangePage } = props\r\n\r\n  const handleFirstPageButtonClick = event => {\r\n    onChangePage(event, 0)\r\n  }\r\n\r\n  const handleBackButtonClick = event => {\r\n    onChangePage(event, page - 1)\r\n  }\r\n\r\n  const handleNextButtonClick = event => {\r\n    onChangePage(event, page + 1)\r\n  }\r\n\r\n  const handleLastPageButtonClick = event => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default TablePaginationActions\r\n","import React from 'react'\r\n\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing(7),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: 200,\r\n    },\r\n  },\r\n}))\r\n\r\nconst GlobalFilter = ({\r\n  preGlobalFilteredRows,\r\n  globalFilter = '',\r\n  setGlobalFilter,\r\n}) => {\r\n  const classes = useStyles()\r\n  const count = preGlobalFilteredRows.length\r\n\r\n  // Global filter only works with pagination from the first page.\r\n  // This may not be a problem for server side pagination when\r\n  // only the current page is downloaded.\r\n\r\n  return (\r\n    <div className={classes.search}>\r\n      <div className={classes.searchIcon}>\r\n        <SearchIcon />\r\n      </div>\r\n      <InputBase\r\n        value={globalFilter || ''}\r\n        onChange={e => {\r\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        classes={{\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        }}\r\n        inputProps={{ 'aria-label': 'search' }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nGlobalFilter.propTypes = {\r\n  preGlobalFilteredRows: PropTypes.array.isRequired,\r\n  setGlobalFilter: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GlobalFilter\r\n","import React from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport {\r\n\tSelect, IconButton, Toolbar, Typography,\r\n\tTooltip, FormControl, InputLabel, Input, MenuItem,\r\n\tCheckbox, ListItemText\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types'\r\nimport GlobalFilter from '../Filter/GlobalFilter';\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t\tmaxWidth: 300,\r\n\t},\r\n\troot: {\r\n\t\tpaddingLeft: theme.spacing(2),\r\n\t\tpaddingRight: theme.spacing(1),\r\n\t},\r\n\thighlight:\r\n\t\ttheme.palette.type === 'light'\r\n\t\t\t? {\r\n\t\t\t\tcolor: theme.palette.secondary.main,\r\n\t\t\t\tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n\t\t\t}\r\n\t\t\t: {\r\n\t\t\t\tcolor: theme.palette.text.primary,\r\n\t\t\t\tbackgroundColor: theme.palette.secondary.dark,\r\n\t\t\t},\r\n\ttitle: {\r\n\t\tflex: '1 1 100%',\r\n\t},\r\n}))\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n\tPaperProps: {\r\n\t\tstyle: {\r\n\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n\t\t\twidth: 250,\r\n\t\t},\r\n\t},\r\n};\r\n\r\nconst TableToolbar = props => {\r\n\tconst classes = useToolbarStyles()\r\n\tconst {\r\n\t\tnumSelected,\r\n\t\tdeleteRecordHandler,\r\n\t\taddRecordHandler,\r\n\t\tpreGlobalFilteredRows,\r\n\t\tsetGlobalFilter,\r\n\t\tglobalFilter = '',\r\n\t\tTableName = '',\r\n\t\tallColumns,\r\n\t} = props\r\n\treturn (\r\n\t\t<Toolbar\r\n\t\t\tclassName={clsx(classes.root, {\r\n\t\t\t\t[classes.highlight]: numSelected > 0,\r\n\t\t\t})}\r\n\t\t>\r\n\t\t\t{\r\n\t\t\t\taddRecordHandler.toString() !== \"() => {}\" ?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t<Tooltip title=\"Add\">\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={addRecordHandler}>\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div></div>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\t{numSelected > 0 ? (\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\tvariant=\"subtitle1\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{numSelected} selected\r\n\t\t\t\t</Typography>\r\n\t\t\t) : (\r\n\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tTableName\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t)}\r\n\r\n\t\t\t{numSelected > 0 ? (\r\n\t\t\t\t<Tooltip title=\"Delete\">\r\n\t\t\t\t\t<IconButton aria-label=\"delete\" onClick={deleteRecordHandler}>\r\n\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t) : (\r\n\t\t\t\t\t<GlobalFilter\r\n\t\t\t\t\t\tpreGlobalFilteredRows={preGlobalFilteredRows}\r\n\t\t\t\t\t\tglobalFilter={globalFilter}\r\n\t\t\t\t\t\tsetGlobalFilter={setGlobalFilter}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel id=\"columns-visible-label\">Columns</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"columns-visible-label\"\r\n\t\t\t\t\tid=\"columns-visible-select\"\r\n\t\t\t\t\tmultiple\r\n\t\t\t\t\tvalue={[\"Select columns\"]}\r\n\t\t\t\t\tinput={<Input />}\r\n\t\t\t\t\trenderValue={(selected) => selected.join(', ')}\r\n\t\t\t\t\tMenuProps={MenuProps}\r\n\t\t\t\t>\r\n\t\t\t\t\t{allColumns.map(column => (\r\n\t\t\t\t\t\t<MenuItem key={column.id} value={column.id}>\r\n\t\t\t\t\t\t\t<Checkbox {...column.getToggleHiddenProps()} />\r\n\t\t\t\t\t\t\t<ListItemText primary={column.id} />\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</Toolbar>\r\n\t)\r\n}\r\n\r\nTableToolbar.propTypes = {\r\n\tnumSelected: PropTypes.number.isRequired,\r\n\taddRecordHandler: PropTypes.func.isRequired,\r\n\tdeleteRecordHandler: PropTypes.func.isRequired,\r\n\tsetGlobalFilter: PropTypes.func.isRequired,\r\n\tpreGlobalFilteredRows: PropTypes.array.isRequired,\r\n\tallColumns: PropTypes.array.isRequired\r\n}\r\n\r\nexport default TableToolbar\r\n","import React from 'react';\r\nimport {\r\n    useTable,\r\n    usePagination,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useRowSelect,\r\n    useSortBy\r\n} from \"react-table\";\r\nimport * as filter from './Filter/Filter';\r\nimport { IndeterminateCheckbox } from './Selection/RowSelection';\r\nimport PropTypes from 'prop-types';\r\nimport { TableContainer, TableHead, TableRow, TableCell, TableBody, TableFooter, TablePagination, TableSortLabel } from '@material-ui/core';\r\nimport MaUTable from '@material-ui/core/Table'\r\nimport TablePaginationActions from './Pagination/TablePaginationActions';\r\nimport TableToolbar from './Toolbar/TableToolbar';\r\nimport './Table.scss';\r\n\r\n// Our table component\r\nexport function Table({\r\n    columns,\r\n    data,\r\n    fetchData,\r\n    pageCount: controlledPageCount,\r\n    skipPageReset = true,\r\n    deleteRecordHandler = (selectedId) => { },\r\n    addRecordHandler = () => { },\r\n    TableName = ''\r\n}) {\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            // Add a new fuzzyTextFilterFn filter type.\r\n            fuzzyText: filter.fuzzyTextFilterFn,\r\n            // Or, override the default text filter to use\r\n            // \"startWith\"\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter(row => {\r\n                    const rowValue = row.values[id]\r\n                    return rowValue !== undefined\r\n                        ? String(rowValue)\r\n                            .toLowerCase()\r\n                            .startsWith(String(filterValue).toLowerCase())\r\n                        : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n    )\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Let's set up our default Filter UI\r\n            Filter: filter.DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        gotoPage,\r\n        setPageSize,\r\n        allColumns,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter,\r\n        state: { pageIndex, pageSize, selectedRowIds, globalFilter },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn, // Be sure to pass the defaultColumn option\r\n            filterTypes,\r\n            autoResetPage: !skipPageReset,  //reset page after change (filter)\r\n            pageCount: controlledPageCount,\r\n            manualPagination: true, // Tell the usePagination\r\n        },\r\n        useGlobalFilter,\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect,\r\n        hooks => {\r\n            hooks.allColumns.push(columns => [\r\n                // Let's make a column for selection\r\n                {\r\n                    id: \"selection\",\r\n                    // The header can use the table's getToggleAllRowsSelectedProps method\r\n                    // to render a checkbox\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n                        </div>\r\n                    ),\r\n                    // The cell can use the individual row's getToggleRowSelectedProps method\r\n                    // to the render a checkbox\r\n                    Cell: ({ row }) => (\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                        </div>\r\n                    )\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    )\r\n\r\n    // Listen for changes in pagination and use the state to fetch our new data\r\n    React.useEffect(() => {\r\n        fetchData({ pageIndex, pageSize })\r\n    }, [fetchData, pageIndex, pageSize])\r\n\r\n    //Change row per page in pagination\r\n    const handleChangeRowsPerPage = event => {\r\n        setPageSize(Number(event.target.value))\r\n    }\r\n    //Change the selected page\r\n    const handleChangePage = (event, newPage) => {\r\n        gotoPage(newPage)\r\n    }\r\n    //pre-do to get selected record\r\n    const preDeleteRecordHandler = () => {\r\n        //get index of selected record\r\n        let selectedRowIndex = Object.keys(selectedRowIds).map(x => parseInt(x, 10));\r\n        //filter record\r\n        let selectedRecord = data.filter((_, i) => {\r\n            return selectedRowIndex.includes(i)\r\n        });\r\n        //send the record to handle page\r\n        deleteRecordHandler(selectedRecord);\r\n    }\r\n\r\n    return (\r\n        <TableContainer className=\"ReactTable\">\r\n            <TableToolbar\r\n                numSelected={Object.keys(selectedRowIds).length}\r\n                deleteRecordHandler={preDeleteRecordHandler}\r\n                addRecordHandler={addRecordHandler}\r\n                TableName={TableName}\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                setGlobalFilter={setGlobalFilter}\r\n                globalFilter={globalFilter}\r\n                allColumns={allColumns}\r\n            />\r\n            <MaUTable {...getTableProps()} className=\"react-custom-table\">\r\n                <TableHead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <TableCell\r\n                                    {...(column.id === 'selection'\r\n                                        ? column.getHeaderProps()\r\n                                        : column.getHeaderProps(column.getSortByToggleProps()))}\r\n                                >\r\n                                    {column.render('Header')}\r\n                                    {column.id !== 'selection' ? (\r\n                                        <TableSortLabel\r\n                                            active={column.isSorted}\r\n                                            // react-table has a unsorted state which is not treated here\r\n                                            direction={column.isSortedDesc ? 'desc' : 'asc'}\r\n                                        />\r\n                                    ) : null}\r\n                                    <div className=\"table-header-filter\">\r\n                                        {(column.canFilter && !column.columnDisableGlobalFilter) ? column.render('Filter') : null}\r\n                                    </div>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    ))}\r\n                </TableHead>\r\n                <TableBody {...getTableBodyProps()}>\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <TableRow {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <TableCell {...cell.getCellProps()}>\r\n                                            {cell.render('Cell')}\r\n                                        </TableCell>\r\n                                    )\r\n                                })}\r\n                            </TableRow>\r\n                        )\r\n                    })}\r\n                </TableBody>\r\n                <TableFooter className=\"pagination\">\r\n                    <TableRow>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[\r\n                                5,\r\n                                10,\r\n                                25,\r\n                                50,\r\n                                100,\r\n                                { label: 'All', value: controlledPageCount },\r\n                            ]}\r\n                            colSpan={10000}\r\n                            count={controlledPageCount}\r\n                            rowsPerPage={pageSize}\r\n                            page={pageIndex}\r\n                            SelectProps={{\r\n                                inputProps: { 'aria-label': 'rows per page' },\r\n                                native: true,\r\n                            }}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </MaUTable>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nTable.propTypes = {\r\n    columns: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    fetchData: PropTypes.func.isRequired,\r\n    pageCount: PropTypes.number.isRequired,\r\n    deleteRecordHandler: PropTypes.func.isRequired\r\n}","import React, { Component } from 'react';\r\nimport './UserContainer.scss';\r\nimport { User } from '../../../class/user';\r\nimport { connect } from 'react-redux';\r\nimport { UserServiceApi } from '../../../components/Management/Users/User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport  UserComponent  from '../../../components/Management/Users/User';\r\nimport { storeUser } from '../../store/user/actions';\r\nimport { AppState } from '../../store';\r\nimport styled from 'styled-components';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface UserContainerProps {\r\n    user: any,\r\n    storeUser: typeof storeUser\r\n}\r\ninterface UserContainerStates {\r\n    allUser: User[],\r\n    userList: User[],\r\n    isLoading: boolean,\r\n    skipPageReset: boolean,\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nclass UserContainer extends Component<UserContainerProps, UserContainerStates>{\r\n    userService: UserServiceApi;\r\n    constructor(props: UserContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allUser: [],\r\n            userList: [],\r\n            isLoading: false,\r\n            skipPageReset: false\r\n        }\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.getUserByFilter = this.getUserByFilter.bind(this);\r\n        this.deleteUserHandler = this.deleteUserHandler.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getUserByFilter({pageSize: 10, pageIndex: 0});\r\n    }\r\n\r\n    async getUserByFilter(pagination: Pagination){\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let users = this.state.allUser;\r\n        if(users.length === 0){\r\n            users = await this.userService.getAllUsers();\r\n            this.props.storeUser(users);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allUser: users,\r\n            userList: users.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    async deleteUserHandler(records: User[]){\r\n        if(window.confirm(\"Do you want to delete the selected record(s)?\")){\r\n            await this.userService.deleteRecords(records);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`users/${row.original._id}`}>{row.original.email}</Link>)\r\n            },\r\n            {\r\n                Header: 'First Name',\r\n                accessor: 'firstName'\r\n            },\r\n            {\r\n                Header: 'Last Name',\r\n                accessor: 'lastName'\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone'\r\n            },\r\n            {\r\n                Header: 'Address',\r\n                accessor: 'address'\r\n            }];\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/users'>\r\n                    <ContainerDiv className=\"user-list\">\r\n                        <Table columns={columns} \r\n                            data={this.state.userList} \r\n                            pageCount={this.state.allUser.length}\r\n                            fetchData={this.getUserByFilter}\r\n                            deleteRecordHandler={this.deleteUserHandler}\r\n                            TableName=\"Users\"\r\n                        />\r\n                    </ContainerDiv>\r\n                </Route>\r\n                <Route path={`/users/:userId`}>\r\n                    <UserComponent></UserComponent>\r\n                </Route>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        userList: store.user\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(UserContainer)","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ActivityService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Activity[]> {\r\n        try {\r\n            const res: AxiosResponse<Activity[]> = await commonAPI.get(this.configs.apiServiceURL.activities);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Activity> {\r\n        try {\r\n            const res: AxiosResponse<Activity> = await commonAPI.get(`${this.configs.apiServiceURL.activities}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Activity[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\nexport class Project {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.manager = obj ? obj.manager : new User();\r\n        this.members = obj ? obj.members : [];\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    manager: User;\r\n    members: any[];\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { ODateRange } from \"./common/date-range\";\r\nimport { KeyValue } from \"./common/keyValue\";\r\nimport { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\nimport { Project } from \"./project\";\r\n\r\nexport class Activity {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.description = obj ? obj.description : '';\r\n        this.implemetationPlan = obj ? obj.implemetationPlan : '';\r\n        this.project = obj ? obj.project : new Project();\r\n        this.planDate = obj ? obj.planDate : new ODateRange();\r\n        this.actualDate = obj ? obj.actualDate : new ODateRange();\r\n        this.status = obj ? obj.status : new KeyValue();\r\n        this.assignedTo = obj ? obj.assignedTo : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    description: string;\r\n    implemetationPlan: string;\r\n    project: Project;\r\n    planDate: ODateRange;\r\n    actualDate: ODateRange;\r\n    status: KeyValue;\r\n    assignedTo: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ActivityProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ActivityStates {\r\n    errors:{[s:string]: string[]},\r\n    activity: Activity,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialActivityStates: ActivityStates = {\r\n    errors: {},\r\n    activity: new Activity(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst ContainerDiv = styled.div`\r\n    margin: auto;\r\n    padding-top: 15px;\r\n    border-bottom: 0.2px solid #b0b0b0;\r\n`;\r\nexport interface BreakLineProps {\r\n    cssProperties?: React.CSSProperties\r\n}\r\nexport class BreakLine extends React.Component<BreakLineProps> {\r\n\r\n    render(){\r\n        return(\r\n            this.props.cssProperties ? \r\n            (\r\n                <div style={this.props.cssProperties}></div>\r\n            )\r\n            :\r\n            (\r\n                <ContainerDiv></ContainerDiv>\r\n            )\r\n            \r\n        );\r\n    }\r\n}","import { Comment } from \"../../class/common/comment\";\r\nimport { User } from \"../../class/user\";\r\n\r\nexport interface CommentProps {\r\n    comments: Comment[],\r\n    onSubmitComment: (form: CommentStates) => void,\r\n    loginUser: User\r\n}\r\nexport interface CommentStates {\r\n    comments: Comment[],\r\n    newComment: string\r\n}\r\nexport const initialCommentStates: CommentStates = {\r\n    comments: [],\r\n    newComment: ''\r\n}","import { User } from \"../user\";\r\n\r\nexport class Comment {\r\n    constructor(obj?: any){\r\n        this.target = obj ? obj.target : null;\r\n        this.comment = obj ? obj.comment : null;\r\n        this.userComment = obj ? obj.userComment : null;\r\n        this.commentDate = obj ? obj.commentDate : null;\r\n    }\r\n    target: string; //target Object's _id\r\n    comment: string;\r\n    userComment: User;\r\n    commentDate: string;\r\n}","import React from 'react';\r\nimport { CommentProps, CommentStates, initialCommentStates } from './CommentLogPropsStates';\r\nimport styled from 'styled-components';\r\nimport { Comment } from '../../class/common/comment';\r\n\r\nconst LeftDiv = styled.div`\r\n    float: left;\r\n`;\r\nconst RightDiv = styled.div`\r\n    float: right;\r\n`;\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\nconst ButtonCustom = styled.button`\r\n    float: right;\r\n    margin-top: 10px;\r\n    border-radius: .25rem;\r\n    border: 0.5px solid #c9c9c9;\r\n    width: 50px;\r\n    height: 28px;\r\n    cursor: pointer;\r\n`;\r\nconst ContainerInlineBlock = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    border-bottom: 0.5px solid gray;\r\n    padding-bottom: 5px;\r\n`;\r\nconst CommentDiv = styled.div`\r\n    border: 0.5px solid gray;\r\n    border-radius: .25rem;\r\n    padding: 15px;\r\n    margin-top: 10px;\r\n`;\r\nexport class CommentLog extends React.Component<CommentProps, CommentStates> {\r\n    constructor(props: CommentProps) {\r\n        super(props);\r\n\r\n        this.state = initialCommentStates;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentTitle = this.renderCommentTitle.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if(this.props.comments){\r\n            this.setState({\r\n                comments: this.props.comments\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle event textarea change data\r\n     * @param e textarea changed\r\n     */\r\n    handleChange(e: any) {\r\n        this.setState({\r\n            newComment: e.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle submit comment\r\n     */\r\n    handleSubmitComment() {\r\n        let current = new Date();\r\n        let comments = this.state.comments;\r\n        let newComment = new Comment({\r\n            userComment: this.props.loginUser,\r\n            comment: this.state.newComment,\r\n            commentDate: current.toUTCString()\r\n        });\r\n        comments.push(newComment);\r\n        this.setState({\r\n            comments: comments,\r\n            newComment: ''\r\n        }, () => {\r\n            this.props.onSubmitComment(this.state); //callback\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render Comment title\r\n     */\r\n    renderCommentTitle(){\r\n        let result;\r\n        if(this.state.comments.length > 0){\r\n            result = (\r\n                <div>Activities ({this.state.comments.length}):</div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * in case of html string => need this function to convert to html dom\r\n     * @param comment comment\r\n     */\r\n    renderCommentRawHTML(comment: string){\r\n        return (\r\n            <div dangerouslySetInnerHTML={{__html: comment}}></div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <div className=\"comment-new\">\r\n                    <div>Note <textarea value={this.state.newComment} onChange={this.handleChange} className=\"form-control\" rows={2}></textarea></div>\r\n                    <ContainerInlineBlock>\r\n                        <ButtonCustom onClick={this.handleSubmitComment}>Post</ButtonCustom>\r\n                    </ContainerInlineBlock>\r\n                </div>\r\n                <div className=\"comment-list\">\r\n                    {\r\n                        this.renderCommentTitle()\r\n                    }\r\n                    {\r\n                        this.state.comments.slice(0).reverse().map((com, ind) => (\r\n                            <CommentDiv className=\"comment\" key={ind}>\r\n                                <ContainerInlineBlock className=\"comment-header\">\r\n                                    <LeftDiv className=\"comment-user\">\r\n                                        {\r\n                                        `${com.userComment.firstName} ${com.userComment.lastName}`\r\n                                        }\r\n                                    </LeftDiv>\r\n                                    <RightDiv className=\"comment-date\">\r\n                                        {\r\n                                            com.commentDate\r\n                                        }\r\n                                    </RightDiv>\r\n                                </ContainerInlineBlock>\r\n                                <div className=\"comment-content\">\r\n                                    {\r\n                                        this.renderCommentRawHTML(com.comment)\r\n                                    }\r\n                                </div>\r\n                            </CommentDiv>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","export class CommonService {\r\n\r\n    /**\r\n     * convert date type to string base on format\r\n     * @param date date\r\n     * @param format format ex: yyyyMMdd or yyyyMMdd HHmmmSS ..etc\r\n     */\r\n    convertDateToStringByFormat(date: Date, format: string): string {\r\n        let result: string = '';\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth() + 1;\r\n        var day = date.getDate();\r\n        var hour = date.getHours();\r\n        var minute = date.getMinutes();\r\n        var second = date.getSeconds();\r\n        result = format.replace('yyyy', year.toString())\r\n            .replace('MM', this.fixedFormatTwoDigit(month))\r\n            .replace('dd', this.fixedFormatTwoDigit(day))\r\n            .replace('HH', this.fixedFormatTwoDigit(hour))\r\n            .replace('mmm', this.fixedFormatTwoDigit(minute))\r\n            .replace('SS', this.fixedFormatTwoDigit(second));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * return the number with two fixed digits\r\n     * @param number source number\r\n     */\r\n    fixedFormatTwoDigit(number: number): string {\r\n        let result: string = '';\r\n        result = number < 10 ? ('0' + number.toString()) : number.toString();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A short demo for compare two object. easiest way to compare object is JSON.stringify(obj)\r\n     * @param object1 object 1\r\n     * @param object2 object 2\r\n     */\r\n    compareTwoObject<T>(object1: T, object2: T): boolean {\r\n        let result: boolean = false;\r\n        //step 1: convert two object to {[s: string] : any} object\r\n        let obj1: { [s: string]: any } = {};\r\n        let obj2: { [s: string]: any } = {};\r\n        for (let [key, value] of Object.entries(object1)) {\r\n            obj1[key] = value;\r\n        }\r\n        for (let [key, value] of Object.entries(object2)) {\r\n            obj2[key] = value;\r\n        }\r\n        //step 2: loop through all properties to check out\r\n        for (let p in obj1) {\r\n            if (JSON.stringify(obj1[p]) !== JSON.stringify(obj2[p])) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","import React from 'react';\r\nimport './Activity.scss';\r\nimport { ActivityProps, ActivityStates, initialActivityStates } from './ActivityPropsState';\r\nimport styled from 'styled-components';\r\nimport { ActivityService } from './Activity.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, DropdownQuestion, DateRangeQuestion, ReferenceQuestion, TextAreaQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Activity } from '../../../class/activity';\r\nimport { KeyValue } from '../../../class/common/keyValue';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ActivityComponent extends React.Component<ActivityProps, ActivityStates> {\r\n    config: Config;\r\n    activityService: ActivityService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityProps) {\r\n        super(props);\r\n\r\n        this.state = initialActivityStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getActivityUpdated = this.getActivityUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let activityId = this.props.match.params['activityId'];\r\n        if (activityId !== \"createnew\") {\r\n            let activity = await this.activityService.getById(this.props.match.params['activityId']);\r\n            this.setState({\r\n                activity: activity,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit activity\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get activity object from dynamic form\r\n        let activity = this.convertFormToObject(form);\r\n        if(activity.project){\r\n            delete activity.project.comments;\r\n            delete activity.project.members;\r\n        }\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.activityService.update(activity);\r\n        }\r\n        else {\r\n            res = await this.activityService.createNew(activity);\r\n        }\r\n        //find out which part is updated\r\n        let activityChanged = this.getActivityUpdated(activity);\r\n        if (activityChanged !== \"\") {\r\n            let activityId = this.state.isEditRecord ? activity._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: activityId,\r\n                comment: activityChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            activity.comments.push(nComment);\r\n            //update comment\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            activity: activity\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted activity with current activity to find out which parts are updated\r\n     * use to show in activity log\r\n     * @param activity new activity\r\n     */\r\n    getActivityUpdated(activity: Activity) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.activity) !== JSON.stringify(activity)) {\r\n            if (JSON.stringify(this.state.activity.description) !== JSON.stringify(activity.description)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Description:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.description\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.implemetationPlan) !== JSON.stringify(activity.implemetationPlan)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Implemetation Plan:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.implemetationPlan\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.project) !== JSON.stringify(activity.project)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Project:</div>\r\n                                <div>Project</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(activity.project && activity.project._id) ?\r\n                                        `${activity.project.name}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.status) !== JSON.stringify(activity.status)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Status:</div>\r\n                                <div>Status</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.status ?\r\n                                        `${activity.status.value}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.assignedTo) !== JSON.stringify(activity.assignedTo)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Assigned to:</div>\r\n                                <div>Assigned To</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(activity.assignedTo && activity.assignedTo._id) ?\r\n                                        `${activity.assignedTo.firstName} ${activity.assignedTo.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.planDate) !== JSON.stringify(activity.planDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Plan date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.planDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.planDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.actualDate) !== JSON.stringify(activity.actualDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Actual date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.actualDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.actualDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to activity\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Activity {\r\n        let currentAct = this.state.activity;\r\n        let formAct = new Activity(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let activity = this.state.activity;\r\n        activity.comments = form.comments;\r\n        activity.comments.forEach((val) => {\r\n            val.target = activity._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        activity: activity\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate activity questions\r\n     * @param activity activity object\r\n     */\r\n    getQuestion(activity: Activity) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'description',\r\n            label: 'Description',\r\n            value: activity.description,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 10\r\n        }));\r\n\r\n        //Add implementation plan text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Implementation plan is required.'\r\n        };\r\n        questions.push(new TextAreaQuestion({\r\n            key: 'implemetationPlan',\r\n            label: 'Implemetation Plan',\r\n            value: activity.implemetationPlan,\r\n            validators: validators,\r\n            rows: 5,\r\n            order: 20\r\n        }));\r\n\r\n        //Add project to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'project',\r\n            label: 'Project',\r\n            value: activity.project,\r\n            serverUrl: this.config.apiServiceURL.projects,\r\n            displayField: 'name',\r\n            listFields: ['name'],\r\n            searchBar: true,\r\n            order: 30\r\n        }));\r\n\r\n        let options: KeyValue[] = [];\r\n        Object.keys(this.config.activityStatus).forEach((opt, ind) => {\r\n            options.push(this.config.activityStatus[opt]);\r\n        });\r\n        options = options.sort((a, b) => a.key - b.key);\r\n        options.unshift(this.config.defaultDropDownOptions.none);   //default value\r\n        //Add Status text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Status is required.'\r\n        };\r\n        questions.push(new DropdownQuestion({\r\n            key: 'status',\r\n            label: 'Status',\r\n            value: activity.status,\r\n            validators: validators,\r\n            options: options,\r\n            searchBar: true,\r\n            order: 50\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'assignedTo',\r\n            label: 'Assigned to',\r\n            value: activity.assignedTo,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 60\r\n        }));\r\n\r\n\r\n        //Add plan date\r\n        let dateRange = activity.planDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Plan date is required.'\r\n        };\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'planDate',\r\n            label: 'Plan',\r\n            value: dateRange,\r\n            validators: validators,\r\n            order: 70\r\n        }));\r\n\r\n        //Add actual date\r\n        dateRange = activity.actualDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'actualDate',\r\n            label: 'Actual',\r\n            value: dateRange,\r\n            order: 80\r\n        }));\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.activity.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.activity);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ActivityComponent);","import './ActivityContainer.scss';\r\nimport React, { Component } from 'react';\r\nimport { Activity } from '../../../class/activity';\r\nimport { ActivityService } from '../../../components/Management/Activities/Activity.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ActivityComponent from '../../../components/Management/Activities/Activity';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeActivities } from '../../store/activity/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\nimport { SelectColumnFilter } from '../../../share-components/Table/Filter/Filter';\r\n\r\ninterface ActivityContainerProps {\r\n    user: any,\r\n    storeActivities: typeof storeActivities\r\n}\r\ninterface ActivityContainerStates {\r\n    allActivity: Activity[],\r\n    activityList: Activity[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ActivityContainer extends Component<ActivityContainerProps, ActivityContainerStates> {\r\n    activityService: ActivityService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allActivity: [],\r\n            activityList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getActivityByFilter = this.getActivityByFilter.bind(this);\r\n        this.deleteActivityHandler = this.deleteActivityHandler.bind(this);\r\n        this.addActivityHandler = this.addActivityHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getActivityByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let activities = this.state.allActivity;\r\n        if (activities.length === 0) {\r\n            activities = await this.activityService.getAllData();\r\n            this.props.storeActivities(activities);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allActivity: activities,\r\n            activityList: activities.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete activity\r\n     * @param records deleted records\r\n     */\r\n    async deleteActivityHandler(records: Activity[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.activityService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addActivityHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/activities/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Description',\r\n                id: 'description',\r\n                accessor: 'description',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`activities/${row.original._id}`}>{row.original.description}</Link>)\r\n            },\r\n            {\r\n                Header: 'Implementation Plan',\r\n                id: 'implemetationPlan',\r\n                accessor: 'implemetationPlan',\r\n            },\r\n            {\r\n                Header: 'Project',\r\n                id: 'project',\r\n                accessor: (row: Activity) => row.project ? `${row.project.name}` : ''\r\n            },\r\n            {\r\n                Header: 'Plan date',\r\n                id: 'planDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'planStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.startDate) {\r\n                                let accessor = new Date(row.planDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'planEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.endDate) {\r\n                                let accessor = new Date(row.planDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Actual date',\r\n                id: 'actualDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'actualStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.startDate) {\r\n                                let accessor = new Date(row.actualDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'actualEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.endDate) {\r\n                                let accessor = new Date(row.actualDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Status',\r\n                id: 'status',\r\n                // disableFilters: true,\r\n                Filter: SelectColumnFilter,\r\n                filter: 'includes',\r\n                accessor: (row: Activity) => {\r\n                    let result = '';\r\n                    if (row.status) {\r\n                        result = row.status.value\r\n                    }\r\n                    return result;\r\n                },\r\n            },\r\n            {\r\n                Header: 'Assigned to',\r\n                id: 'assignedTo',\r\n                accessor: (row: Activity) => row.assignedTo ? `${row.assignedTo.firstName} ${row.assignedTo.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/activities\">\r\n                        <ContainerDiv className=\"activity-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.activityList}\r\n                                pageCount={this.state.allActivity.length}\r\n                                fetchData={this.getActivityByFilter}\r\n                                deleteRecordHandler={this.deleteActivityHandler}\r\n                                addRecordHandler={this.addActivityHandler}\r\n                                TableName=\"Activities\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/activities/:activityId`}>\r\n                        <ActivityComponent loginUser={this.props.user.currentUser}></ActivityComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        activityList: store.activities\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeActivities\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ActivityContainer)","import { REMOVE_ACTIVITIES, STORE_ACTIVITIES } from \"./types\";\r\nimport { Activity } from \"../../../class/activity\";\r\n\r\nexport function storeActivities(acts: Activity[]) {\r\n  return {\r\n    type: STORE_ACTIVITIES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeActivities(timestamp: number) {\r\n  return {\r\n    type: REMOVE_ACTIVITIES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Activity } from \"../../../class/activity\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_ACTIVITIES = \"STORE_ACTIVITIES\";\r\nexport const REMOVE_ACTIVITIES = \"REMOVE_ACTIVITIES\";\r\n\r\ninterface StoreActivitiesAction {\r\n  type: typeof STORE_ACTIVITIES;\r\n  payload: Activity[];\r\n}\r\n\r\ninterface RemoveActivitiesAction {\r\n  type: typeof REMOVE_ACTIVITIES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ActivityActionTypes = StoreActivitiesAction | RemoveActivitiesAction;\r\n","export interface LoginProps {\r\n\tOnLogin: (form:LoginState) => void,\r\n\tForgotPasswordRedirectLink: string,\r\n\tRegisterPageRedirectLink: string\r\n}\r\n\r\nexport type LoginState = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\tredirectForgotPassword: boolean,\r\n\tredirectRegisterPage: boolean\r\n}\r\n\r\nexport const initialLoginState: LoginState = {\r\n\temail: '',\r\n\tpassword: '',\r\n\trememberMe: false,\r\n\tdisableSubmitButton: true,\r\n\tredirectForgotPassword: false,\r\n\tredirectRegisterPage: false\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { LoginProps, LoginState, initialLoginState } from \"./LoginPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Container = styled.div`\r\n            background-color: #232323;\r\n            padding-top: 30px;\r\n            padding-bottom: 20px;\r\n        `;\r\nconst LoginDiv = styled.div`\r\n            width: 400px;\r\n            margin: auto;\r\n            background-color: #e9ecef;\r\n            padding: 40px;\r\n            border-radius: 15px;\r\n        `;\r\nconst LinkDiv = styled.div`\r\n            margin-top: 15px;\r\n        `;\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class Login extends Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = initialLoginState;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeByClick = this.handleChangeByClick.bind(this);\r\n        this.handleForgotPassowrd = this.handleForgotPassowrd.bind(this);\r\n        this.handleRegisterPage = this.handleRegisterPage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle change form's fields\r\n     * @param event change event\r\n     */\r\n    handleChange(event: any) {\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.value\r\n        }, ()=>{\r\n            let disabled = this.state.email !== '' && this.state.password !== '' ? false : true;\r\n            this.setState({\r\n                disableSubmitButton: disabled\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle state change by click\r\n     * @param event click event\r\n     */\r\n    handleChangeByClick(event: any){\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.checked\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle forgot password click link\r\n     */\r\n    handleForgotPassowrd(){\r\n        this.setState({\r\n            redirectForgotPassword: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle click register page\r\n     */\r\n    handleRegisterPage(){\r\n        this.setState({\r\n            redirectRegisterPage: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //redirect to forgot password page\r\n        if(this.state.redirectForgotPassword){\r\n            return <Redirect push={true} to={this.props.ForgotPasswordRedirectLink} />\r\n        }\r\n        //redirect to register page\r\n        if(this.state.redirectRegisterPage){\r\n            return <Redirect push={true} to={this.props.RegisterPageRedirectLink}/>\r\n        }\r\n        //load login form\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => {e.preventDefault(); this.props.OnLogin(this.state)}}>\r\n                        <h3 style={TextCenter}>Login</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Email address</strong></label>\r\n                            <input name=\"email\" \r\n                                type=\"email\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter email\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Password</strong></label>\r\n                            <input name=\"password\" \r\n                                type=\"password\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter password\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"custom-control custom-checkbox\">\r\n                                <input name=\"rememberMe\"\r\n                                    type=\"checkbox\" \r\n                                    className=\"custom-control-input\" \r\n                                    onClick={this.handleChangeByClick}\r\n                                    id=\"customCheck1\" />\r\n                                <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                                    <strong>Remember me</strong>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <input style={Margin0} \r\n                            type=\"submit\" \r\n                            value=\"Submit\" \r\n                            className=\"btn btn-primary btn-block\" \r\n                            disabled={this.state.disableSubmitButton}\r\n                            />                        \r\n                        <LinkDiv>\r\n                            <p className=\"float-left\">\r\n                                <LinkA className=\"App-link\" onClick={this.handleRegisterPage}>Sign Up</LinkA>\r\n                            </p>\r\n                            <p className=\"float-right\">\r\n                                Forgot <LinkA onClick={this.handleForgotPassowrd}>password?</LinkA>\r\n                            </p>\r\n                        </LinkDiv>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeBaseService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeBase[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeBases);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeBase> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeBases}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeBase[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeBases}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\nexport class KnowledgeBase {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.owner = obj ? obj.owner : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    owner: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeBaseProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeBaseStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeBase: KnowledgeBase,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeBaseStates: KnowledgeBaseStates = {\r\n    errors: {},\r\n    knowledgeBase: new KnowledgeBase(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { KnowledgeBaseProps, KnowledgeBaseStates, initialKnowledgeBaseStates } from './KnowledgeBasePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeBaseService } from './KnowledgeBase.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass KnowledgeBaseComponent extends React.Component<KnowledgeBaseProps, KnowledgeBaseStates> {\r\n    config: Config;\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeBaseStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getKnowledgeBaseUpdated = this.getKnowledgeBaseUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeBaseId = this.props.match.params['knowledgeBaseId'];\r\n        if (knowledgeBaseId !== \"createnew\") {\r\n            let knowledgeBase = await this.knowledgeBaseService.getById(this.props.match.params['knowledgeBaseId']);\r\n            this.setState({\r\n                knowledgeBase: knowledgeBase,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeBase object from dynamic form\r\n        let knowledgeBase = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.knowledgeBaseService.update(knowledgeBase);\r\n        }\r\n        else {\r\n            res = await this.knowledgeBaseService.createNew(knowledgeBase);\r\n        }\r\n        //find out which part is updated\r\n        let knowledgeBaseChanged = this.getKnowledgeBaseUpdated(knowledgeBase);\r\n        if (knowledgeBaseChanged !== \"\") {\r\n            let knowledgeBaseId = this.state.isEditRecord ? knowledgeBase._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: knowledgeBaseId,\r\n                comment: knowledgeBaseChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            knowledgeBase.comments.push(nComment);\r\n            //update comment\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            knowledgeBase: knowledgeBase\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted knowledgeBase with current knowledgeBase to find out which parts are updated\r\n     * use to show in knowledgeBase log\r\n     * @param knowledgeBase new knowledgeBase\r\n     */\r\n    getKnowledgeBaseUpdated(knowledgeBase: KnowledgeBase) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.knowledgeBase) !== JSON.stringify(knowledgeBase)) {\r\n            if (JSON.stringify(this.state.knowledgeBase.name) !== JSON.stringify(knowledgeBase.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    knowledgeBase.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.knowledgeBase.owner) !== JSON.stringify(knowledgeBase.owner)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Owner:</div>\r\n                                <div>Owner</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(knowledgeBase.owner && knowledgeBase.owner._id) ?\r\n                                        `${knowledgeBase.owner.firstName} ${knowledgeBase.owner.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeBase {\r\n        let currentAct = this.state.knowledgeBase;\r\n        let formAct = new KnowledgeBase(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let knowledgeBase = this.state.knowledgeBase;\r\n        knowledgeBase.comments = form.comments;\r\n        knowledgeBase.comments.forEach((val) => {\r\n            val.target = knowledgeBase._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        knowledgeBase: knowledgeBase\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeBase questions\r\n     * @param knowledgeBase knowledgeBase object\r\n     */\r\n    getQuestion(knowledgeBase: KnowledgeBase) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: knowledgeBase.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'owner',\r\n            label: 'Owner',\r\n            value: knowledgeBase.owner,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.knowledgeBase.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeBase);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeBaseComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { KnowledgeBaseService } from '../../../components/Management/KnowledgeBase/KnowledgeBase.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeBaseComponent from '../../../components/Management/KnowledgeBase/KnowledgeBase';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeBases } from '../../store/knowledgeBase/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeBaseContainerProps {\r\n    user: any,\r\n    storeKnowledgeBases: typeof storeKnowledgeBases\r\n}\r\ninterface KnowledgeBaseContainerStates {\r\n    allKnowledgeBase: KnowledgeBase[],\r\n    knowledgeBaseList: KnowledgeBase[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass KnowledgeBaseContainer extends Component<KnowledgeBaseContainerProps, KnowledgeBaseContainerStates> {\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeBase: [],\r\n            knowledgeBaseList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeBaseByFilter = this.getKnowledgeBaseByFilter.bind(this);\r\n        this.deleteKnowledgeBaseHandler = this.deleteKnowledgeBaseHandler.bind(this);\r\n        this.addKnowledgeBaseHandler = this.addKnowledgeBaseHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeBaseByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeBases = this.state.allKnowledgeBase;\r\n        if (knowledgeBases.length === 0) {\r\n            knowledgeBases = await this.knowledgeBaseService.getAllData();\r\n            this.props.storeKnowledgeBases(knowledgeBases);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeBase: knowledgeBases,\r\n            knowledgeBaseList: knowledgeBases.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeBase\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeBaseHandler(records: KnowledgeBase[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeBaseService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeBaseHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgebases/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgebases/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Owner',\r\n                id: 'owner',\r\n                accessor: (row: KnowledgeBase) => row.owner ? `${row.owner.firstName} ${row.owner.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgebases\">\r\n                        <ContainerDiv className=\"knowledgeBase-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.knowledgeBaseList}\r\n                                pageCount={this.state.allKnowledgeBase.length}\r\n                                fetchData={this.getKnowledgeBaseByFilter}\r\n                                deleteRecordHandler={this.deleteKnowledgeBaseHandler}\r\n                                addRecordHandler={this.addKnowledgeBaseHandler}\r\n                                TableName=\"Knowledge Bases\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgebases/:knowledgeBaseId`}>\r\n                        <KnowledgeBaseComponent loginUser={this.props.user.currentUser}></KnowledgeBaseComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeBaseList: store.knowledgeBases\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeBases\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeBaseContainer)","import { REMOVE_KNOWLEDGE_BASES, STORE_KNOWLEDGE_BASES } from \"./types\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\nexport function storeKnowledgeBases(acts: KnowledgeBase[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_BASES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeBases(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_BASES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_BASES = \"STORE_KNOWLEDGE_BASES\";\r\nexport const REMOVE_KNOWLEDGE_BASES = \"REMOVE_KNOWLEDGE_BASES\";\r\n\r\ninterface StoreKnowledgeBasesAction {\r\n  type: typeof STORE_KNOWLEDGE_BASES;\r\n  payload: KnowledgeBase[];\r\n}\r\n\r\ninterface RemoveKnowledgeBasesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_BASES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeBaseActionTypes = StoreKnowledgeBasesAction | RemoveKnowledgeBasesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeArticleService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeArticle[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeArticles);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeArticle> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeArticles}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeArticle[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeArticles}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { KnowledgeBase } from \"./knowledgeBase\";\r\nexport class KnowledgeArticle {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.shortDescription = obj ? obj.shortDescription : '';\r\n        this.knowledgeBase = obj ? obj.knowledgeBase : new KnowledgeBase();\r\n        this.contents = obj ? obj.contents : '';\r\n        this.reviewer = obj ? obj.reviewer : new User();\r\n        this.version = obj ? obj.version : 0;\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    shortDescription: string;\r\n    knowledgeBase: KnowledgeBase;\r\n    contents: string;\r\n    reviewer: User;\r\n    version: number;\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeArticleProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeArticleStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeArticle: KnowledgeArticle,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeArticleStates: KnowledgeArticleStates = {\r\n    errors: {},\r\n    knowledgeArticle: new KnowledgeArticle(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst DownloadContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nconst dropdownStyle: React.CSSProperties = {\r\n    height: '38px',\r\n    width: '100%',\r\n    fontWeight: 400,\r\n    fontSize: 'small',\r\n    borderRadius: '.25rem',\r\n    border: '1px solid #e8e8e8 !important',\r\n    padding: '1.07em 1em'\r\n};\r\nexport interface DocumentViewerProps {\r\n    contents: string\r\n}\r\nexport class DocumentViewer extends React.Component<DocumentViewerProps, {}> {\r\n    handleOnclick(type: string) {\r\n        switch (type) {\r\n            case 'PDF':\r\n                var printWindow = window.open('', '');\r\n                if (printWindow) {\r\n                    printWindow.document.write('<html><head><title></title>');\r\n                    printWindow.document.write('</head><body >');\r\n                    printWindow.document.write(this.props.contents);\r\n                    printWindow.document.write('</body></html>');\r\n                    printWindow.document.close();\r\n                    printWindow.print();\r\n                }\r\n                break;\r\n            case 'CSV':\r\n                //TODO: Implement\r\n                break;\r\n            case 'JSON':\r\n                //TODO: implement\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <DownloadContainerDiv>\r\n                    <Dropdown className=\"float-right\">\r\n                        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\" style={dropdownStyle}>\r\n                            Download\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('PDF')}>PDF</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('CSV')}>CSV</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('JSON')}>JSON</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </DownloadContainerDiv>\r\n                <div id=\"contents\" style={{ fontFamily: 'times' }} dangerouslySetInnerHTML={{ __html: this.props.contents }} ></div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { KnowledgeArticleProps, KnowledgeArticleStates, initialKnowledgeArticleStates } from './KnowledgeArticlePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeArticleService } from './KnowledgeArticle.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion, CkeditorQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { Config } from '../../../configuration/config';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Button } from '@material-ui/core';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport { DocumentViewer } from '../../../share-components/DocumentViewer/DocumentViewer';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst PreviewContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nclass KnowledgeArticleComponent extends React.Component<KnowledgeArticleProps, KnowledgeArticleStates> {\r\n    config: Config;\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeArticleStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeArticleId = this.props.match.params['knowledgeArticleId'];\r\n        if (knowledgeArticleId !== \"createnew\") {\r\n            let knowledgeArticle = await this.knowledgeArticleService.getById(this.props.match.params['knowledgeArticleId']);\r\n            this.setState({\r\n                knowledgeArticle: knowledgeArticle,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeArticle object from dynamic form\r\n        let knowledgeArticle = this.convertFormToObject(form);\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeArticleService.update(knowledgeArticle)\r\n                .then((result) => {\r\n                    //TODO: show message\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            this.knowledgeArticleService.createNew(knowledgeArticle)\r\n                .then((result) => {\r\n                    if (this.state.isEditRecord) {\r\n                        this.setState({\r\n                            knowledgeArticle: knowledgeArticle\r\n                        });\r\n                    }\r\n                    else {\r\n                        window.location.reload(false);\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeArticle {\r\n        let currentAct = this.state.knowledgeArticle;\r\n        let formAct = new KnowledgeArticle(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeArticle questions\r\n     * @param knowledgeArticle knowledgeArticle object\r\n     */\r\n    getQuestion(knowledgeArticle: KnowledgeArticle) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Short description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Short Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'shortDescription',\r\n            label: 'Short Description',\r\n            value: knowledgeArticle.shortDescription,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add knowledge base\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Knowledge Base is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'knowledgeBase',\r\n            label: 'Knowledge Base',\r\n            value: knowledgeArticle.knowledgeBase,\r\n            validators: validators,\r\n            serverUrl: this.config.apiServiceURL.knowledgeBases,\r\n            displayField: 'name',\r\n            listFields: ['name'],\r\n            searchBar: true,\r\n            order: 150\r\n        }));\r\n\r\n        //add contents\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Contents is required.'\r\n        };\r\n        questions.push(new CkeditorQuestion({\r\n            key: 'contents',\r\n            label: 'Contents',\r\n            value: knowledgeArticle.contents,\r\n            validators: validators,\r\n            order: 200\r\n        }));\r\n\r\n        //Add reviewer\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'reviewer',\r\n            label: 'Reviewer',\r\n            value: knowledgeArticle.reviewer,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeArticle);\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <ContainerDiv>\r\n                            {\r\n                                this.state.isEditRecord ?\r\n                                    (\r\n                                        <PreviewContainerDiv>\r\n                                            <Button className=\"float-right\" variant=\"contained\" color=\"primary\">\r\n                                                <Link to={`${this.state.knowledgeArticle._id}/preview`} style={{color: 'white'}}>Preview</Link>\r\n                                            </Button>\r\n                                        </PreviewContainerDiv>\r\n                                    )\r\n                                    :\r\n                                    ('')\r\n                            }\r\n                            <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId/preview`}>\r\n                        <DocumentViewer contents={this.state.knowledgeArticle.contents}></DocumentViewer>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeArticleComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { KnowledgeArticleService } from '../../../components/Management/KnowledgeArticle/KnowledgeArticle.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeArticleComponent from '../../../components/Management/KnowledgeArticle/KnowledgeArticle';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeArticles } from '../../store/knowledgeArticle/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeArticleContainerProps {\r\n    user: any,\r\n    storeKnowledgeArticles: typeof storeKnowledgeArticles\r\n}\r\ninterface KnowledgeArticleContainerStates {\r\n    allKnowledgeArticle: KnowledgeArticle[],\r\n    knowledgeArticleList: KnowledgeArticle[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nconst contentStyle:React.CSSProperties = {\r\n    maxHeight: '55px',\r\n    overflow: 'hidden'\r\n}\r\nclass KnowledgeArticleContainer extends Component<KnowledgeArticleContainerProps, KnowledgeArticleContainerStates> {\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeArticle: [],\r\n            knowledgeArticleList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeArticleByFilter = this.getKnowledgeArticleByFilter.bind(this);\r\n        this.deleteKnowledgeArticleHandler = this.deleteKnowledgeArticleHandler.bind(this);\r\n        this.addKnowledgeArticleHandler = this.addKnowledgeArticleHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeArticleByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeArticles = this.state.allKnowledgeArticle;\r\n        if (knowledgeArticles.length === 0) {\r\n            knowledgeArticles = await this.knowledgeArticleService.getAllData();\r\n            this.props.storeKnowledgeArticles(knowledgeArticles);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeArticle: knowledgeArticles,\r\n            knowledgeArticleList: knowledgeArticles.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeArticle\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeArticleHandler(records: KnowledgeArticle[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeArticleService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeArticleHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgearticles/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Short Description',\r\n                id: 'shortDescription',\r\n                accessor: 'shortDescription',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgearticles/${row.original._id}`}>{row.original.shortDescription}</Link>)\r\n            },\r\n            {\r\n                Header: 'Base',\r\n                id: 'knowledgeBase',\r\n                accessor: (row: KnowledgeArticle) => row.knowledgeBase ? `${row.knowledgeBase.name}` : ''\r\n            },\r\n            {\r\n                Header: 'Contents',\r\n                id: 'contents',\r\n                accessor: (row: KnowledgeArticle) => (<div style={contentStyle} dangerouslySetInnerHTML={{__html: row.contents}}></div>)\r\n            },\r\n            {\r\n                Header: 'Reviewer',\r\n                id: 'reviewer',\r\n                accessor: (row: KnowledgeArticle) => row.reviewer ? `${row.reviewer.firstName} ${row.reviewer.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgearticles\">\r\n                        <ContainerDiv className=\"knowledgeArticle-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.knowledgeArticleList}\r\n                                pageCount={this.state.allKnowledgeArticle.length}\r\n                                fetchData={this.getKnowledgeArticleByFilter}\r\n                                deleteRecordHandler={this.deleteKnowledgeArticleHandler}\r\n                                addRecordHandler={this.addKnowledgeArticleHandler}\r\n                                TableName=\"Knowledge Articles\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <KnowledgeArticleComponent loginUser={this.props.user.currentUser}></KnowledgeArticleComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeArticleList: store.knowledgeArticles\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeArticles\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeArticleContainer)","import { REMOVE_KNOWLEDGE_ARTICLES, STORE_KNOWLEDGE_ARTICLES } from \"./types\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\nexport function storeKnowledgeArticles(acts: KnowledgeArticle[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_ARTICLES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeArticles(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_ARTICLES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_ARTICLES = \"STORE_KNOWLEDGE_ARTICLES\";\r\nexport const REMOVE_KNOWLEDGE_ARTICLES = \"REMOVE_KNOWLEDGE_ARTICLES\";\r\n\r\ninterface StoreKnowledgeArticlesAction {\r\n  type: typeof STORE_KNOWLEDGE_ARTICLES;\r\n  payload: KnowledgeArticle[];\r\n}\r\n\r\ninterface RemoveKnowledgeArticlesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_ARTICLES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeArticleActionTypes = StoreKnowledgeArticlesAction | RemoveKnowledgeArticlesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ProjectService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Project[]> {\r\n        try {\r\n            const res: AxiosResponse<Project[]> = await commonAPI.get(this.configs.apiServiceURL.projects);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Project> {\r\n        try {\r\n            const res: AxiosResponse<Project> = await commonAPI.get(`${this.configs.apiServiceURL.projects}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Project[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.projects}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ProjectProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ProjectStates {\r\n    errors:{[s:string]: string[]},\r\n    project: Project,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialProjectStates: ProjectStates = {\r\n    errors: {},\r\n    project: new Project(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { ProjectProps, ProjectStates, initialProjectStates } from './ProjectPropsState';\r\nimport styled from 'styled-components';\r\nimport { ProjectService } from './Project.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Project } from '../../../class/project';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ProjectComponent extends React.Component<ProjectProps, ProjectStates> {\r\n    config: Config;\r\n    projectService: ProjectService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectProps) {\r\n        super(props);\r\n\r\n        this.state = initialProjectStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getProjectUpdated = this.getProjectUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let projectId = this.props.match.params['projectId'];\r\n        if (projectId !== \"createnew\") {\r\n            let project = await this.projectService.getById(projectId);\r\n            this.setState({\r\n                project: project,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit Project\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get Project object from dynamic form\r\n        let project = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.projectService.update(project);\r\n        }\r\n        else {\r\n            res = await this.projectService.createNew(project);\r\n        }\r\n        //find out which part is updated\r\n        let projectChanged = this.getProjectUpdated(project);\r\n        if (projectChanged !== \"\") {\r\n            let projectId = this.state.isEditRecord ? project._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: projectId,\r\n                comment: projectChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            project.comments.push(nComment);\r\n            //update comment\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            project: project\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted Project with current Project to find out which parts are updated\r\n     * use to show in Project log\r\n     * @param project new Project\r\n     */\r\n    getProjectUpdated(project: Project) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.project) !== JSON.stringify(project)) {\r\n            if (JSON.stringify(this.state.project.name) !== JSON.stringify(project.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    project.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.project.manager) !== JSON.stringify(project.manager)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Manager:</div>\r\n                                <div>Manager</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(project.manager && project.manager._id) ?\r\n                                        `${project.manager.firstName} ${project.manager.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to Project\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Project {\r\n        let currentAct = this.state.project;\r\n        let formAct = new Project(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let project = this.state.project;\r\n        project.comments = form.comments;\r\n        project.comments.forEach((val) => {\r\n            val.target = project._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        project: project\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate Project questions\r\n     * @param record Project object\r\n     */\r\n    getQuestion(record: Project) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: record.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add manager text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Manager is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'manager',\r\n            label: 'Manager',\r\n            value: record.manager,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            validators: validators,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        //Add member list\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'members',\r\n            label: 'Member',\r\n            value: record.members,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            multiple: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions.sort((a,b)=> a.order - b.order);\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.project.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.project);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ProjectComponent);","import React, { Component } from 'react';\r\nimport { Project } from '../../../class/project';\r\nimport { ProjectService } from '../../../components/Management/Project/Project.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ProjectComponent from '../../../components/Management/Project/Project';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeProjects } from '../../store/project/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface ProjectContainerProps {\r\n    user: any,\r\n    storeProjects: typeof storeProjects\r\n}\r\ninterface ProjectContainerStates {\r\n    allProject: Project[],\r\n    projectList: Project[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ProjectContainer extends Component<ProjectContainerProps, ProjectContainerStates> {\r\n    projectService: ProjectService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allProject: [],\r\n            projectList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getProjectByFilter = this.getProjectByFilter.bind(this);\r\n        this.deleteProjectHandler = this.deleteProjectHandler.bind(this);\r\n        this.addProjectHandler = this.addProjectHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getProjectByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let projects = this.state.allProject;\r\n        if (projects.length === 0) {\r\n            projects = await this.projectService.getAllData();\r\n            this.props.storeProjects(projects);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allProject: projects,\r\n            projectList: projects.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete Project\r\n     * @param records deleted records\r\n     */\r\n    async deleteProjectHandler(records: Project[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.projectService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addProjectHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/projects/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`projects/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Manager',\r\n                id: 'manager',\r\n                accessor: (row: Project) => row.manager ? `${row.manager.firstName} ${row.manager.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/projects\">\r\n                        <ContainerDiv className=\"project-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.projectList}\r\n                                pageCount={this.state.allProject.length}\r\n                                fetchData={this.getProjectByFilter}\r\n                                deleteRecordHandler={this.deleteProjectHandler}\r\n                                addRecordHandler={this.addProjectHandler}\r\n                                TableName=\"Projects\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/projects/:projectId`}>\r\n                        <ProjectComponent loginUser={this.props.user.currentUser}></ProjectComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        projectList: store.projects\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeProjects\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ProjectContainer)","import { REMOVE_PROJECTS, STORE_PROJECTS } from \"./types\";\r\nimport { Project } from \"../../../class/project\";\r\n\r\nexport function storeProjects(acts: Project[]) {\r\n  return {\r\n    type: STORE_PROJECTS,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeProjects(timestamp: number) {\r\n  return {\r\n    type: REMOVE_PROJECTS,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Project } from \"../../../class/project\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_PROJECTS = \"STORE_PROJECTS\";\r\nexport const REMOVE_PROJECTS = \"REMOVE_PROJECTS\";\r\n\r\ninterface StoreProjectsAction {\r\n  type: typeof STORE_PROJECTS;\r\n  payload: Project[];\r\n}\r\n\r\ninterface RemoveProjectsAction {\r\n  type: typeof REMOVE_PROJECTS;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ProjectActionTypes = StoreProjectsAction | RemoveProjectsAction;\r\n","import React from 'react';\r\nimport {\r\n\tHashRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tRedirect\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { About } from './components/About/About';\r\nimport { Home } from './components/Home/Home';\r\nimport Toolbar from './components/UI/Toolbar/Toolbar';\r\nimport { Contact } from './components/Contact/Contact';\r\nimport SignUp from './components/Auth/SignUp/SignUp';\r\nimport { SignUpState } from './components/Auth/SignUp/SignUpPropsStates';\r\nimport { UserServiceApi } from './components/Management/Users/User.service';\r\nimport * as apiConfig from './configuration/api.config';\r\nimport { User } from './class/user';\r\nimport { AlertDiv } from './share-components/Alert/AlertComponent';\r\nimport { Config } from './configuration/config';\r\nimport UserContainer from './redux/containers/Users/UserContainer';\r\nimport ActivityContainer from './redux/containers/Activities/ActivityContainer';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from './redux/store';\r\nimport { loginUser } from './redux/store/user/actions';\r\nimport { LoginState } from './components/Auth/Login/LoginPropsStates';\r\nimport { Credentials } from './interface/Credentials';\r\nimport Login from './components/Auth/Login/Login';\r\nimport KnowledgeBaseContainer from './redux/containers/KnowledgeBases/KnowledgeBaseContainer';\r\nimport KnowledgeArticleContainer from './redux/containers/KnowledgeArticles/KnowledgeArticleContainer';\r\nimport ProjectContainer from './redux/containers/Projects/ProjectContainer';\r\n\r\ntype AppStates = {\r\n\tredirectLogin: boolean,\r\n\tredirectHome: boolean,\r\n\talertConfig: any\r\n}\r\ntype AppProps = {\r\n\tuser: any,\r\n\tloginUser: typeof loginUser;\r\n}\r\nclass App extends React.Component<AppProps, AppStates> {\r\n\tuserService: UserServiceApi;\t//user service\r\n\tconfig: Config;\r\n\tconstructor(props: AppProps) {\r\n\t\tsuper(props);\r\n\t\t//initial variables\r\n\t\tthis.state = {\r\n\t\t\tredirectLogin: false,\r\n\t\t\tredirectHome: false,\r\n\t\t\talertConfig: {}\r\n\t\t}\r\n\t\tthis.userService = new UserServiceApi(apiConfig.apiConfig);\r\n\t\tthis.config = new Config();\r\n\r\n\t\t//binding functions\r\n\t\t//login component\r\n\t\tthis.handleOnSubmitLoginForm = this.handleOnSubmitLoginForm.bind(this);\r\n\t\t//Sign up component\r\n\t\tthis.handleOnSubmitRegisterForm = this.handleOnSubmitRegisterForm.bind(this);\r\n\r\n\t\t//Router\r\n\t\tthis.handleRenderRedirectRouter = this.handleRenderRedirectRouter.bind(this);\r\n\r\n\t\t//Alert component\r\n\t\tthis.handleRenderAlert = this.handleRenderAlert.bind(this);\r\n\t\tthis.handleOnCloseAlert = this.handleOnCloseAlert.bind(this);\r\n\t}\r\n\r\n\t//------------------------------------------LOG IN COMPONENT-----------------------------\r\n\t/**\r\n\t * handle login form submit\r\n\t * @param form login state\r\n\t */\r\n\tasync handleOnSubmitLoginForm(form: LoginState) {\r\n\t\tlet credentials: Credentials = {\r\n\t\t\tusername: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\trememberMe: form.rememberMe\r\n\t\t}\r\n\t\tthis.userService.userLogin(credentials)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tlet user = new User(result);\r\n\t\t\t\t\tthis.props.loginUser(user);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectHome: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tvalue: this.config.commonMessage.userNotFound,\r\n\t\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch((err) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.loginError,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t//------------------------------------------SIGN UP COMPONENT----------------------------\r\n\t/**\r\n\t * handle sign up form submit\r\n\t * @param form sign up state\r\n\t */\r\n\thandleOnSubmitRegisterForm(form: SignUpState) {\r\n\t\tlet newUser = new User({\r\n\t\t\tfirstName: form.firstName,\r\n\t\t\tlastName: form.lastName,\r\n\t\t\temail: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\tphone: form.phone,\r\n\t\t\taddress: form.address\r\n\t\t});\r\n\t\tthis.userService.userRegister(newUser)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectLogin: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the case system want to redirect new page\r\n\t */\r\n\thandleRenderRedirectRouter() {\r\n\t\tif (this.state.redirectLogin) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/login\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse if (this.state.redirectHome) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t//------------------------------------------ALERT COMPONENT------------------------------\r\n\t/**\r\n\t * Handle on close alert component\r\n\t */\r\n\thandleOnCloseAlert() {\r\n\t\tthis.setState({\r\n\t\t\talertConfig: {}\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Handle render alert component\r\n\t */\r\n\thandleRenderAlert() {\r\n\t\tif (this.state.alertConfig.show) {\r\n\t\t\treturn (\r\n\t\t\t\t<AlertDiv variant={this.state.alertConfig.variant}\r\n\t\t\t\t\tshow={true}\r\n\t\t\t\t\tvalue={this.state.alertConfig.value}\r\n\t\t\t\t\tonClose={this.handleOnCloseAlert}\r\n\t\t\t\t>\r\n\t\t\t\t</AlertDiv>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// // Before the component mounts, we initialise our state\r\n\t// componentWillMount() {\r\n\t// }\r\n\r\n\t// After the component did mount\r\n\tcomponentDidMount() {\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.state.redirectHome) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectHome: false\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (this.state.redirectLogin) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectLogin: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<Toolbar />\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.handleRenderAlert()\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.handleRenderRedirectRouter()\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/contact\">\r\n\t\t\t\t\t\t\t<Contact />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/projects\">\r\n\t\t\t\t\t\t\t<ProjectContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/activities\">\r\n\t\t\t\t\t\t\t<ActivityContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/knowledgebases\">\r\n\t\t\t\t\t\t\t<KnowledgeBaseContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/knowledgearticles\">\r\n\t\t\t\t\t\t\t<KnowledgeArticleContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/users\">\r\n\t\t\t\t\t\t\t<UserContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.user.currentUser._id === undefined ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/login\">\r\n\t\t\t\t\t\t\t\t\t\t<Login OnLogin={this.handleOnSubmitLoginForm}\r\n\t\t\t\t\t\t\t\t\t\t\tRegisterPageRedirectLink=\"/signup\"\r\n\t\t\t\t\t\t\t\t\t\t\tForgotPasswordRedirectLink=\"/forgotpassword\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t('')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Route exact path=\"/signup\">\r\n\t\t\t\t\t\t\t<SignUp OnRegister={this.handleOnSubmitRegisterForm}\r\n\t\t\t\t\t\t\t\tLoginRedirectLink=\"/login\" />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n\tuser: state.user\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ loginUser }\r\n)(App);","import React from 'react';\r\nexport class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"cid-s05i0OO9sN\" id=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"media-container-row content text-white\">\r\n                        <div className=\"col-12 col-md-3\">\r\n                            <div className=\"media-wrap\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-192x108.jpg`} alt=\"GrownUp\" title=\"\" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-3 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Address\r\n                            </h5>\r\n                            <p className=\"mbr-text\">36 Bo Bao Tan Thang,<br />Tan Phu, Ho Chi Minh, VN</p>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Contacts\r\n                            </h5>\r\n                            <p className=\"mbr-text\">\r\n                                Email: robertvo.developer.93@gmail.com &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />Phone: +84 (0) 33 870 5850\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"footer-lower\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-sm-12\">\r\n                                <hr />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"media-container-row mbr-white\">\r\n                            <div className=\"col-sm-6 copyright\">\r\n                                <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                    © Copyright 2020 GrownUp - All Rights Reserved {process.env.REACT_APP_ACTIVITY_LOGS_SERVER}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"social-list align-right\">\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/c/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://instagram.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.behance.net/Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-behance socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import {\r\n  USER_LOGIN,\r\n  USER_LOGOUT,\r\n  UserActionTypes,\r\n  STORE_USER\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  currentUser: {},\r\n  userList: []\r\n}\r\n\r\nexport function userReducer(\r\n  state = initialState,\r\n  action: UserActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case USER_LOGIN:\r\n      return {\r\n        ...state, currentUser: action.payload\r\n      };\r\n    case USER_LOGOUT:\r\n      return {\r\n        ...state, currentUser: {}\r\n      };\r\n    case STORE_USER:\r\n      return {\r\n        ...state, userList: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_ACTIVITIES,\r\n  REMOVE_ACTIVITIES,\r\n  ActivityActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  activities: []\r\n}\r\n\r\nexport function activityReducer(\r\n  state = initialState,\r\n  action: ActivityActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: action.payload\r\n      };\r\n    case REMOVE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const UPDATE_REQUEST = \"UPDATE_REQUEST\";\r\n\r\nexport interface UpdateRequestsAction {\r\n  type: typeof UPDATE_REQUEST;\r\n  payload: number;\r\n}\r\n\r\nexport type RequestActionTypes = UpdateRequestsAction;\r\n","import {\r\n  UPDATE_REQUEST,\r\n  RequestActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  numberOfRequest: 0\r\n}\r\n\r\nexport function requestReducer(\r\n  state = initialState,\r\n  action: RequestActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case UPDATE_REQUEST:\r\n      return {\r\n        ...state, numberOfRequest: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_KNOWLEDGE_BASES,\r\n  REMOVE_KNOWLEDGE_BASES,\r\n  KnowledgeBaseActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeBases: []\r\n}\r\n\r\nexport function knowledgeBaseReducer(\r\n  state = initialState,\r\n  action: KnowledgeBaseActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_KNOWLEDGE_ARTICLES,\r\n  REMOVE_KNOWLEDGE_ARTICLES,\r\n  KnowledgeArticleActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeArticles: []\r\n}\r\n\r\nexport function knowledgeArticleReducer(\r\n  state = initialState,\r\n  action: KnowledgeArticleActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { UpdateRequestsAction, UPDATE_REQUEST } from \"./types\";\r\n\r\nexport function updateRequest(noRequests: number): UpdateRequestsAction{\r\n  return {\r\n    type: UPDATE_REQUEST,\r\n    payload: noRequests\r\n  };\r\n}\r\n","import {\r\n  STORE_PROJECTS,\r\n  REMOVE_PROJECTS,\r\n  ProjectActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  projects: []\r\n}\r\n\r\nexport function projectReducer(\r\n  state = initialState,\r\n  action: ProjectActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_PROJECTS:\r\n      return {\r\n        ...state, projects: action.payload\r\n      };\r\n    case REMOVE_PROJECTS:\r\n      return {\r\n        ...state, projects: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\t//https://github.com/rt2zz/redux-persist\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { userReducer } from \"./user/reducers\";\r\nimport { activityReducer } from \"./activity/reducers\";\r\nimport { requestReducer } from \"./request/reducers\";\r\nimport { knowledgeBaseReducer } from \"./knowledgeBase/reducers\";\r\nimport { knowledgeArticleReducer } from \"./knowledgeArticle/reducers\";\r\nimport axiosMiddleware from 'redux-axios-middleware';\r\nimport { commonAPI } from \"../../service/common-api.service\";\r\nimport { updateRequest } from \"./request/actions\";\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { projectReducer } from \"./project/reducers\";\r\n\r\n//define persistConfig\r\nconst persistConfig = {\r\n\tkey: 'root',\r\n\tstorage,\r\n}\r\n//combine all reducer\r\nconst rootReducer = combineReducers({\r\n\tuser: userReducer,\r\n\tactivities: activityReducer,\r\n\trequest: requestReducer,\r\n\tknowledgeBases: knowledgeBaseReducer,\r\n\tknowledgeArticles: knowledgeArticleReducer,\r\n\tprojects: projectReducer\r\n});\r\n//define AppState\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n//persist reducer\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n//add middleware redux-thunk => could view on chrome browser\r\nconst middlewares = [thunkMiddleware];\r\nlet numberOfRequest = 0;\r\nconst middlewareConfig = {\r\n\tinterceptors: {\r\n\t\trequest: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, req : AxiosRequestConfig) {\r\n\t\t\t\tlet appState:AppState = getState();\r\n\t\t\t\treq.headers.Authorization =  `bearer ${appState.user.currentUser.token}`;\r\n\t\t\t\tnumberOfRequest++;\r\n\t\t\t\tconsole.log(numberOfRequest);\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn req;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t],\r\n\t\tresponse: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, res : AxiosResponse) {\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn res;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\t//TODO: Redirect to login page if not loged in: 401\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t]\r\n\t}\r\n};\r\nconst middleWareEnhancer = applyMiddleware(...middlewares\r\n\t, axiosMiddleware(commonAPI.api, middlewareConfig)\r\n\t);\r\nexport default () => {\r\n\tlet store: any = createStore(\r\n\t\tpersistedReducer\r\n\t\t, composeWithDevTools(middleWareEnhancer)\r\n\t)\r\n\tlet persistor = persistStore(store)\r\n\treturn { store, persistor }\r\n}","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\"; //https://github.com/davidhu2000/react-spinners\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from \"../../redux/store\";\r\nimport styled from \"styled-components\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\ndisplay: block;\r\nmargin: 0 auto;\r\nmargin-top: 200px;\r\nborder-color: red;\r\n`;\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 10000;\r\n    opacity: 0.5;\r\n    background-color: gray;\r\n    top: 0px;\r\n`;\r\ninterface LoadingSpinnerProps {\r\n    numberOfRequest: number\r\n}\r\ninterface LoadingSpinnerStates {\r\n\r\n}\r\nclass LoadingSpinner extends React.Component<LoadingSpinnerProps, LoadingSpinnerStates> {\r\n    componentDidUpdate() {\r\n        console.log(this.props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.numberOfRequest > 0 ?\r\n                        (\r\n                            <ContainerDiv className=\"sweet-loading\">\r\n                                <BounceLoader\r\n                                    css={override}\r\n                                    size={100}\r\n                                    color={\"#123abc\"}\r\n                                    loading={this.props.numberOfRequest > 0}\r\n                                />\r\n                            </ContainerDiv>\r\n                        )\r\n                        : ('')\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    numberOfRequest: state.request.numberOfRequest\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(LoadingSpinner);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport { Footer } from './components/Footer/Footer';\r\nimport * as persistStore from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport LoadingSpinner from './share-components/Spinner/LoadingSpinner';\r\n\r\nReactDOM.render(\r\n\t<Provider store={persistStore.default().store}>\r\n\t\t<PersistGate loading={null} persistor={persistStore.default().persistor}>\r\n\t\t\t<LoadingSpinner />\r\n\t\t\t<App />\r\n\t\t\t<Footer />\r\n\t\t</PersistGate>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","import { Validator } from \"../class/validator\";\r\n\r\nexport class QuestionBase<T> {\r\n\tvalue?: T;\r\n\tkey: string;\r\n\tlabel: string;\r\n\trequired: boolean;\r\n\torder: number;\r\n\tcontrolType: string;\r\n\ttype: string;\r\n\toptions: { key: string, value: string }[];\r\n\tvalidators: {[s:string]: Validator<any>};\r\n\tmultiple: boolean;    //dropdown list multiple\r\n\trows: number;       //number of rows in text area\r\n\treadonly: boolean;  //question is readonly or not\r\n\tsearchBar: boolean;\r\n\tserverUrl: string;\r\n\tdisplayField: string;\r\n\tlistFields: string[];\r\n\tfilterCondition: string;\r\n\r\n\tconstructor(options: {\r\n\t\tvalue?: T,\r\n\t\tkey?: string,\r\n\t\tlabel?: string,\r\n\t\trequired?: boolean,\r\n\t\torder?: number,\r\n\t\tcontrolType?: string,\r\n\t\ttype?: string,\r\n\t\toptions?: { key: string, value: string }[],\r\n\t\tvalidators?: any,\r\n\t\tmultiple?: boolean,\r\n\t\trows?: number,\r\n\t\treadonly?: boolean,\r\n\t\tsearchBar?: boolean,\r\n\t\tserverUrl?: string,\r\n\t\tdisplayField?: string,\r\n\t\tlistFields?: string[],\r\n\t\tfilterCondition?: string\r\n\t} = {}) {\r\n\t\tthis.value = options.value;\r\n\t\tthis.key = options.key || '';\r\n\t\tthis.label = options.label || '';\r\n\t\tthis.required = !!options.required;\r\n\t\tthis.order = options.order === undefined ? 1 : options.order;\r\n\t\tthis.controlType = options.controlType || '';\r\n\t\tthis.type = options.type || '';\r\n\t\tthis.options = options.options || [];\r\n\t\tthis.validators = options.validators || [];\r\n\t\tthis.multiple = !!options.multiple;\r\n\t\tthis.rows = options.rows === undefined ? 1 : options.rows;\r\n\t\tthis.readonly = !!options.readonly;\r\n\t\tthis.searchBar = !!options.searchBar;\r\n\t\tthis.serverUrl = options.serverUrl || '';\r\n\t\tthis.displayField = options.displayField || '';\r\n\t\tthis.listFields = options.listFields || [];\r\n\t\tthis.filterCondition = options.filterCondition || '';\r\n\t}\r\n}\r\n","export class ODateRange{\r\n    constructor(obj?: any){\r\n        this.startDate = obj ? obj.startDate : null;\r\n        this.endDate = obj ? obj.endDate : null;\r\n    }\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n}"],"sourceRoot":""}