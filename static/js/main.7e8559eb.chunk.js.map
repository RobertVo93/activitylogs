{"version":3,"sources":["share-components/DynamicForm/DynamicFormPropState.ts","share-components/Variables/ReferenceList/ReferenceList.tsx","share-components/Variables/DropdownList/DropDownPropsStates.ts","share-components/Variables/DropdownList/DropdownList.tsx","share-components/Variables/DateRange/DateRangePropsStates.ts","share-components/Variables/DateRange/DateRange.tsx","share-components/Variables/ReferenceList/ReferencePropsStates.ts","share-components/Variables/ReferenceList/Reference.service.ts","service/common-api.service.ts","share-components/DynamicForm/questions/question-dropdown.ts","share-components/DynamicForm/questions/question-textarea.ts","share-components/DynamicForm/questions/question-textbox.ts","share-components/DynamicForm/questions/question-daterange.ts","share-components/DynamicForm/questions/question-reference.ts","share-components/DynamicForm/questions/question-ckeditor.ts","share-components/Ckeditor/Ckeditor.jsx","share-components/Variables/ReferenceList/ReferenceMultipleList.tsx","share-components/DynamicForm/DynamicForm.tsx","share-components/DynamicForm/index.ts","configuration/api.config.ts","share-components/DynamicForm/form.config.ts","serviceWorker.ts","components/About/About.tsx","components/Home/Home.tsx","components/UI/Toolbar/Toolbar.tsx","redux/store/user/actions.ts","redux/store/user/types.ts","components/Contact/Contact.tsx","components/Auth/SignUp/SignUpPropsStates.ts","components/Auth/SignUp/SignUp.tsx","configuration/config.ts","components/Management/Users/User.service.ts","class/user.ts","share-components/Alert/AlertComponent.tsx","components/Management/Users/UserPropsStates.ts","components/Management/Users/User.tsx","share-components/Table/Filter/Filter.jsx","share-components/Table/Selection/RowSelection.jsx","share-components/Table/Pagination/TablePaginationActions.jsx","share-components/Table/Filter/GlobalFilter.jsx","share-components/Table/Toolbar/TableToolbar.jsx","share-components/Table/Table.jsx","redux/containers/Users/UserContainer.tsx","components/Management/Activities/Activity.service.ts","class/activity.ts","components/Management/Activities/ActivityPropsState.ts","share-components/Variables/BreakLine/BreakLine.tsx","share-components/CommentLog/CommentLogPropsStates.ts","class/common/comment.ts","share-components/CommentLog/CommentLog.tsx","service/common.service.ts","components/Management/Activities/Activity.tsx","redux/containers/Activities/ActivityContainer.tsx","redux/store/activity/actions.ts","redux/store/activity/types.ts","components/Auth/Login/LoginPropsStates.ts","components/Auth/Login/Login.tsx","components/Management/KnowledgeBase/KnowledgeBase.service.ts","class/knowledgeBase.ts","components/Management/KnowledgeBase/KnowledgeBasePropsState.ts","components/Management/KnowledgeBase/KnowledgeBase.tsx","redux/containers/KnowledgeBases/KnowledgeBaseContainer.tsx","redux/store/knowledgeBase/actions.ts","redux/store/knowledgeBase/types.ts","components/Management/KnowledgeArticle/KnowledgeArticle.service.ts","class/knowledgeArticle.ts","components/Management/KnowledgeArticle/KnowledgeArticlePropsState.ts","share-components/DocumentViewer/DocumentViewer.tsx","components/Management/KnowledgeArticle/KnowledgeArticle.tsx","redux/containers/KnowledgeArticles/KnowledgeArticleContainer.tsx","redux/store/knowledgeArticle/actions.ts","redux/store/knowledgeArticle/types.ts","components/Management/Project/Project.service.ts","class/project.ts","components/Management/Project/ProjectPropsState.ts","components/Management/Project/Project.tsx","redux/containers/Projects/ProjectContainer.tsx","redux/store/project/actions.ts","redux/store/project/types.ts","App.tsx","components/Footer/Footer.tsx","redux/store/user/reducers.ts","redux/store/activity/reducers.ts","redux/store/request/types.ts","redux/store/request/reducers.ts","redux/store/knowledgeBase/reducers.ts","redux/store/knowledgeArticle/reducers.ts","redux/store/request/actions.ts","redux/store/project/reducers.ts","redux/store/index.ts","share-components/Spinner/LoadingSpinner.tsx","index.tsx","share-components/DynamicForm/questions/question-base.ts","class/common/keyValue.ts","class/common/date-range.ts"],"names":["initialDynamicFormStates","originalListFields","listFields","errors","disableSubmitButton","SearchInput","styled","input","ReferenceList","props","referenceService","state","initialReferenceStates","ReferenceService","apiConfig","onSelectionChangeHandler","bind","renderSearchBar","onSearchInputChangeHandler","selected","this","default","getByUrl","serverUrl","allReference","displayedData","forEach","element","newObj","JSON","parse","stringify","p","indexOf","displayField","push","setState","originalSelected","referenceKey","data","originalData","selectedValue","result","searchBar","className","onChange","placeholder","Divider","event","preventDefault","searchKey","target","value","eventKey","preSelected","i","length","_id","toString","onSelectionChange","id","title","onSelect","filter","val","map","option","index","Item","key","Object","keys","opt","ind","React","Component","initialDropDownStates","dropdownKey","KeyValue","CustomDropDown","options","Dropdown","DropdownButton","initialDateRangeStates","originalDateRange","ODateRange","dateRange","startDate","endDate","ContainerDiv","div","StartDateDiv","EndDateDiv","DateRange","handleChangeStartDate","handleChangeEndDate","undefined","date","console","log","dateFormat","maxDate","minDate","selectedItems","config","url","commonAPI","get","res","success","numberOfRequest","api","axios","create","getUri","request","delete","head","post","put","patch","response","error","DropdownQuestion","controlType","FormConfig","questionControlType","dropdown","QuestionBase","TextAreaQuestion","type","textarea","TextboxQuestion","textbox","DateRangeQuestion","ReferenceQuestion","reference","CkeditorQuestion","ckeditor","ReactCkeditor","editor","ClassicEditor","onInit","getData","dataChange","ckeditorKey","onBlur","onFocus","icon","fontSize","checkedIcon","ReferenceMultipleList","onCloseDropdown","onChangeDropdown","reason","Autocomplete","multiple","onClose","disableCloseOnSelect","getOptionLabel","renderOption","Fragment","Checkbox","style","marginRight","checked","paddingRight","width","renderInput","params","TextField","variant","label","DangerText","color","fontStyle","Margin0","margin","DynamicForm","formConfig","renderErrorMessage","renderQuestion","validateForm","handleChange","onSelectionChangeCallback","onSelectionReferenceListChange","onselectionDateRangeChange","onCkeditorChange","ListFields","disabled","valid","e","newDateRange","name","str","key1","validators","formValidators","require","errorMessage","minLength","maxLength","email","key2","key3","key4","questionKey","err","question","htmlFor","hidden","data-text","readOnly","readonly","rows","filterCondition","onSubmit","OnSubmitCallback","field","qs","timeout","Number","process","baseURL","headers","common","Accept","paramsSerializer","indices","inputTypeDef","button","checkbox","datetime","datetimeLocal","file","image","month","number","password","radio","range","reset","search","submit","tel","text","time","week","Boolean","window","location","hostname","match","About","src","alt","href","rel","frameBorder","border","allowFullScreen","Home","opacity","backgroundColor","aria-hidden","height","Toolbar","logout","renderManagementLink","renderProfileLink","renderServiceLink","logoutUser","user","data-toggle","aria-expanded","firstName","lastName","to","onClick","zIndex","data-target","aria-controls","aria-label","data-app-modern-menu","MapDispatchToProps","meta","connect","store","currentUser","Contact","data-form-type","action","method","data-form-title","data-form-email","data-form-alert","data-form-alert-danger","data-for","data-form-field","required","initialSignUpState","repassword","address","phone","redirectLoginPage","mandatoryFields","Container","LoginDiv","CustomTextBox","display","borderRadius","boxShadow","lineHeight","padding","TextCenter","textAlign","LinkA","a","SignUp","handleLogin","LoginRedirectLink","OnRegister","Config","apiServiceURL","server","serverAPI","users","login","register","todo","activities","knowledgeBases","knowledgeArticles","projects","commonMessage","loginError","userNotFound","signUpError","alertVariants","primary","secondar","danger","warning","info","light","dark","activityStatus","defaultDropDownOptions","all","none","datetimeFormat","yyyyMMdd","ddMMyyyy","localStorageKey","appState","UserServiceApi","configs","axiosConfig","userLogin","userRegister","getAllUsers","getById","credentials","then","localStorage","setItem","catch","objs","User","obj","userId","token","CloseButton","AlertStyle","AlertDiv","show","setShow","flag","Alert","handleOnCloseButton","initialUserState","UserComponent","userService","getQuestion","handleSubmit","form","updateUser","questions","order","withRouter","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","count","stopPropagation","SelectColumnFilter","useMemo","Set","row","add","values","fuzzyTextFilterFn","matchSorter","autoRemove","IndeterminateCheckbox","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","classes","useTheme","page","rowsPerPage","onChangePage","IconButton","direction","Math","ceil","max","position","shape","fade","palette","white","breakpoints","up","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","InputBase","inputProps","useToolbarStyles","formControl","minWidth","maxWidth","paddingLeft","highlight","secondary","main","lighten","flex","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","TableToolbar","numSelected","deleteRecordHandler","addRecordHandler","TableName","allColumns","clsx","Tooltip","Typography","FormControl","InputLabel","Select","labelId","Input","renderValue","join","MenuItem","getToggleHiddenProps","ListItemText","Table","columns","fetchData","controlledPageCount","pageCount","skipPageReset","selectedId","filterTypes","fuzzyText","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","autoResetPage","manualPagination","useGlobalFilter","useFilters","useSortBy","usePagination","useRowSelect","hooks","Header","getToggleAllRowsSelectedProps","Cell","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","gotoPage","setPageSize","pageIndex","pageSize","selectedRowIds","TableContainer","selectedRowIndex","x","parseInt","selectedRecord","_","includes","TableHead","headerGroup","TableRow","getHeaderGroupProps","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","canFilter","columnDisableGlobalFilter","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","native","newPage","onChangeRowsPerPage","ActionsComponent","UserContainer","allUser","userList","isLoading","getUserByFilter","deleteUserHandler","pagination","storeUser","startRow","endRow","slice","records","confirm","deleteRecords","accessor","original","exact","path","payload","ActivityService","getAllData","Activity","description","implemetationPlan","planDate","actualDate","status","assignedTo","comments","createdBy","createdDate","updatedBy","updatedDate","comment","Date","initialActivityStates","activity","isEditRecord","BreakLine","cssProperties","initialCommentStates","newComment","Comment","userComment","commentDate","LeftDiv","RightDiv","ButtonCustom","ContainerInlineBlock","CommentDiv","CommentLog","handleSubmitComment","renderCommentTitle","loginUser","toUTCString","onSubmitComment","dangerouslySetInnerHTML","__html","reverse","com","renderCommentRawHTML","CommonService","format","year","getFullYear","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","replace","fixedFormatTwoDigit","object1","object2","obj1","obj2","entries","CommentLeftStyle","CommentRightStyle","CommentHeaderStyle","CommentBreakLineStyle","paddingTop","borderBottom","TextCenterStyle","ActivityComponent","activityService","commonService","renderCommentLog","convertFormToObject","getActivityUpdated","update","createNew","activityChanged","activityId","nComment","updateComment","reload","ReactDOMServer","renderToString","convertDateToStringByFormat","currentAct","formAct","sort","b","unshift","ActivityContainer","allActivity","activityList","redirectCreateNew","getActivityByFilter","deleteActivityHandler","addActivityHandler","redirectToCreateNew","storeActivities","acts","initialLoginState","rememberMe","redirectForgotPassword","redirectRegisterPage","LinkDiv","Login","handleChangeByClick","handleForgotPassowrd","handleRegisterPage","ForgotPasswordRedirectLink","RegisterPageRedirectLink","OnLogin","KnowledgeBaseService","KnowledgeBase","owner","initialKnowledgeBaseStates","knowledgeBase","KnowledgeBaseComponent","knowledgeBaseService","getKnowledgeBaseUpdated","knowledgeBaseChanged","knowledgeBaseId","KnowledgeBaseContainer","allKnowledgeBase","knowledgeBaseList","getKnowledgeBaseByFilter","deleteKnowledgeBaseHandler","addKnowledgeBaseHandler","storeKnowledgeBases","KnowledgeArticleService","KnowledgeArticle","shortDescription","contents","reviewer","version","initialKnowledgeArticleStates","knowledgeArticle","DownloadContainerDiv","dropdownStyle","fontWeight","DocumentViewer","printWindow","open","document","write","close","print","Toggle","Menu","handleOnclick","fontFamily","PreviewContainerDiv","KnowledgeArticleComponent","knowledgeArticleService","Button","contentStyle","overflow","KnowledgeArticleContainer","allKnowledgeArticle","knowledgeArticleList","getKnowledgeArticleByFilter","deleteKnowledgeArticleHandler","addKnowledgeArticleHandler","storeKnowledgeArticles","ProjectService","Project","manager","members","initialProjectStates","project","ProjectComponent","projectService","getProjectUpdated","projectId","projectChanged","record","ProjectContainer","allProject","projectList","getProjectByFilter","deleteProjectHandler","addProjectHandler","storeProjects","App","redirectLogin","redirectHome","alertConfig","handleOnSubmitLoginForm","handleOnSubmitRegisterForm","handleRenderRedirectRouter","handleRenderAlert","handleOnCloseAlert","username","newUser","Footer","REACT_APP_ACTIVITY_LOGS_SERVER","initialState","updateRequest","noRequests","persistConfig","storage","rootReducer","combineReducers","persistedReducer","persistReducer","middlewares","thunkMiddleware","middlewareConfig","interceptors","req","getState","dispatch","getSourceAction","Authorization","middleWareEnhancer","applyMiddleware","axiosMiddleware","createStore","composeWithDevTools","persistor","persistStore","override","css","LoadingSpinner","size","loading","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8GAgBA,kCAAO,IAAMA,EAA8C,CACvDC,mBAAoB,GACpBC,WAAa,GACbC,OAAQ,GACRC,qBAAqB,I,wWCbzB,IAAMC,EAAcC,IAAOC,MAAV,KAKJC,EAAb,kDAEI,WAAYC,GAAwB,IAAD,8BAC/B,cAAMA,IAFVC,sBACmC,EAG/B,EAAKC,MAAQC,IACb,EAAKF,iBAAmB,IAAIG,IAAiBC,KAC7C,EAAKC,yBAA2B,EAAKA,yBAAyBC,KAA9B,gBAChC,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,2BAA6B,EAAKA,2BAA2BF,KAAhC,gBAPH,EAFvC,kMAcYG,EAAWC,KAAKT,MAAMQ,SACtBC,KAAKX,MAAMU,SACXA,EAAWC,KAAKX,MAAMU,SACjBC,KAAKX,MAAMY,UAChBF,EAAWC,KAAKX,MAAMY,SAlBlC,SAoBiCD,KAAKV,iBAAiBY,SAASF,KAAKX,MAAMc,WApB3E,OAoBYC,EApBZ,OAqBYC,EAAuB,GAC3BD,EAAaE,SAAQ,SAAAC,GACjB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEvC,GAAI,EAAKlB,MAAMP,WAAY,CACvB,IAAK,IAAI8B,KAAKJ,GACgC,IAAtC,EAAKnB,MAAMP,WAAW+B,QAAQD,IAAmB,QAANA,GAAeA,IAAM,EAAKvB,MAAMyB,qBACpEN,EAAOI,GAGtBP,EAAcU,KAAKP,OAG3BR,KAAKgB,SAAS,CACVjB,SAAUA,EACVkB,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUZ,IAC5CmB,aAAclB,KAAKX,MAAM6B,aACzBC,KAAMd,EACNe,aAAchB,IAvC1B,iJA6CYK,KAAKE,UAAUX,KAAKT,MAAM0B,oBAAsBR,KAAKE,UAAUX,KAAKX,MAAMU,WAC1EC,KAAKgB,SAAS,CACVjB,SAAUC,KAAKX,MAAMU,SACrBkB,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUX,KAAKX,MAAMU,WACvDsB,cAAerB,KAAKX,MAAMU,SAASC,KAAKX,MAAMyB,kBAjD9D,wCA0DQ,IAAIQ,EASJ,OARItB,KAAKX,MAAMkC,YACXD,EACI,yBAAKE,UAAU,cACX,kBAACvC,EAAD,CAAauC,UAAU,eAAeC,SAAUzB,KAAKF,2BAA4B4B,YAAY,eAC7F,kBAAC,IAASC,QAAV,QAILL,IAnEf,iDA0E+BM,GACvBA,EAAMC,iBACN7B,KAAKgB,SAAS,CACVc,UAAWF,EAAMG,OAAOC,UA7EpC,+CAsF6BC,EAAeL,GAGpC,IAHoD,IAAD,OAE/CM,EAAclC,KAAKT,MAAMQ,SACpBoC,EAAI,EAAGA,EAAInC,KAAKT,MAAM6B,aAAagB,OAAQD,IAChD,GAAInC,KAAKT,MAAM6B,aAAae,GAAGE,IAAIC,aAAeL,EAASK,WAAY,CACnEJ,EAAclC,KAAKT,MAAM6B,aAAae,GACtC,MAIRnC,KAAKgB,SAAS,CACVjB,SAAUmC,EACVb,cAAea,EAAYlC,KAAKX,MAAMyB,gBACvC,WACC,EAAKzB,MAAMkD,kBAAkB,EAAKhD,YApG9C,+BAwGc,IAAD,OACL,OACI,kBAAC,IAAD,CAAgBiD,GAAG,gBACfC,MAAOzC,KAAKT,MAAM8B,cAClBqB,SAAU1C,KAAKL,0BAEXK,KAAKH,kBAGLG,KAAKT,MAAM4B,KACNwB,QAAO,SAACC,EAAKT,GACV,OAAuE,IAAhES,EAAI,EAAKvD,MAAMyB,cAAcD,QAAQ,EAAKtB,MAAMuC,YAA8C,KAAzB,EAAKvC,MAAMuC,aAE1Fe,KAAI,SAACC,EAAQC,GAAT,OACD,kBAAC,IAASC,KAAV,CAAeC,IAAG,UAAKH,EAAM,KAAX,OAAqBC,GAASd,SAAUa,EAAM,IAAStB,UAAU,UAE3E0B,OAAOC,KAAKL,GAAQH,QAAO,SAACC,GACxB,MAAe,QAARA,KACRC,KAAI,SAACO,EAAKC,GAAN,OACH,0BAAM7B,UAAU,WAAWyB,IAAKI,GAAMP,EAAOM,gBA3HrF,GAAmCE,IAAMC,Y,6ICK5BC,EAAwC,CACjDC,YAAa,GACbxC,iBAAkB,IAAIyC,IAAS,CAC3BT,IAAK,EACLjB,MAAO,aAGXjC,SAAU,IAAI2D,IAAS,CACnBT,IAAK,EACLjB,MAAO,aAEXF,UAAW,I,uKCvBf,IAAM7C,E,MAAcC,EAAOC,MAAV,KAKJwE,EAAb,kDACI,WAAYtE,GAAuB,IAAD,8BAC9B,cAAMA,IAEDE,MAAQiE,EACb,EAAK7D,yBAA2B,EAAKA,yBAAyBC,KAA9B,gBAChC,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBACvB,EAAKE,2BAA6B,EAAKA,2BAA2BF,KAAhC,gBANJ,EADtC,gEAYQ,IAAIsC,EAAclC,KAAKX,MAAMuE,QAAQ,GAClC5D,KAAKX,MAAMU,UAAuC,MAA3BC,KAAKX,MAAMU,SAASkD,MAC1Cf,EAAclC,KAAKX,MAAMU,UAG7BC,KAAKgB,SAAS,CACVjB,SAAUmC,EACVjB,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUuB,IAC5CuB,YAAazD,KAAKX,MAAMoE,gBApBpC,2CA0BYzD,KAAKX,MAAMU,UAAwC,OAA5BC,KAAKX,MAAMU,SAASkD,KAAgBxC,KAAKE,UAAUX,KAAKT,MAAM0B,oBAAsBR,KAAKE,UAAUX,KAAKX,MAAMU,WACrIC,KAAKgB,SAAS,CACVjB,SAAUU,KAAKC,MAAMD,KAAKE,UAAUX,KAAKX,MAAMU,WAC/CkB,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUX,KAAKX,MAAMU,eA7BvE,wCAmCQ,IAAIuB,EASJ,OARGtB,KAAKX,MAAMkC,YACVD,EACI,yBAAKE,UAAU,cACX,kBAACvC,EAAD,CAAauC,UAAU,eAAeC,SAAUzB,KAAKF,2BAA4B4B,YAAY,eAC7F,kBAACmC,EAAA,EAASlC,QAAV,QAILL,IA5Cf,iDA+C+BM,GACvBA,EAAMC,iBACN7B,KAAKgB,SAAS,CACVc,UAAWF,EAAMG,OAAOC,UAlDpC,+CA2D6BC,EAAeL,GAGpC,IAHoD,IAAD,OAE/CM,EAAclC,KAAKT,MAAMQ,SACrBoC,EAAI,EAAGA,EAAInC,KAAKX,MAAMuE,QAAQxB,OAAQD,IAC1C,GAAGnC,KAAKX,MAAMuE,QAAQzB,GAAGc,IAAIX,aAAeL,EAASK,WAAW,CAC5DJ,EAAclC,KAAKX,MAAMuE,QAAQzB,GACjC,MAIRnC,KAAKgB,SAAS,CACVjB,SAAUmC,IACX,WACC,EAAK7C,MAAMkD,kBAAkB,EAAKhD,YAxE9C,+BA4Ec,IAAD,OACL,OACI,kBAACuE,EAAA,EAAD,CAAgBtB,GAAG,eACfC,MAAOzC,KAAKT,MAAMQ,SAASiC,MAC3BU,SAAU1C,KAAKL,0BAEXK,KAAKH,kBAGLG,KAAKX,MAAMuE,QAAQjB,QAAO,SAACC,EAAKG,GAC5B,OAAoD,IAA7CH,EAAIZ,MAAMnB,QAAQ,EAAKtB,MAAMuC,YAA8C,KAAzB,EAAKvC,MAAMuC,aAEvEe,KAAI,SAACC,EAAQC,GAAT,OACD,kBAACc,EAAA,EAASb,KAAV,CAAeC,IAAG,UAAKH,EAAOG,KAAZ,OAAkBF,GAASd,SAAUa,EAAOG,IAAKzB,UAAU,UACxEsB,EAAOd,eA1FpC,GAAoCsB,IAAMC,Y,wKCM7BQ,EAA0C,CACnD7C,aAAc,GACd8C,kBAAmB,IAAIC,IACvBC,UAAW,IAAID,IACfE,UAAW,KACXC,QAAS,M,kYCXb,IAAMC,EAAenF,IAAOoF,IAAV,KAGZC,EAAerF,IAAOoF,IAAV,KAKZE,EAAatF,IAAOoF,IAAV,KAKHG,EAAb,kDACI,WAAYpF,GAAwB,IAAD,8BAC/B,cAAMA,IAEDE,MAAQwE,EAEb,EAAKW,sBAAwB,EAAKA,sBAAsB9E,KAA3B,gBAC7B,EAAK+E,oBAAsB,EAAKA,oBAAoB/E,KAAzB,gBANI,EADvC,gEAWQ,IAAIsE,EAAY,IAAID,IAChBjE,KAAKX,MAAM6E,YACXA,EAAUC,UAAYnE,KAAKX,MAAM6E,UAAUC,gBAAaS,EACxDV,EAAUE,QAAUpE,KAAKX,MAAM6E,UAAUE,cAAWQ,GAExD5E,KAAKgB,SAAS,CACVE,aAAclB,KAAKX,MAAM6B,aACzBgD,UAAWA,EACXF,kBAAmBvD,KAAKC,MAAMD,KAAKE,UAAUuD,QAnBzD,2CAwBQ,GAAGlE,KAAKX,MAAM6E,UAAU,CACpB,IAAIA,EAAY,IAAID,IACpBC,EAAUC,UAAYnE,KAAKX,MAAM6E,UAAUC,gBAAaS,EACxDV,EAAUE,QAAUpE,KAAKX,MAAM6E,UAAUE,cAAWQ,EAChDnE,KAAKE,UAAUX,KAAKT,MAAMyE,qBAAuBvD,KAAKE,UAAUuD,IAChElE,KAAKgB,SAAS,CACVkD,UAAWA,EACXF,kBAAmBvD,KAAKC,MAAMD,KAAKE,UAAUuD,SA/BjE,4CAyC0BW,GAAY,IAAD,OAC7BC,QAAQC,IAAIF,GACZ,IAAIX,EAAY,IAAID,IAAW,CAC3BE,UAAWU,EACXT,QAASpE,KAAKT,MAAM2E,UAAUE,UAElCpE,KAAKgB,SAAS,CACVkD,UAAWA,IACZ,WACC,EAAK7E,MAAMkD,kBAAkB,EAAKhD,YAlD9C,0CA0DwBsF,GAAY,IAAD,OAC3BC,QAAQC,IAAIF,GACZ,IAAIX,EAAY,IAAID,IAAW,CAC3BE,UAAWnE,KAAKT,MAAM2E,UAAUC,UAChCC,QAASS,IAEb7E,KAAKgB,SAAS,CACVkD,UAAWA,IACZ,WACC,EAAK7E,MAAMkD,kBAAkB,EAAKhD,YAnE9C,+BAwEQ,OACI,kBAAC8E,EAAD,KACI,kBAACE,EAAD,KACI,2CACA,kBAAC,IAAD,CACIS,WAAW,aACXC,QAASjF,KAAKT,MAAM2E,UAAUE,QAC9BrE,SAAUC,KAAKT,MAAM2E,UAAUC,UAC/B1C,SAAUzB,KAAK0E,yBAGvB,kBAACF,EAAD,KACI,yCACA,kBAAC,IAAD,CACIQ,WAAW,aACXE,QAASlF,KAAKT,MAAM2E,UAAUC,UAC9BpE,SAAUC,KAAKT,MAAM2E,UAAUE,QAC/B3C,SAAUzB,KAAK2E,4BAzFvC,GAA+BrB,IAAMC,Y,iCCErC,kCAAO,IAAM/D,EAA0C,CACnD0B,aAAc,GAEdD,iBAAkB,KAClBlB,SAAU,KACVsB,cAAe,GACfS,UAAW,GACXX,KAAM,GACNC,aAAc,GACd+D,cAAe,K,sHC9BN1F,EAAb,WACI,WAAY2F,GAA6B,oBACrCpF,KAAKE,SAAWF,KAAKE,SAASN,KAAKI,MAF3C,8FAQ0BqF,GAR1B,gGAUoDC,IAAUC,IAA+BF,GAV7F,cAUkBG,EAVlB,yBAWmBF,IAAUG,QAAQD,IAXrC,mK,+GC8LaF,EAAY,I,WAlKrB,WAAmBF,GAA8B,yBARjDM,qBAQgD,OAPhDC,SAOgD,EAC5C3F,KAAK2F,IAAMC,IAAMC,OAAOT,GACxBpF,KAAK0F,gBAAkB,EAEvB1F,KAAK8F,OAAS9F,KAAK8F,OAAOlG,KAAKI,MAC/BA,KAAK+F,QAAU/F,KAAK+F,QAAQnG,KAAKI,MACjCA,KAAKuF,IAAMvF,KAAKuF,IAAI3F,KAAKI,MACzBA,KAAKgG,OAAShG,KAAKgG,OAAOpG,KAAKI,MAC/BA,KAAKiG,KAAOjG,KAAKiG,KAAKrG,KAAKI,MAC3BA,KAAKkG,KAAOlG,KAAKkG,KAAKtG,KAAKI,MAC3BA,KAAKmG,IAAMnG,KAAKmG,IAAIvG,KAAKI,MACzBA,KAAKoG,MAAQpG,KAAKoG,MAAMxG,KAAKI,M,mDAUnBoF,GACV,OAAOpF,KAAK2F,IAAIG,OAAOV,K,8BAwBaA,GACpC,OAAOpF,KAAK2F,IAAII,QAAQX,K,0BAcQC,EAAaD,GAC7C,OAAOpF,KAAK2F,IAAIJ,IAAIF,EAAKD,K,6BAcUC,EAAaD,GAChD,OAAOpF,KAAK2F,IAAIK,OAAOX,EAAKD,K,2BAcKC,EAAaD,GAC9C,OAAOpF,KAAK2F,IAAIM,KAAKZ,EAAKD,K,2BAgBUC,EAAalE,EAAUiE,GAC3D,OAAOpF,KAAK2F,IAAIO,KAAKb,EAAKlE,EAAMiE,K,0BAgBGC,EAAalE,EAAUiE,GAC1D,OAAOpF,KAAK2F,IAAIQ,IAAId,EAAKlE,EAAMiE,K,4BAgBMC,EAAalE,EAAUiE,GAC5D,OAAOpF,KAAK2F,IAAIS,MAAMf,EAAKlE,EAAMiE,K,8BAUnBiB,GACd,OAAOA,EAASlF,O,4BAGPmF,GACT,MAAMA,M,KAIW,CAAQ5G,M,wJC/LpB6G,EAAb,kDAIE,WAAY3C,GAAe,IAAD,8BACxB,cAAMA,IAJR4C,YAAc,GAGY,EAF1B5C,QAA0C,GAIxC,EAAKA,QAAUA,EAAO,SAAe,GACrC,EAAK4C,aAAc,IAAIC,KAAaC,oBAAoBC,SAHhC,EAJ5B,UAAsCC,M,8GCAzBC,EAAb,kDAIE,WAAYjD,GAAe,IAAD,8BACxB,cAAMA,IAJR4C,YAAc,GAGY,EAF1BM,UAE0B,EAExB,EAAKA,KAAOlD,EAAO,MAAY,GAC/B,EAAK4C,aAAc,IAAIC,KAAaC,oBAAoBK,SAHhC,EAJ5B,UAAsCH,M,8GCAzBI,EAAb,kDAIE,WAAYpD,GAAe,IAAD,8BACxB,cAAMA,IAJR4C,YAAc,GAGY,EAF1BM,UAE0B,EAExB,EAAKA,KAAOlD,EAAO,MAAY,GAC/B,EAAK4C,aAAc,IAAIC,KAAaC,oBAAoBO,QAHhC,EAJ5B,UAAqCL,M,8GCCxBM,EAAb,kDAGE,WAAYtD,GAAe,IAAD,8BACxB,cAAMA,IAHR4C,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBxC,UAFhC,EAH5B,UAAuC0C,M,8GCD1BO,EAAb,kDAGE,WAAYvD,GAAe,IAAD,8BACxB,cAAMA,IAHR4C,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBU,UAFhC,EAH5B,UAAuCR,M,8GCA1BS,EAAb,kDAGE,WAAYzD,GAAe,IAAD,8BACxB,cAAMA,IAHR4C,YAAc,GAIZ,EAAKA,aAAc,IAAIC,KAAaC,oBAAoBY,SAFhC,EAH5B,UAAsCV,M,sTCItC,IAAMvC,EAAenF,IAAOoF,IAAV,KAILiD,EAAb,uKAEc,IAAD,OACL,OACI,kBAAClD,EAAD,KACI,kBAAC,IAAD,CACImD,OAAQC,IACRtG,KAAMnB,KAAKX,MAAM8B,KACjBuG,OAAQ,SAAAF,GAEJ1C,QAAQC,IAAI,0BAA2ByC,IAE3C/F,SAAU,SAACG,EAAO4F,GACd,IAAMrG,EAAOqG,EAAOG,UACpB7C,QAAQC,IAAI,CAAEnD,QAAO4F,SAAQrG,SAC7B,EAAK9B,MAAMuI,WAAWzG,EAAM,EAAK9B,MAAMwI,cAE3CC,OAAQ,SAAClG,EAAO4F,GACZ1C,QAAQC,IAAI,QAASyC,IAEzBO,QAAS,SAACnG,EAAO4F,GACb1C,QAAQC,IAAI,SAAUyC,WArB9C,GAAmClE,IAAMC,W,0HCDnCyE,EAAO,kBAAC,IAAD,CAA0BC,SAAS,UAC1CC,EAAc,kBAAC,IAAD,CAAcD,SAAS,UAC9BE,EAAb,kDAEI,WAAY9I,GAAwB,IAAD,8BAC/B,cAAMA,IAFVC,sBACmC,EAG/B,EAAKC,MAAQC,IACb,EAAKF,iBAAmB,IAAIG,IAAiBC,KAC7C,EAAK0I,gBAAkB,EAAKA,gBAAgBxI,KAArB,gBACvB,EAAKyI,iBAAmB,EAAKA,iBAAiBzI,KAAtB,gBANO,EAFvC,oMAaYG,EAAWC,KAAKT,MAAMQ,SACtBC,KAAKX,MAAMU,SACXA,EAAWC,KAAKX,MAAMU,SACjBC,KAAKX,MAAMY,UAChBF,EAAW,CAACC,KAAKX,MAAMY,QAAQgD,MAjB3C,SAmBiCjD,KAAKV,iBAAiBY,SAASF,KAAKX,MAAMc,WAnB3E,OAmBYC,EAnBZ,OAoBYC,EAAuB,GAC3BD,EAAaE,SAAQ,SAAAC,GACjB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,UAAUJ,IAEvC,GAAI,EAAKlB,MAAMP,WAAY,CACvB,IAAK,IAAI8B,KAAKJ,GACgC,IAAtC,EAAKnB,MAAMP,WAAW+B,QAAQD,IAAmB,QAANA,GAAeA,IAAM,EAAKvB,MAAMyB,qBACpEN,EAAOI,GAGtBP,EAAcU,KAAKP,OAIvB2E,EAAuB,GAC3B9E,EAAcC,SAAQ,SAAC0B,GACfjC,IAAgD,IAApCA,EAASc,QAAQmB,EAAK,MAClCmD,EAAcpE,KAAKiB,MAI3BhC,KAAKgB,SAAS,CACVjB,SAAUA,EACVoF,cAAeA,EACflE,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUZ,IAC5CmB,aAAclB,KAAKX,MAAM6B,aACzBC,KAAMd,EACNe,aAAchB,IA/C1B,kJAmD0B,IAAD,OAEjB,GAAIK,KAAKE,UAAUX,KAAKT,MAAM0B,oBAAsBR,KAAKE,UAAUX,KAAKX,MAAMU,UAAW,CAErF,IAAIoF,EAAuB,GAC3BnF,KAAKT,MAAM4B,KAAKb,SAAQ,SAAC0B,IAC8B,IAA/C,EAAK3C,MAAMU,SAASc,QAAQmB,EAAK,MACjCmD,EAAcpE,KAAKiB,MAG3BhC,KAAKgB,SAAS,CACVjB,SAAUC,KAAKX,MAAMU,SACrBkB,iBAAkBR,KAAKC,MAAMD,KAAKE,UAAUX,KAAKX,MAAMU,WACvDoF,cAAeA,OAhE/B,sCA0EoBvD,EAA8B0G,GAE1CtI,KAAKX,MAAMkD,kBAAkBvC,KAAKT,SA5E1C,uCAqFqBqC,EAA8BI,EAAYsG,GAAmC,IAAD,OAErFvI,EAAkB,GACrBiC,EAAmB1B,SAAQ,SAACsC,GACzB7C,EAASgB,KAAK6B,EAAG,QAErB5C,KAAKgB,SAAS,CACVmE,cAAenD,EACfjC,SAAUA,IACX,WACC,EAAKV,MAAMkD,kBAAkB,EAAKhD,YA/F9C,+BAmGc,IAAD,OACL,OACI,kBAACgJ,EAAA,EAAD,CACIC,UAAQ,EACRhG,GAAG,oBACHhB,UAAU,aACVQ,MAAOhC,KAAKT,MAAM4F,cAClBsD,QAASzI,KAAKoI,gBACd3G,SAAUzB,KAAKqI,iBACfzE,QAAS5D,KAAKT,MAAM4B,KACpBuH,sBAAoB,EACpBC,eAAgB,SAAC7F,GAAD,OAAYA,EAAO,EAAKzD,MAAMyB,eAC9C8H,aAAc,SAAC9F,EAAD,OAAW/C,EAAX,EAAWA,SAAX,OACV,kBAAC,IAAM8I,SAAP,KACI,kBAACC,EAAA,EAAD,CACId,KAAMA,EACNE,YAAaA,EACba,MAAO,CAAEC,YAAa,GACtBC,QAASlJ,IAGTmD,OAAOC,KAAKL,GAAQH,QAAO,SAACC,GACxB,MAAe,QAARA,KACRC,KAAI,SAACO,EAAKC,GAAN,OACH,0BAAM7B,UAAU,aAAauH,MAAO,CAAEG,aAAc,QAAUjG,IAAKI,GAAMP,EAAOM,SAKhG2F,MAAO,CAAEI,MAAO,QAChBC,YAAa,SAACC,GAAD,OACT,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,QAAQ,WAAWC,MAAM,sBAAsB9H,YAAY,iCAlItG,GAA2C4B,IAAMC,W,uECGjD,IAAMc,EAAenF,IAAOoF,IAAV,KAEZmF,EAAkC,CACpCC,MAAO,MACPC,UAAW,UAETC,EAA+B,CACjCC,OAAQ,GAECC,EAAb,kDAEI,WAAYzK,GAA0B,IAAD,8BACjC,cAAMA,IAFV0K,gBACqC,EAGjC,EAAKA,WAAa,IAAItD,IACtB,EAAKlH,MAAQX,IAEb,EAAKoL,mBAAqB,EAAKA,mBAAmBpK,KAAxB,gBAC1B,EAAKqK,eAAiB,EAAKA,eAAerK,KAApB,gBACtB,EAAKsK,aAAe,EAAKA,aAAatK,KAAlB,gBAEpB,EAAKuK,aAAe,EAAKA,aAAavK,KAAlB,gBACpB,EAAKwK,0BAA4B,EAAKA,0BAA0BxK,KAA/B,gBACjC,EAAKyK,+BAAiC,EAAKA,+BAA+BzK,KAApC,gBACtC,EAAK0K,2BAA6B,EAAKA,2BAA2B1K,KAAhC,gBAClC,EAAK2K,iBAAmB,EAAKA,iBAAiB3K,KAAtB,gBAdS,EAFzC,iEAmB0B,IAAD,OAEbd,EAAmC,GACvCkB,KAAKX,MAAMmL,WAAWlK,SAAQ,SAACsC,GAC3B9D,EAAW8D,EAAIK,KAAOL,EAAIZ,SAE1BvB,KAAKE,UAAUX,KAAKT,MAAMV,sBAAwB4B,KAAKE,UAAU7B,IACjEkB,KAAKgB,SAAS,CACVlC,WAAYA,EACZD,mBAAoB4B,KAAKC,MAAMD,KAAKE,UAAU7B,MAC/C,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBAlCpB,iDA4C+B4L,GAAqB,IAAD,OACvC7L,EAAakB,KAAKT,MAAMT,WACxB8L,EAA2BD,EAAEzG,UACjCpF,EAAW6L,EAAEzJ,cAAgB0J,EAC7B5K,KAAKgB,SAAS,CACVlC,WAAYA,IACb,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBAvDhB,qDAgEmC4L,GAAqB,IAAD,OAC3C7L,EAAakB,KAAKT,MAAMT,WAC5BA,EAAW6L,EAAEzJ,cAAgByJ,EAAE5K,SAC/BC,KAAKgB,SAAS,CACVlC,eACD,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBA1EhB,gDAmF8B4L,GAAoB,IAAD,OACrC7L,EAAakB,KAAKT,MAAMT,WAC5BA,EAAW6L,EAAElH,aAAekH,EAAE5K,SAC9BC,KAAKgB,SAAgB,CACjBlC,eACD,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBA7FhB,mCAsGiB6C,GAAa,IAAD,OACrBA,EAAMC,iBADe,MAEGD,EAAMG,OAAtB8I,EAFa,EAEbA,KAAM7I,EAFO,EAEPA,MACVlD,EAAakB,KAAKT,MAAMT,WAC5BA,EAAW+L,GAAQ7I,EACnBhC,KAAKgB,SAAgB,CACjBlC,eACD,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBAlHhB,uCA4HqB+L,EAAa7H,GAAc,IAAD,OACnCnE,EAAakB,KAAKT,MAAMT,WAC5BA,EAAWmE,GAAO6H,EAClB9K,KAAKgB,SAAgB,CACjBlC,eACD,WAAO,IAAD,EACmB,EAAKoL,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gBAtIhB,qCA8IoB,IAAD,OACP2L,GAAQ,EACR3L,EAAoC,GA6FxC,IAAK,IAAIkE,KA5FTjD,KAAKX,MAAMmL,WAAWlK,SAAQ,SAAAC,GAE1B,OADAxB,EAAOwB,EAAQ0C,KAAO,GACd1C,EAAQiG,aACZ,KAAK,EAAKuD,WAAWrD,oBAAoBO,QACzC,KAAK,EAAK8C,WAAWrD,oBAAoBK,SACrC,IAAK,IAAIgE,KAAQxK,EAAQyK,WACrB,OAAQD,GACJ,KAAK,EAAKhB,WAAWkB,eAAeC,QAC1B,EAAK3L,MAAMT,WAAWyB,EAAQ0C,MAA+C,KAAvC,EAAK1D,MAAMT,WAAWyB,EAAQ0C,MACtElE,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWD,GAAMI,cAGjC,MACJ,KAAK,EAAKpB,WAAWkB,eAAeG,UAC1B,EAAK7L,MAAMT,WAAWyB,EAAQ0C,MAAQ,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKb,QAAU7B,EAAQyK,WAAW/H,GAAKjB,OAC7GjD,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWD,GAAMI,cAGjC,MACJ,KAAK,EAAKpB,WAAWkB,eAAeI,UAC1B,EAAK9L,MAAMT,WAAWyB,EAAQ0C,MAAQ,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKb,QAAU7B,EAAQyK,WAAW/H,GAAKjB,OAC7GjD,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWD,GAAMI,cAGjC,MACJ,KAAK,EAAKpB,WAAWkB,eAAeK,OAM5C,MACJ,KAAK,EAAKvB,WAAWrD,oBAAoBU,UACrC,IAAK,IAAImE,KAAQhL,EAAQyK,WACrB,OAAQO,GACJ,KAAK,EAAKxB,WAAWkB,eAAeC,QAC3B,EAAK3L,MAAMT,WAAWyB,EAAQ0C,MAAkD,MAA1C,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKZ,KAC1EtD,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWO,GAAMJ,cAQ7C,MACJ,KAAK,EAAKpB,WAAWrD,oBAAoBC,SACrC,IAAK,IAAI6E,KAAQjL,EAAQyK,WACrB,OAAQQ,GACJ,KAAK,EAAKzB,WAAWkB,eAAeC,QAE3B,EAAK3L,MAAMT,WAAWyB,EAAQ0C,MAC3B,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKA,KACO,IAA3C,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKA,KAEtClE,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWQ,GAAML,cAQ7C,MACJ,KAAK,EAAKpB,WAAWrD,oBAAoBxC,UACrC,IAAK,IAAIuH,KAAQlL,EAAQyK,WACrB,OAAQS,GACJ,KAAK,EAAK1B,WAAWkB,eAAeC,QAE3B,EAAK3L,MAAMT,WAAWyB,EAAQ0C,MACiB,MAAhD,EAAK1D,MAAMT,WAAWyB,EAAQ0C,KAAKkB,WACW,MAA9C,EAAK5E,MAAMT,WAAWyB,EAAQ0C,KAAKmB,SACnCrF,EAAOwB,EAAQ0C,KAAKlC,KAChBR,EAAQyK,WAAWS,GAAMN,mBAczCpM,EACZ,GAAIA,EAAOkE,GAAKb,OAAS,EAAG,CACxBsI,GAAQ,EACR,MAGR,MAAO,CAAE3L,SAAQ2L,WAnPzB,yCA0PuBgB,GAEf,IAAI3M,EAASiB,KAAKT,MAAMR,OAAO2M,GAE/B,GAAK3M,EAEL,OACI,yBAAKgK,MAAOU,GAEJ1K,EAAO8D,KAAI,SAAC8I,EAAKxJ,GAAN,OACP,yBAAKc,IAAKd,GACN,8BAAOwJ,UArQnC,qCAiRmBC,GAEX,OAAQA,EAASpF,aACb,KAAKxG,KAAK+J,WAAWrD,oBAAoBO,QACrC,OACI,8BAAUhE,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAE3H,2BAAOhI,UAAU,eACbC,SAAUzB,KAAKmK,aACf6B,SAAUJ,EAASK,SACnBnF,KAAM8E,EAAS9E,KACf+D,KAAMe,EAAS3I,IACfjB,MAAOhC,KAAKT,MAAMT,WAAW8M,EAAS3I,KACtCT,GAAIoJ,EAAS3I,MAChBjD,KAAKgK,mBAAmB4B,EAAS3I,MAG9C,KAAKjD,KAAK+J,WAAWrD,oBAAoBK,SACrC,OACI,8BAAU9D,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAE3H,8BAAUhI,UAAU,eAChBC,SAAUzB,KAAKmK,aACf6B,SAAUJ,EAASK,SACnBC,KAAMN,EAASM,KACfrB,KAAMe,EAAS3I,IACfjB,MAAOhC,KAAKT,MAAMT,WAAW8M,EAAS3I,KACtCT,GAAIoJ,EAAS3I,MAChBjD,KAAKgK,mBAAmB4B,EAAS3I,MAG9C,KAAKjD,KAAK+J,WAAWrD,oBAAoBC,SACrC,OACI,8BAAU1D,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAE3H,kBAAC,IAAD,CAAgBjI,UAAWqK,EAASrK,UAChCxB,SAAU6L,EAAS5J,MACnByB,YAAamI,EAAS3I,IACtBV,kBAAmBvC,KAAKoK,0BACxBxG,QAASgI,EAAShI,UACrB5D,KAAKgK,mBAAmB4B,EAAS3I,MAG9C,KAAKjD,KAAK+J,WAAWrD,oBAAoBU,UACrC,OACI,8BAAUnE,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAGvHoC,EAASpD,SAED,kBAAC,EAAD,CAAuBrI,UAAWyL,EAASzL,UACvCW,aAAc8K,EAAS9K,aACvBhC,WAAY8M,EAAS9M,WACrBqN,gBAAiBP,EAASO,gBAC1BjL,aAAc0K,EAAS3I,IACvB1B,UAAWqK,EAASrK,UACpBxB,SAAU6L,EAAS5J,MACnBO,kBAAmBvC,KAAKqK,iCAK5B,kBAACjL,EAAA,EAAD,CAAee,UAAWyL,EAASzL,UAC/BW,aAAc8K,EAAS9K,aACvBhC,WAAY8M,EAAS9M,WACrBqN,gBAAiBP,EAASO,gBAC1BjL,aAAc0K,EAAS3I,IACvB1B,UAAWqK,EAASrK,UACpBxB,SAAU6L,EAAS5J,MACnBO,kBAAmBvC,KAAKqK,iCAIvCrK,KAAKgK,mBAAmB4B,EAAS3I,MAG9C,KAAKjD,KAAK+J,WAAWrD,oBAAoBxC,UACrC,OACI,8BAAUjB,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAE3H,kBAAC/E,EAAA,EAAD,CAAWvD,aAAc0K,EAAS3I,IAC9BiB,UAAW0H,EAAS5J,MACpBO,kBAAmBvC,KAAKsK,6BAE3BtK,KAAKgK,mBAAmB4B,EAAS3I,MAG9C,KAAKjD,KAAK+J,WAAWrD,oBAAoBY,SACrC,OACI,8BAAUrE,IAAK2I,EAAS3I,IAAKzB,UAAU,cACnC,2BAAOqK,QAASD,EAAS3I,KACrB,0BAAM6I,QAASF,EAASZ,WAAT,SAAiCjC,MAAOU,GAAvD,MAA4E,0BAAMsC,YAAWH,EAASpC,OAAQoC,EAASpC,QAE3H,kBAAC,EAAD,CACIrI,KAAMyK,EAAS5J,MACf4F,WAAY5H,KAAKuK,iBACjB1C,YAAa+D,EAAS3I,MAEzBjD,KAAKgK,mBAAmB4B,EAAS3I,SA7X1D,+BAqYc,IAAD,OACL,OACI,kBAAC,EAAD,KACI,0BAAMmJ,SAAU,SAACzB,GAAQA,EAAE9I,iBAAkB,EAAKxC,MAAMgN,iBAAiB,EAAK9M,SACzES,KAAKX,MAAMmL,WAAW3H,KAAI,SAACyJ,EAAOnK,GAAR,OACvB,EAAK8H,eAAeqC,MAExB,2BAAOvD,MAAOa,EACV9C,KAAK,SACL9E,MAAM,SACNyI,SAAUzK,KAAKT,MAAMP,oBACrBwC,UAAU,oCAhZlC,GAAiC8B,IAAMC,Y,gCCxBvC,ikC,gOCCA,sCAAMgJ,EAAKrB,EAAQ,KAINxL,EAAgC,CAEzC8M,QALuBC,OAAOC,WAAsC,IAMpEC,QALgCD,4CAMhCE,QAAS,CACLC,OAAQ,CAGJ,eAAgB,mBAChBC,OAAQ,qBAGhBC,iBAAkB,SAAC1D,GAAD,OAAoBkD,EAAG5L,UAAU0I,EAAQ,CAAE2D,SAAS,O,mGCjB7DvG,EAAb,sCACIwE,eAAiB,CACbC,QAAS,WACTE,UAAW,YACXC,UAAW,YACXC,MAAO,SALf,KAQI2B,aAAe,CACXC,OAAQ,SACRC,SAAU,WACVzD,MAAO,QACP7E,KAAM,OACNuI,SAAU,WACVC,cAAe,iBACf/B,MAAO,QACPgC,KAAM,OACNxB,OAAQ,SACRyB,MAAO,QACPC,MAAO,QACPC,OAAQ,SACRC,SAAU,WACVC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,IAAK,MACLC,KAAM,OACNC,KAAM,OACN7I,IAAK,MACL8I,KAAM,QA/Bd,KAkCIzH,oBAAsB,CAClBO,QAAS,UACTF,SAAU,WACVJ,SAAU,WACVS,UAAW,YACXlD,UAAW,YACXoD,SAAU,c,6KC5BE8G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yFCjBOC,G,OAAb,uKAUQ,OACI,yBAAK1F,MALY,CACjBI,MAAO,MACPU,OAAQ,SAIJ,6BAASrI,UAAU,uBAAuBgB,GAAG,WACzC,yBAAKhB,UAAU,0BACX,wBAAIA,UAAU,oDAAd,oBAGA,wBAAIA,UAAU,iEAAd,kLAGA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAKkN,IAAG,UAAKhC,gBAAL,4BAAuDiC,IAAI,GAAGlM,MAAM,MAEhF,yBAAKjB,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,iBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGoN,KAAK,+BAA+BC,IAAI,sBAAsB9M,OAAO,UACpE,0BAAMP,UAAU,kEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,wCAAwC7M,OAAO,UAC7E,0BAAMP,UAAU,qEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,uCAAuC7M,OAAO,UAC5E,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,sCAAsC7M,OAAO,UAC3E,0BAAMP,UAAU,oEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAKkN,IAAG,UAAKhC,gBAAL,4BAAuDiC,IAAI,GAAGlM,MAAM,MAEhF,yBAAKjB,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,kBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGqN,IAAI,sBAAsBD,KAAK,+BAA+B7M,OAAO,UACpE,0BAAMP,UAAU,kEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,wCAAwC7M,OAAO,UAC7E,0BAAMP,UAAU,qEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,uCAAuC7M,OAAO,UAC5E,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,sCAAsC7M,OAAO,UAC3E,0BAAMP,UAAU,oEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAKkN,IAAG,UAAKhC,gBAAL,4BAAuDiC,IAAI,GAAGlM,MAAM,MAEhF,yBAAKjB,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,gBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGqN,IAAI,sBAAsBD,KAAK,+BAA+B7M,OAAO,UACpE,0BAAMP,UAAU,kEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,wCAAwC7M,OAAO,UAC7E,0BAAMP,UAAU,qEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,uCAAuC7M,OAAO,UAC5E,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,sCAAsC7M,OAAO,UAC3E,0BAAMP,UAAU,oEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,qEAKhC,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,cACX,yBAAKkN,IAAG,UAAKhC,gBAAL,4BAAuDiC,IAAI,GAAGlM,MAAM,MAEhF,yBAAKjB,UAAU,qBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,6BAAb,gBAEJ,yBAAKA,UAAU,kBACX,yCAEJ,yBAAKA,UAAU,oBACX,uBAAGqN,IAAI,sBAAsBD,KAAK,+BAA+B7M,OAAO,UACpE,0BAAMP,UAAU,kEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,wCAAwC7M,OAAO,UAC7E,0BAAMP,UAAU,qEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,uCAAuC7M,OAAO,UAC5E,0BAAMP,UAAU,mEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,sCAAsC7M,OAAO,UAC3E,0BAAMP,UAAU,oEAEpB,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,wEAQ5C,6BAASA,UAAU,sBAAsBgB,GAAG,UACxC,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,4BAAQiB,MAAM,aAAaqM,YAAY,IAAI/F,MA9JjD,CAClBgG,OAAQ,GA6JiFL,IAAI,gIAAoIM,iBAAe,cAjK5P,GAA2B1L,IAAMC,YCCpB0L,G,OAAb,uKASQ,OACI,6BACI,6BAASzN,UAAU,wDAAwDgB,GAAG,aAC1E,yBAAKhB,UAAU,cAAcuH,MAVzB,CACZmG,QAAS,MACTC,gBAAiB,qBAST,yBAAK3N,UAAU,0BACX,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,6DAAd,WAGA,uBAAGA,UAAU,2CAAb,gCAMZ,yBAAKA,UAAU,2BAA2B4N,cAAY,QAClD,uBAAGR,KAAK,WACJ,uBAAGpN,UAAU,8BAIzB,6BAASA,UAAU,yBAAyBgB,GAAG,aAC3C,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6BACX,wBAAIA,UAAU,8DAAd,oBAGA,yBAAKA,UAAU,mCACX,uBAAGA,UAAU,sCAAb,kMAKR,yBAAKA,UAAU,aAAauH,MAtCxB,CACpBI,MAAO,SAsCa,4BAAQ1G,MAAM,kBAAkBjB,UAAU,qBAAqBkN,IAAI,mFAA+FvF,MAAM,OAAOkG,OAAO,MAAMP,YAAY,IAAIE,iBAAe,QAK3O,6BAASxN,UAAU,+BAA+BgB,GAAG,mBACjD,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6BACX,wBAAIA,UAAU,kCAAd,gCAGA,wBAAIA,UAAU,iEAAd,gFAMZ,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,gBAMZ,yBAAKA,UAAU,6DACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKmN,IAAI,IAAID,IAAG,UAAKhC,gBAAL,+BAEpB,uBAAGlL,UAAU,sCAAb,6HAIJ,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sDAAf,cAGA,2BAAOA,UAAU,kEAAjB,wBAnLxC,GAA0B8B,IAAMC,Y,ICU1B+L,E,kDACF,WAAYjQ,GAAsB,IAAD,8BAC7B,cAAMA,IAEDkQ,OAAS,EAAKA,OAAO3P,KAAZ,gBACd,EAAK4P,qBAAuB,EAAKA,qBAAqB5P,KAA1B,gBAC5B,EAAK6P,kBAAoB,EAAKA,kBAAkB7P,KAAvB,gBACzB,EAAK8P,kBAAoB,EAAKA,kBAAkB9P,KAAvB,gBANI,E,qDAa7BI,KAAKX,MAAMsQ,e,0CA6BX,OAxB2B,MAAvB3P,KAAKX,MAAMuQ,KAAKvN,KAAuC,KAAxBrC,KAAKX,MAAMuQ,KAAKvN,IAE3C,wBAAIb,UAAU,qBACV,uBAAGoN,KAAK,gBAAgBpN,UAAU,qDAAqDqO,cAAY,mBAAmBC,gBAAc,SAChI,0BAAMtO,UAAU,4CAAkDxB,KAAKX,MAAMuQ,KAAKG,UADtF,IACkG/P,KAAKX,MAAMuQ,KAAKI,UAElH,yBAAKxO,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAE,iBAAYjQ,KAAKX,MAAMuQ,KAAKvN,MAAnF,WACA,kBAAC,IAAD,CAAMb,UAAU,qCAAqCyO,GAAG,SAASC,QAASlQ,KAAKuP,QAA/E,YASR,wBAAI/N,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAG,UAAxD,Y,6CAaZ,IAAI3O,EAiBJ,OAhB2B,MAAvBtB,KAAKX,MAAMuQ,KAAKvN,KAAuC,KAAxBrC,KAAKX,MAAMuQ,KAAKvN,MAC/Cf,EACI,wBAAIE,UAAU,qBACV,uBAAGoN,KAAK,gBAAgBpN,UAAU,qDAAqDqO,cAAY,mBAAmBC,gBAAc,SAApI,cAGA,yBAAKtO,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAG,wBAAxD,YACA,kBAAC,IAAD,CAAMzO,UAAU,qCAAqCyO,GAAG,0BAAxD,cACA,kBAAC,IAAD,CAAMzO,UAAU,qCAAqCyO,GAAG,8BAAxD,mBACA,kBAAC,IAAD,CAAMzO,UAAU,qCAAqCyO,GAAG,iCAAxD,sBACA,kBAAC,IAAD,CAAMzO,UAAU,qCAAqCyO,GAAG,UAAxD,YAKT3O,I,0CAOP,IAAIA,EAQJ,OAP2B,MAAvBtB,KAAKX,MAAMuQ,KAAKvN,KAAuC,KAAxBrC,KAAKX,MAAMuQ,KAAKvN,MAC/Cf,EACI,wBAAIE,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAG,YAAxD,cAIL3O,I,4EAWP,OACI,6BAASE,UAAU,sBAAsBgB,GAAG,UAAUuG,MAAO,CAACoH,OAAQ,MAClE,yBAAK3O,UAAU,2GACX,4BAAQA,UAAU,sCAAsCsF,KAAK,SAAS+I,cAAY,WAAWO,cAAY,0BAA0BC,gBAAc,yBAAyBP,gBAAc,QAAQQ,aAAW,qBACvM,yBAAK9O,UAAU,aACX,+BACA,+BACA,+BACA,iCAGR,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,eACZ,uBAAGoN,KAAK,KACJ,yBAAKF,IAAG,UAAKhC,gBAAL,iCAA4DiC,IAAI,UAAUlM,MAAM,GAAGsG,MAlBtG,CACbsG,OAAQ,cAoBQ,0BAAM7N,UAAU,uBACZ,uBAAGA,UAAU,sCAAsCoN,KAAK,KAAxD,cAMZ,yBAAKpN,UAAU,2BAA2BgB,GAAG,0BACzC,wBAAIhB,UAAU,0BAA0B+O,uBAAqB,QACzD,wBAAI/O,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAG,KAAxD,SAGAjQ,KAAKwP,uBAGLxP,KAAK0P,oBAET,wBAAIlO,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,qCAAqCyO,GAAG,UAAxD,aAGAjQ,KAAKyP,qBAGb,yBAAKjO,UAAU,kCACX,kBAAC,IAAD,CAAMA,UAAU,8CAA8CyO,GAAG,YAAjE,sB,GAzIN3M,IAAMC,WAuJtBiN,EAAqB,CACvBb,WCnJG,WACL,MAAO,CACL7I,KCfuB,cDgBvB2J,KAAM,MDmJKC,eATU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KAAKgB,eAOgBJ,EAA1BE,CAA8CpB,GGtKhDuB,EAAb,uKAMQ,OACI,yBAAKrP,UAAU,qBACX,6BAASA,UAAU,mCAAmCgB,GAAG,WACrD,yBAAKhB,UAAU,aACX,yBAAKuH,MARC,CAClBI,MAAO,MACPU,OAAQ,SAOQ,6BACI,wBAAIrI,UAAU,6CAAd,eAGA,6BACI,yBAAKA,UAAU,8BACX,0BAAMA,UAAU,oBACZ,0BAAMA,UAAU,8BAEpB,wBAAIA,UAAU,0DAAd,iCAIJ,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,wCAAd,oCAGA,uBAAGA,UAAU,iDAAb,8BAC+B,6BAD/B,2CAMR,yBAAKsP,iBAAe,WAChB,0BAAMC,OAAO,wBAAwBC,OAAO,OAAOxP,UAAU,4BAA4ByP,kBAAgB,iBACrG,2BAAOnK,KAAK,SAAS+D,KAAK,QAAQqG,kBAAgB,OAAOlP,MAAM,qIAC/D,yBAAKR,UAAU,OACX,yBAAKsK,QAAQ,EAAMqF,kBAAgB,GAAG3P,UAAU,8BAAhD,oCAGA,yBAAKsK,QAAQ,EAAMsF,yBAAuB,GAAG5P,UAAU,+BAE3D,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBAAuB6P,WAAS,QAC3C,2BAAOvK,KAAK,OAAO+D,KAAK,OAAOnJ,YAAY,YAAY4P,kBAAgB,OAAOC,UAAU,EAAM/P,UAAU,+BAA+BgB,GAAG,kBAE9I,yBAAKhB,UAAU,uBAAuB6P,WAAS,SAC3C,2BAAOvK,KAAK,OAAO+D,KAAK,QAAQnJ,YAAY,QAAQ4P,kBAAgB,QAAQC,UAAU,EAAM/P,UAAU,+BAA+BgB,GAAG,mBAE5I,yBAAK6O,WAAS,QAAQ7P,UAAU,yBAC5B,2BAAOsF,KAAK,OAAO+D,KAAK,QAAQnJ,YAAY,QAAQ4P,kBAAgB,QAAQ9P,UAAU,+BAA+B+P,UAAU,EAAM/O,GAAG,mBAE5I,yBAAK6O,WAAS,UAAU7P,UAAU,yBAC9B,8BAAUqJ,KAAK,UAAUnJ,YAAY,UAAU4P,kBAAgB,UAAU9P,UAAU,+BAA+BgB,GAAG,qBAEzH,yBAAKhB,UAAU,gDACX,4BAAQsF,KAAK,SAAStF,UAAU,sCAAhC,6BAzDhD,GAA6B8B,IAAMC,W,wBCkBtBiO,EAAkC,CAC9CzB,UAAW,GACXC,SAAU,GACV1E,MAAO,GACPoC,SAAU,GACV+D,WAAY,GACZC,QAAS,GACTC,MAAO,GACPC,mBAAmB,EACnB5S,qBAAqB,EACrBD,OAAQ,CACPgR,UAAW,yBACXC,SAAU,wBACV1E,MAAO,oBACPoC,SAAU,uBACV+D,WAAY,2BAEbI,gBAAiB,CAChB9B,WAAW,EACXC,UAAU,EACV1E,OAAO,EACPoC,UAAU,EACV+D,YAAY,I,4bCnCd,IAAMK,EAAY5S,IAAOoF,IAAV,KAKTyN,EAAW7S,IAAOoF,IAAV,KAOR0N,EAAqC,CACvCC,QAAS,QACT9I,MAAO,OACP+I,aAAc,SACd/C,gBAAiB,UACjBgD,UAAW,OACXzI,MAAO,UACP0I,WAAY,KACZC,QAAS,eACThD,OAAQ,sBACRN,OAAQ,qBAENnF,EAA+B,CACjCC,OAAQ,GAENyI,EAAkC,CACpCC,UAAW,UAET9I,EAAkC,CACpCC,MAAO,MACPC,UAAW,UAET6I,EAAQtT,IAAOuT,EAAV,KAGUC,E,kDACjB,WAAYrT,GAAoB,IAAD,8BAC3B,cAAMA,IAGDE,MAAQiS,EAGb,EAAKrH,aAAe,EAAKA,aAAavK,KAAlB,gBACpB,EAAKsK,aAAe,EAAKA,aAAatK,KAAlB,gBACpB,EAAK+S,YAAc,EAAKA,YAAY/S,KAAjB,gBACnB,EAAKoK,mBAAqB,EAAKA,mBAAmBpK,KAAxB,gBAVC,E,yDAiBlBgC,GAAa,IAAD,OACrBA,EAAMC,iBADe,MAEGD,EAAMG,OAAtB8I,EAFa,EAEbA,KAAM7I,EAFO,EAEPA,MACdhC,KAAKgB,SAAL,eACK6J,EAAO7I,IACT,WAAO,IAAD,EACmB,EAAKkI,eAAvBnL,EADD,EACCA,OACF0L,GAFC,EACSC,MAEd,EAAK1J,SAAS,CACVhC,oBAAqByL,EACrB1L,gB,qCASR,IAAI2L,GAAQ,EACR3L,EAAkC,GAUtC,IAAK,IAAIkE,KATTlE,EAAM,UAAgBiB,KAAKT,MAAMwQ,UAAU3N,OAAS,EAAI,GAAK,yBAC7DrD,EAAM,SAAeiB,KAAKT,MAAMyQ,SAAS5N,OAAS,EAAI,GAAK,wBAC3DrD,EAAM,MAAYiB,KAAKT,MAAM+L,MAAMlJ,OAAS,EAAI,GAAK,oBACrDrD,EAAM,SAAeiB,KAAKT,MAAMmO,SAAStL,OAAS,EAAI,GAAK,uBAC3DrD,EAAM,WAAiBiB,KAAKT,MAAMkS,WAAWrP,OAAS,EAAI,GAAK,0BACjC,KAA3BpC,KAAKT,MAAMkS,YAAsBzR,KAAKT,MAAMmO,WAAa1N,KAAKT,MAAMkS,aACnE1S,EAAO0S,WAAa,0CAGR1S,EACZ,GAAIA,EAAOkE,GAAKb,OAAS,EAAG,CACxBsI,GAAQ,EACR,MAGR,MAAO,CAAE3L,SAAQ2L,W,yCAOFgB,GAEf,IAAI3M,EAASiB,KAAKT,MAAMR,OAAO2M,GAE/B,GAAK3M,GAAqB,KAAXA,EAEf,OACI,yBAAKgK,MAAOU,GAEJ,yBAAKxG,IAAKyI,GACN,8BAAO3M,O,oCAWvBiB,KAAKgB,SAAS,CACV4Q,mBAAmB,M,+BAIjB,IAAD,OACL,OAAI5R,KAAKT,MAAMqS,kBACJ,kBAAC,IAAD,CAAU7Q,MAAM,EAAMkP,GAAIjQ,KAAKX,MAAMuT,oBAG5C,kBAACd,EAAD,KACI,kBAACC,EAAD,KACI,0BAAM3F,SAAU,SAACzB,GAAQA,EAAE9I,iBAAkB,EAAKxC,MAAMwT,WAAW,EAAKtT,SACpE,wBAAIwJ,MAAOuJ,GAAX,WAEA,yBAAK9Q,UAAU,cACX,2BAAOqK,QAAQ,aACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,cAAhB,eAEtC,2BAAOlB,KAAK,YACR/D,KAAK,OACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,eACf1B,KAAKgK,mBAAmB,cAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,YACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,aAAhB,cAEtC,2BAAOlB,KAAK,WACR/D,KAAK,OACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,cACf1B,KAAKgK,mBAAmB,aAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,SACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,iBAAhB,kBAEtC,2BAAOlB,KAAK,QACR/D,KAAK,QACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,gBACf1B,KAAKgK,mBAAmB,UAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,YACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,YAAhB,aAEtC,2BAAOlB,KAAK,WACR/D,KAAK,WACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,mBACf1B,KAAKgK,mBAAmB,aAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,cACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,eAAhB,gBAEtC,2BAAOlB,KAAK,aACR/D,KAAK,WACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,sBACf1B,KAAKgK,mBAAmB,eAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,WACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,WAAhB,YAEtC,2BAAOlB,KAAK,UACR/D,KAAK,OACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,kBACf1B,KAAKgK,mBAAmB,YAG7B,yBAAKxI,UAAU,cACX,2BAAOqK,QAAQ,SACX,0BAAM9C,MAAOU,GAAb,MAAkC,0BAAMsC,YAAU,SAAhB,UAEtC,2BAAOlB,KAAK,QACR/D,KAAK,OACLrF,SAAUzB,KAAKmK,aACfpB,MAAOiJ,EACPtQ,YAAY,uBACf1B,KAAKgK,mBAAmB,UAG7B,4BAAQjB,MAAOa,EACXa,SAAUzK,KAAKT,MAAMP,oBACrB8H,KAAK,SACLtF,UAAU,6BAHd,WAMA,uBAAGA,UAAU,8BAAb,sBACuB,kBAACgR,EAAD,CAAOtC,QAASlQ,KAAK2S,aAArB,kB,GA5LXpP,a,QCzCvBuP,EAAb,sCACIC,cAAgB,CACZC,OAAO,GAAD,OAAKtG,6CACXuG,UAAU,GAAD,OAAKvG,4CAAL,QACTwG,MAAM,GAAD,OAAKxG,4CAAL,cACLyG,MAAM,GAAD,OAAKzG,4CAAL,cACL0G,SAAS,GAAD,OAAI1G,4CAAJ,iBACR2G,KAAK,GAAD,OAAK3G,4CAAL,cACJ4G,WAAW,GAAD,OAAK5G,4CAAL,mBACV6G,eAAe,GAAD,OAAK7G,4CAAL,uBACd8G,kBAAkB,GAAD,OAAK9G,4CAAL,0BACjB+G,SAAS,GAAD,OAAK/G,4CAAL,kBAXhB,KAcIgH,cAAgB,CACZC,WAAY,iBACZC,aAAc,oBACdC,YAAa,qBAjBrB,KAoBIC,cAAgB,CACZC,QAAS,UACTC,SAAU,YACVvO,QAAS,UACTwO,OAAQ,SACRC,QAAS,UACTC,KAAM,OACNC,MAAO,QACPC,KAAM,QA5Bd,KA+BIC,eAAqB,CACjB,KAAQ,IAAI5Q,IAAS,CAACT,IAAK,EAAGjB,MAAO,SACrC,WAAc,IAAI0B,IAAS,CAACT,IAAK,EAAGjB,MAAO,gBAC3C,UAAa,IAAI0B,IAAS,CAACT,IAAK,EAAGjB,MAAO,cAC1C,UAAa,IAAI0B,IAAS,CAACT,IAAK,EAAGjB,MAAO,YAC1C,OAAU,IAAI0B,IAAS,CAACT,IAAK,EAAGjB,MAAO,WACvC,UAAa,IAAI0B,IAAS,CAACT,IAAK,EAAGjB,MAAO,eArClD,KAwCIuS,uBAAyB,CACrBC,IAAK,IAAI9Q,IAAS,CAACT,KAAM,EAAGjB,MAAO,YACnCyS,KAAM,IAAI/Q,IAAS,CAACT,IAAK,EAAGjB,MAAO,cA1C3C,KA6CI0S,eAAiB,CACbC,SAAU,aACVC,SAAU,cA/ClB,KAkDIC,gBAAkB,CACdC,SAAU,sB,QCjCLC,EAAb,WAGI,WAAYC,GAA8B,yBAF1C5P,YAEyC,OADzC6P,iBACyC,EAWrCjV,KAAKkV,UAAYlV,KAAKkV,UAAUtV,KAAKI,MACrCA,KAAKmV,aAAenV,KAAKmV,aAAavV,KAAKI,MAC3CA,KAAKoV,YAAcpV,KAAKoV,YAAYxV,KAAKI,MACzCA,KAAKqV,QAAUrV,KAAKqV,QAAQzV,KAAKI,MACjCA,KAAKoF,OAAS,IAAI0N,EAClB9S,KAAKiV,YAAcD,EAnB3B,sDAsBqBM,GACb,OAAOhQ,IAAUY,KAAsDlG,KAAKoF,OAAO2N,cAAcI,MAAOmC,GACnGC,MAAK,SAAC/P,GAGH,OADAgQ,aAAaC,QAAQ,eAAgBhV,KAAKE,UAAU6E,IAC7CF,IAAUG,QAAQD,QA3BzC,mCA+BwBoK,GAChB,OAAOtK,IAAUY,KAA+ClG,KAAKoF,OAAO2N,cAAcK,SAAUxD,GAC/F2F,MAAK,SAAC/P,GAGH,OADAgQ,aAAaC,QAAQ,eAAgBhV,KAAKE,UAAU6E,IAC7CF,IAAUG,QAAQD,MAE5BkQ,OAAM,SAACpP,GACJ,MAAMA,OAvCtB,iCA2CsBsJ,GACd,OAAOtK,IAAUa,IAA8CnG,KAAKoF,OAAO2N,cAAcG,MAAOtD,GAC3F2F,MAAK,SAAC/P,GACH,OAAOF,IAAUG,QAAQD,MAE5BkQ,OAAM,SAACpP,GACJ,MAAMA,OAjDtB,6EAqD+BqP,GArD/B,uFAuDY3V,KAAKiV,YAAY9T,KAAOwU,EAvDpC,SAwD8BrQ,IAAUU,OAAV,UAAoBhG,KAAKoF,OAAO2N,cAAcO,YAActT,KAAKiV,aAxD/F,cAwDkBzP,EAxDlB,yBAyDmBF,IAAUG,QAAQD,IAzDrC,wUAkEqDF,IAAUC,IAAiCvF,KAAKoF,OAAO2N,cAAcG,OAlE1H,cAkEkB1N,EAlElB,yBAmEmBF,IAAUG,QAAQD,IAnErC,wLAyEmBhD,GACX,OAAO8C,IAAUC,IAAV,UAA4CvF,KAAKoF,OAAO2N,cAAcG,MAAtE,YAA+E1Q,IAAM+S,KAAKjQ,IAAUG,aA1EnH,K,QCpBamQ,EACT,WAAYC,GAAW,yBAWvBxT,SAXsB,OAYtByT,YAZsB,OAatBxK,WAbsB,OActBoC,cAdsB,OAetBqC,eAfsB,OAgBtBC,cAhBsB,OAiBtB2B,WAjBsB,OAkBtBD,aAlBsB,OAmBtBqE,WAnBsB,EAClB/V,KAAKqC,IAAcwT,GAAOA,EAAIxT,IAAcwT,EAAIxT,IAAM,KACtDrC,KAAK8V,OAAcD,GAAOA,EAAIC,OAAcD,EAAIC,OAAS,GACzD9V,KAAKsL,MAAcuK,GAAOA,EAAIvK,MAAcuK,EAAIvK,MAAQ,GACxDtL,KAAK0N,SAAcmI,GAAOA,EAAInI,SAAcmI,EAAInI,SAAW,GAC3D1N,KAAK+P,UAAc8F,GAAOA,EAAI9F,UAAc8F,EAAI9F,UAAY,GAC5D/P,KAAKgQ,SAAc6F,GAAOA,EAAI7F,SAAc6F,EAAI7F,SAAW,GAC3DhQ,KAAK2R,MAAckE,GAAOA,EAAIlE,MAAckE,EAAIlE,MAAQ,GACxD3R,KAAK0R,QAAcmE,GAAOA,EAAInE,QAAcmE,EAAInE,QAAU,GAC1D1R,KAAK+V,MAAcF,GAAOA,EAAIE,MAAcF,EAAIE,MAAQ,I,6VCNhE,IAAM1R,EAAenF,IAAOoF,IAAV,KAOZ0R,EAAc9W,IAAOoF,IAAV,KAMX2R,EAAkC,CACpC/D,aAAc,UAKLgE,EAAb,kDACI,WAAY7W,GAAkB,IAAD,8BACzB,cAAMA,IACDE,MAAQ,CACT4W,KAAM,EAAK9W,MAAM8W,MAGrB,EAAKC,QAAU,EAAKA,QAAQxW,KAAb,gBANU,EADjC,oDASYyW,GACJrW,KAAKgB,SAAS,CACVmV,KAAME,MAXlB,4CAeQ,OAAOrW,KAAKX,MAAMoJ,QAASzI,KAAKX,MAAMoJ,UAAY,OAf1D,+BAiBa,IAAD,OAEJ,OACI,kBAACpE,EAAD,KACKrE,KAAKT,MAAM4W,KACR,kBAACG,EAAA,EAAD,CAAOvN,MAAOkN,EACVhT,IAAKjD,KAAKX,MAAM4D,IAChBsG,QAASvJ,KAAKX,MAAMkK,SACpB,kBAACyM,EAAD,CAAa9F,QAAS,kBAAK,EAAKqG,wBAC5B,sCAEHvW,KAAKX,MAAM2C,OAEhB,QA9BpB,GAA8BsB,IAAMC,WCZvBiT,G,OAAgC,CACzC5G,KAAM,IAAIgG,I,yKCDd,IAAMvR,GAAenF,IAAOoF,IAAV,MAOZmS,G,kDAGF,WAAYpX,GAAmB,IAAD,8BAC1B,cAAMA,IAHVqX,iBAE8B,IAD9B3M,gBAC8B,EAG1B,EAAKxK,MAAQiX,EACb,EAAKE,YAAc,IAAI3B,EAAerV,KACtC,EAAKqK,WAAa,IAAItD,aAEtB,EAAKkQ,YAAc,EAAKA,YAAY/W,KAAjB,gBACnB,EAAKgX,aAAe,EAAKA,aAAahX,KAAlB,gBARM,E,gMAYTI,KAAK0W,YAAYrB,QAAQrV,KAAKX,MAAMmP,MAAMnF,OAAjB,Q,OAAtCuG,E,OACJ5P,KAAKgB,SAAS,CACV4O,KAAMA,I,yIAIDiH,GACT,IAAIjH,EAAO,IAAIgG,EAAKiB,EAAK/X,YACzBgG,QAAQC,IAAI6K,GACZ5P,KAAK0W,YAAYI,WAAWlH,GAAM2F,MAAK,SAACjU,GACpCwD,QAAQC,IAAIzD,MAEfoU,OAAM,SAAC/J,GACJ7G,QAAQC,IAAI4G,Q,kCAIRiE,GACR,IAAImH,EAAoC,GACpC/L,EAA+C,GA0DnD,OAvDA+L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,QACLuG,MAAO,QACPxH,MAAO4N,EAAKtE,MACZxE,KAAM9G,KAAK+J,WAAWkD,aAAa3B,MACnCW,UAAU,EACV+K,MAAO,MAIXhM,EAAWhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,2BAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,YACLuG,MAAO,aACPxH,MAAO4N,EAAKG,UACZ/E,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,OAIXhM,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,0BAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,WACLuG,MAAO,YACPxH,MAAO4N,EAAKI,SACZhF,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,MAIXD,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,UACLuG,MAAO,UACPxH,MAAO4N,EAAK8B,QACZ5K,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,MAIXD,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,QACLuG,MAAO,QACPxH,MAAO4N,EAAK+B,MACZ7K,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,MAEJD,I,+BAIP,IAAIA,EAAY/W,KAAK2W,YAAY3W,KAAKT,MAAMqQ,MAC5C,OACI,kBAAC,GAAD,KACI,kBAAC9F,EAAA,YAAD,CAAaU,WAAYuM,EAAW1K,iBAAkBrM,KAAK4W,oB,GAnG/CtT,IAAMC,WAyGnB0T,eAAWR,I,sCCtHnB,SAASS,GAAT,GAEH,IAAD,IADCC,OAAUC,EACX,EADWA,YAAaC,EACxB,EADwBA,gBAAiBC,EACzC,EADyCA,UAElCC,EAAQF,EAAgBjV,OAE9B,OACI,2BACIJ,MAAOoV,GAAe,GACtBlH,QAAS,SAAAvF,GAAC,OAAGA,EAAE6M,mBACf/V,SAAU,SAAAkJ,GACN2M,EAAU3M,EAAE5I,OAAOC,YAAS4C,IAEhClD,YAAW,iBAAY6V,EAAZ,iBAOhB,SAASE,GAAT,GAEH,IAAD,IADCN,OAAUC,EACX,EADWA,YAAaE,EACxB,EADwBA,UAAWD,EACnC,EADmCA,gBAAiB7U,EACpD,EADoDA,GAI7CoB,EAAUN,IAAMoU,SAAQ,WAC1B,IAAM9T,EAAU,IAAI+T,IAIpB,OAHAN,EAAgB/W,SAAQ,SAAAsX,GACpBhU,EAAQiU,IAAID,EAAIE,OAAOtV,OAEpB,aAAIoB,EAAQkU,YACpB,CAACtV,EAAI6U,IAGR,OACI,4BACIrV,MAAOoV,EACPlH,QAAS,SAAAvF,GAAC,OAAGA,EAAE6M,mBACf/V,SAAU,SAAAkJ,GACN2M,EAAU3M,EAAE5I,OAAOC,YAAS4C,KAGhC,4BAAQ5C,MAAM,IAAd,OACC4B,EAAQf,KAAI,SAACC,EAAQX,GAAT,OACT,4BAAQc,IAAKd,EAAGH,MAAOc,GAClBA,OA+Fd,SAASiV,GAAkB7L,EAAM1J,EAAI4U,GACxC,OAAOY,aAAY9L,EAAMkL,EAAa,CAAEjU,KAAM,CAAC,SAAAyU,GAAG,OAAIA,EAAIE,OAAOtV,OAIrEuV,GAAkBE,WAAa,SAAArV,GAAG,OAAKA,G,wBClJ1BsV,GAAwB5U,IAAM6U,YACvC,WAA6BC,GAAS,IAAnCC,EAAkC,EAAlCA,cAAkBC,EAAgB,kCAC3BC,EAAajV,IAAMkV,SACnBC,EAAcL,GAAOG,EAM3B,OAJAjV,IAAMoV,WAAU,WACZD,EAAYE,QAAQN,cAAgBA,IACrC,CAACI,EAAaJ,IAGb,oCACI,kBAACvP,GAAA,EAAD,eAAUhC,KAAK,WAAWsR,IAAKK,GAAiBH,Q,2MCJ1DM,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,WAAY,EACZC,WAAYH,EAAMI,QAAQ,UA0EfC,GAtEgB,SAAA9Z,GAC7B,IAAM+Z,EAAUR,KACVE,EAAQO,eACN9B,EAA2ClY,EAA3CkY,MAAO+B,EAAoCja,EAApCia,KAAMC,EAA8Bla,EAA9Bka,YAAaC,EAAiBna,EAAjBma,aAkBlC,OACE,yBAAKhY,UAAW4X,EAAQL,MACtB,kBAACU,GAAA,EAAD,CACEvJ,QAnB6B,SAAAtO,GACjC4X,EAAa5X,EAAO,IAmBhB6I,SAAmB,IAAT6O,EACVhJ,aAAW,cAEU,QAApBwI,EAAMY,UAAsB,kBAAC,KAAD,MAAmB,kBAAC,KAAD,OAElD,kBAACD,GAAA,EAAD,CACEvJ,QAtBwB,SAAAtO,GAC5B4X,EAAa5X,EAAO0X,EAAO,IAsBvB7O,SAAmB,IAAT6O,EACVhJ,aAAW,iBAEU,QAApBwI,EAAMY,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,OAGJ,kBAACD,GAAA,EAAD,CACEvJ,QA7BwB,SAAAtO,GAC5B4X,EAAa5X,EAAO0X,EAAO,IA6BvB7O,SAAU6O,GAAQK,KAAKC,KAAKrC,EAAQgC,GAAe,EACnDjJ,aAAW,aAEU,QAApBwI,EAAMY,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,OAGJ,kBAACD,GAAA,EAAD,CACEvJ,QApC4B,SAAAtO,GAChC4X,EAAa5X,EAAO+X,KAAKE,IAAI,EAAGF,KAAKC,KAAKrC,EAAQgC,GAAe,KAoC7D9O,SAAU6O,GAAQK,KAAKC,KAAKrC,EAAQgC,GAAe,EACnDjJ,aAAW,aAEU,QAApBwI,EAAMY,UAAsB,kBAAC,KAAD,MAAoB,kBAAC,KAAD,S,oLCnEnDd,GAAYC,cAAW,SAAAC,GAAK,MAAK,CACrChL,OAAO,aACLgM,SAAU,WACV5H,aAAc4G,EAAMiB,MAAM7H,aAC1B/C,gBAAiB6K,aAAKlB,EAAMmB,QAAQpN,OAAOqN,MAAO,KAClD,UAAW,CACT/K,gBAAiB6K,aAAKlB,EAAMmB,QAAQpN,OAAOqN,MAAO,MAEpDlR,YAAa8P,EAAMI,QAAQ,GAC3BD,WAAY,EACZ9P,MAAO,QACN2P,EAAMqB,YAAYC,GAAG,MAAQ,CAC5BnB,WAAYH,EAAMI,QAAQ,GAC1B/P,MAAO,SAGXkR,WAAY,CACVlR,MAAO2P,EAAMI,QAAQ,GACrB7J,OAAQ,OACRyK,SAAU,WACVQ,cAAe,OACfrI,QAAS,OACTsI,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACT/Q,MAAO,WAETgR,WAAW,aACTrI,QAASyG,EAAMI,QAAQ,EAAG,EAAG,EAAG,GAChCyB,WAAY7B,EAAM8B,YAAY/U,OAAO,SACrCsD,MAAO,QACN2P,EAAMqB,YAAYC,GAAG,MAAQ,CAC5BjR,MAAO,UA2CE0R,GAtCM,SAAC,GAIf,IAHLC,EAGI,EAHJA,sBAGI,IAFJC,oBAEI,MAFW,GAEX,EADJC,EACI,EADJA,gBAEM5B,EAAUR,KACVrB,EAAQuD,EAAsB1Y,OAMpC,OACE,yBAAKZ,UAAW4X,EAAQtL,QACtB,yBAAKtM,UAAW4X,EAAQiB,YACtB,kBAAC,KAAD,OAEF,kBAACY,GAAA,EAAD,CACEjZ,MAAO+Y,GAAgB,GACvBtZ,SAAU,SAAAkJ,GACRqQ,EAAgBrQ,EAAE5I,OAAOC,YAAS4C,IAEpClD,YAAW,UAAK6V,EAAL,eACX6B,QAAS,CACPL,KAAMK,EAAQqB,UACdtb,MAAOia,EAAQsB,YAEjBQ,WAAY,CAAE,aAAc,cC1D9BC,GAAmBtC,cAAW,SAAAC,GAAK,MAAK,CAC7CsC,YAAa,CACZvR,OAAQiP,EAAMI,QAAQ,GACtBmC,SAAU,IACVC,SAAU,KAEXvC,KAAM,CACLwC,YAAazC,EAAMI,QAAQ,GAC3BhQ,aAAc4P,EAAMI,QAAQ,IAE7BsC,UACwB,UAAvB1C,EAAMmB,QAAQnT,KACX,CACD4C,MAAOoP,EAAMmB,QAAQwB,UAAUC,KAC/BvM,gBAAiBwM,aAAQ7C,EAAMmB,QAAQwB,UAAUrH,MAAO,MAEvD,CACD1K,MAAOoP,EAAMmB,QAAQhM,KAAK8F,QAC1B5E,gBAAiB2J,EAAMmB,QAAQwB,UAAUpH,MAE5C5R,MAAO,CACNmZ,KAAM,gBAMFC,GAAY,CACjBC,WAAY,CACX/S,MAAO,CACNgT,UAAWC,IACX7S,MAAO,OAkGK8S,GA7FM,SAAA5c,GACpB,IAAM+Z,EAAU+B,KAEfe,EAQG7c,EARH6c,YACAC,EAOG9c,EAPH8c,oBACAC,EAMG/c,EANH+c,iBACAtB,EAKGzb,EALHyb,sBACAE,EAIG3b,EAJH2b,gBAP4B,EAWzB3b,EAHH0b,oBAR4B,MAQb,GARa,IAWzB1b,EAFHgd,iBAT4B,MAShB,GATgB,EAU5BC,EACGjd,EADHid,WAED,OACC,kBAAC,KAAD,CACC9a,UAAW+a,aAAKnD,EAAQL,KAAT,eACbK,EAAQoC,UAAYU,EAAc,KAIH,aAAhCE,EAAiB9Z,WAEf,kBAACka,GAAA,EAAD,CAAS/Z,MAAM,OACd,kBAACgX,GAAA,EAAD,CAAYnJ,aAAW,MAAMJ,QAASkM,GACrC,kBAAC,KAAD,QAIF,8BAIFF,EAAc,EACd,kBAACO,GAAA,EAAD,CACCjb,UAAW4X,EAAQ3W,MACnBiH,MAAM,UACNH,QAAQ,aAEP2S,EALF,aAQC,kBAACO,GAAA,EAAD,CAAYjb,UAAW4X,EAAQ3W,MAAO8G,QAAQ,KAAK/G,GAAG,cAEpD6Z,GAKHH,EAAc,EACd,kBAACM,GAAA,EAAD,CAAS/Z,MAAM,UACd,kBAACgX,GAAA,EAAD,CAAYnJ,aAAW,SAASJ,QAASiM,GACxC,kBAAC,KAAD,QAID,kBAAC,GAAD,CACCrB,sBAAuBA,EACvBC,aAAcA,EACdC,gBAAiBA,IAIpB,kBAAC0B,GAAA,EAAD,CAAalb,UAAW4X,EAAQgC,aAC/B,kBAACuB,GAAA,EAAD,CAAYna,GAAG,yBAAf,WACA,kBAACoa,GAAA,EAAD,CACCC,QAAQ,wBACRra,GAAG,yBACHgG,UAAQ,EACRxG,MAAO,CAAC,kBACR7C,MAAO,kBAAC2d,GAAA,EAAD,MACPC,YAAa,SAAChd,GAAD,OAAcA,EAASid,KAAK,OACzCnB,UAAWA,IAEVS,EAAWzZ,KAAI,SAAAsU,GAAM,OACrB,kBAAC8F,GAAA,EAAD,CAAUha,IAAKkU,EAAO3U,GAAIR,MAAOmV,EAAO3U,IACvC,kBAACsG,GAAA,EAAaqO,EAAO+F,wBACrB,kBAACC,GAAA,EAAD,CAAcpJ,QAASoD,EAAO3U,a,OC1G9B,SAAS4a,GAAT,GASH,IARAC,EAQD,EARCA,QACAlc,EAOD,EAPCA,KACAmc,EAMD,EANCA,UACWC,EAKZ,EALCC,UAKD,IAJCC,qBAID,aAHCtB,2BAGD,MAHuB,SAACuB,KAGxB,MAFCtB,wBAED,MAFoB,aAEpB,MADCC,iBACD,MADa,GACb,EACOsB,EAAcra,IAAMoU,SACtB,iBAAO,CAEHkG,UAAWjb,GAGXsL,KAAM,SAAC/B,EAAM1J,EAAI4U,GACb,OAAOlL,EAAKvJ,QAAO,SAAAiV,GACf,IAAMiG,EAAWjG,EAAIE,OAAOtV,GAC5B,YAAoBoC,IAAbiZ,GACDC,OAAOD,GACJE,cACAC,WAAWF,OAAO1G,GAAa2G,sBAKpD,IAGEE,EAAgB3a,IAAMoU,SACxB,iBAAO,CAEHwG,OAAQvb,MAEZ,IA1BL,EAyCKwb,oBACA,CACId,UACAlc,OACA8c,gBACAN,cACAS,eAAgBX,EAChBD,UAAWD,EACXc,kBAAkB,GAEtBC,mBACAC,cACAC,aACAC,iBACAC,iBACA,SAAAC,GACIA,EAAMrC,WAAWvb,MAAK,SAAAsc,GAAO,OAEzB,CACI7a,GAAI,YAGJoc,OAAQ,gBAAGC,EAAH,EAAGA,8BAAH,OACJ,yBAAK9V,MAAO,CAAEwJ,UAAW,WACrB,kBAAC2F,GAA0B2G,OAKnCC,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OACF,yBAAK7O,MAAO,CAAEwJ,UAAW,WACrB,kBAAC2F,GAA0BN,EAAImH,iCAflB,oBAmBtB1B,UA9CX2B,EA9BL,EA8BKA,cACAC,EA/BL,EA+BKA,kBACAC,EAhCL,EAgCKA,aACAC,EAjCL,EAiCKA,WACA7F,EAlCL,EAkCKA,KACA8F,EAnCL,EAmCKA,SACAC,EApCL,EAoCKA,YACA/C,EArCL,EAqCKA,WACAxB,EAtCL,EAsCKA,sBACAE,EAvCL,EAuCKA,gBAvCL,IAwCKzb,MAAS+f,EAxCd,EAwCcA,UAAWC,EAxCzB,EAwCyBA,SAAUC,EAxCnC,EAwCmCA,eAAgBzE,EAxCnD,EAwCmDA,aA0ClDzX,IAAMoV,WAAU,WACZ4E,EAAU,CAAEgC,YAAWC,eACxB,CAACjC,EAAWgC,EAAWC,IAsB1B,OACI,kBAACE,GAAA,EAAD,CAAgBje,UAAU,cACtB,kBAAC,GAAD,CACI0a,YAAahZ,OAAOC,KAAKqc,GAAgBpd,OACzC+Z,oBAfmB,WAE3B,IAAIuD,EAAmBxc,OAAOC,KAAKqc,GAAgB3c,KAAI,SAAA8c,GAAC,OAAIC,SAASD,EAAG,OAEpEE,EAAiB1e,EAAKwB,QAAO,SAACmd,EAAG3d,GACjC,OAAOud,EAAiBK,SAAS5d,MAGrCga,EAAoB0D,IAQZzD,iBAAkBA,EAClBC,UAAWA,EACXvB,sBAAuBA,EACvBE,gBAAiBA,EACjBD,aAAcA,EACduB,WAAYA,IAEhB,kBAAC,KAAD,iBAAc0C,IAAd,CAA+Bxd,UAAU,uBACrC,kBAACwe,GAAA,EAAD,KACKd,EAAarc,KAAI,SAAAod,GAAW,OACzB,kBAACC,GAAA,EAAaD,EAAYE,sBACrBF,EAAYrT,QAAQ/J,KAAI,SAAAsU,GAAM,OAC3B,kBAACiJ,GAAA,EACsB,cAAdjJ,EAAO3U,GACN2U,EAAOkJ,iBACPlJ,EAAOkJ,eAAelJ,EAAOmJ,wBAElCnJ,EAAOoJ,OAAO,UACA,cAAdpJ,EAAO3U,GACJ,kBAACge,GAAA,EAAD,CACIC,OAAQtJ,EAAOuJ,SAEfhH,UAAWvC,EAAOwJ,aAAe,OAAS,QAE9C,KACJ,yBAAKnf,UAAU,uBACT2V,EAAOyJ,YAAczJ,EAAO0J,0BAA6B1J,EAAOoJ,OAAO,UAAY,eAO7G,kBAACO,GAAA,EAAc7B,IACV3F,EAAKzW,KAAI,SAAC+U,EAAKzV,GAEZ,OADAgd,EAAWvH,GAEP,kBAACsI,GAAA,EAAatI,EAAImJ,cACbnJ,EAAIoJ,MAAMne,KAAI,SAAAoe,GACX,OACI,kBAACb,GAAA,EAAca,EAAKC,eACfD,EAAKV,OAAO,iBAQzC,kBAACY,GAAA,EAAD,CAAa3f,UAAU,cACnB,kBAAC0e,GAAA,EAAD,KACI,kBAACkB,GAAA,EAAD,CACIC,mBAAoB,CAChB,EACA,GACA,GACA,GACA,IACA,CAAE7X,MAAO,MAAOxH,MAAOub,IAE3B+D,QAAS,IACT/J,MAAOgG,EACPhE,YAAagG,EACbjG,KAAMgG,EACNiC,YAAa,CACTrG,WAAY,CAAE,aAAc,iBAC5BsG,QAAQ,GAEZhI,aAxFC,SAAC5X,EAAO6f,GAC7BrC,EAASqC,IAwFWC,oBA7FQ,SAAA9f,GAC5Byd,EAAY5S,OAAO7K,EAAMG,OAAOC,SA6FZ2f,iBAAkBxI,S,8GCxL9C,IAAM9U,GAAenF,IAAOoF,IAAV,MAGZsd,G,kDAEF,WAAYviB,GAA4B,IAAD,8BACnC,cAAMA,IAFVqX,iBACuC,EAGnC,EAAKnX,MAAQ,CACTsiB,QAAS,GACTC,SAAU,GACVC,WAAW,EACXtE,eAAe,GAEnB,EAAK/G,YAAc,IAAI3B,EAAerV,KACtC,EAAKsiB,gBAAkB,EAAKA,gBAAgBpiB,KAArB,gBACvB,EAAKqiB,kBAAoB,EAAKA,kBAAkBriB,KAAvB,gBAXU,E,0KAenCI,KAAKgiB,gBAAgB,CAACzC,SAAU,GAAID,UAAW,I,qLAG7B4C,G,8EAClBliB,KAAKgB,SAAS,CACV+gB,WAAW,IAGK,KADhB7O,EAAQlT,KAAKT,MAAMsiB,SACdzf,O,gCACSpC,KAAK0W,YAAYtB,c,OAA/BlC,E,OACAlT,KAAKX,MAAM8iB,UAAUjP,G,OAEnBkP,EAAWF,EAAW3C,SAAW2C,EAAW5C,UAC5C+C,EAASD,EAAWF,EAAW3C,SACrCvf,KAAKgB,SAAS,CACV6gB,QAAS3O,EACT4O,SAAU5O,EAAMoP,MAAMF,EAAUC,GAChCN,WAAW,I,yLAIKQ,G,qEACjBlU,OAAOmU,QAAQ,iD,gCACRxiB,KAAK0W,YAAY+L,cAAcF,G,sIAKzC,IAAMlF,EAAU,CACZ,CACIuB,OAAQ,QACR8D,SAAU,QACV5D,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAM3H,GAAE,gBAAW2H,EAAI+K,SAAStgB,MAAQuV,EAAI+K,SAASrX,SAE3F,CACIsT,OAAQ,aACR8D,SAAU,aAEd,CACI9D,OAAQ,YACR8D,SAAU,YAEd,CACI9D,OAAQ,QACR8D,SAAU,SAEd,CACI9D,OAAQ,UACR8D,SAAU,YAElB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UACd,kBAAC,GAAD,CAAcrhB,UAAU,aACpB,kBAAC,GAAD,CAAO6b,QAASA,EACZlc,KAAMnB,KAAKT,MAAMuiB,SACjBtE,UAAWxd,KAAKT,MAAMsiB,QAAQzf,OAC9Bkb,UAAWtd,KAAKgiB,gBAChB7F,oBAAqBnc,KAAKiiB,kBAC1B5F,UAAU,YAItB,kBAAC,IAAD,CAAOwG,KAAI,kBACP,kBAAC,GAAD,Y,GAjFQtf,aA+FtBiN,GAAqB,CACvB2R,UjBzHG,SAAmBjP,GACxB,MAAO,CACLpM,KCAsB,aDCtBgc,QAAS5P,KiByHExC,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZkS,SAAUnR,EAAMf,QAQiBY,GAA1BE,CAA8CkR,ICxHhDmB,I,OAAb,WAGI,aAAe,yBAFf/N,aAEc,OADdC,iBACc,EACVjV,KAAKgV,QAAU,IAAIlC,EACnB9S,KAAKiV,YAAcvV,IAEnBM,KAAKgjB,WAAahjB,KAAKgjB,WAAWpjB,KAAKI,MACvCA,KAAKqV,QAAUrV,KAAKqV,QAAQzV,KAAKI,MARzC,kMAgByDsF,IAAUC,IAAIvF,KAAKgV,QAAQjC,cAAcO,YAhBlG,cAgBkB9N,EAhBlB,yBAiBmBF,IAAUG,QAAQD,IAjBrC,iOA4ByBhD,GA5BzB,gGA8BuD8C,IAAUC,IAAV,UAAiBvF,KAAKgV,QAAQjC,cAAcO,WAA5C,YAA0D9Q,IA9BjH,cA8BkBgD,EA9BlB,yBA+BmBF,IAAUG,QAAQD,IA/BrC,oOAsC2BqQ,GAtC3B,gGAwC8BvQ,IAAUY,KAAV,UAAkBlG,KAAKgV,QAAQjC,cAAcO,YAAcuC,GAxCzF,cAwCkBrQ,EAxClB,yBAyCmBF,IAAUG,QAAQD,IAzCrC,iOAgDwBqQ,GAhDxB,gGAkD8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcO,YAAcuC,GAlDxF,cAkDkBrQ,EAlDlB,yBAmDmBF,IAAUG,QAAQD,IAnDrC,wOA0D+BqQ,GA1D/B,gGA4D8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcO,WAA5C,aAAmEuC,GA5DjG,cA4DkBrQ,EA5DlB,yBA6DmBF,IAAUG,QAAQD,IA7DrC,wOAoE+BmQ,GApE/B,uFAsEY3V,KAAKiV,YAAY9T,KAAOwU,EAtEpC,SAuE8BrQ,IAAUU,OAAV,UAAoBhG,KAAKgV,QAAQjC,cAAcO,YAActT,KAAKiV,aAvEhG,cAuEkBzP,EAvElB,yBAwEmBF,IAAUG,QAAQD,IAxErC,mK,kBCFayd,GACT,WAAYpN,GAAU,yBAetBxT,SAfqB,OAgBrB6gB,iBAhBqB,OAiBrBC,uBAjBqB,OAkBrBC,cAlBqB,OAmBrBC,gBAnBqB,OAoBrBC,YApBqB,OAqBrBC,gBArBqB,OAsBrBC,cAtBqB,OAwBrBC,eAxBqB,OAyBrBC,iBAzBqB,OA0BrBC,eA1BqB,OA2BrBC,iBA3BqB,EACjB5jB,KAAKqC,IAAMwT,EAAMA,EAAIxT,IAAM,KAC3BrC,KAAKkjB,YAAcrN,EAAMA,EAAIqN,YAAc,GAC3CljB,KAAKmjB,kBAAoBtN,EAAMA,EAAIsN,kBAAoB,GACvDnjB,KAAKojB,SAAWvN,EAAMA,EAAIuN,SAAW,IAAInf,KACzCjE,KAAKqjB,WAAaxN,EAAMA,EAAIwN,WAAa,IAAIpf,KAC7CjE,KAAKsjB,OAASzN,EAAMA,EAAIyN,OAAS,IAAI5f,IACrC1D,KAAKujB,WAAa1N,EAAMA,EAAI0N,WAAa,IAAI3N,EAC7C5V,KAAKwjB,SAAW3N,EAAMA,EAAIgO,QAAU,GAEpC7jB,KAAKyjB,UAAa5N,EAAMA,EAAI4N,UAAY,IAAI7N,EAC5C5V,KAAK0jB,YAAe7N,EAAMA,EAAI6N,YAAa,IAAII,KAC/C9jB,KAAK2jB,UAAa9N,EAAMA,EAAI8N,UAAY,IAAI/N,EAC5C5V,KAAK4jB,YAAe/N,EAAMA,EAAI+N,YAAc,IAAIE,MCN3CC,GAAwC,CACjDhlB,OAAQ,GACRilB,SAAU,IAAIf,GACdgB,cAAc,G,6JCdlB,IAAM5f,GAAenF,IAAOoF,IAAV,MAQL4f,GAAb,uKAGQ,OACIlkB,KAAKX,MAAM8kB,cAEP,yBAAKpb,MAAO/I,KAAKX,MAAM8kB,gBAIvB,kBAAC,GAAD,UAVhB,GAA+B7gB,IAAMC,WCExB6gB,I,qBAAsC,CAC/CZ,SAAU,GACVa,WAAY,KCZHC,GACT,WAAYzO,GAAW,yBAMvB9T,YANsB,OAOtB8hB,aAPsB,OAQtBU,iBARsB,OAStBC,iBATsB,EAClBxkB,KAAK+B,OAAS8T,EAAMA,EAAI9T,OAAS,KACjC/B,KAAK6jB,QAAUhO,EAAMA,EAAIgO,QAAU,KACnC7jB,KAAKukB,YAAc1O,EAAMA,EAAI0O,YAAc,KAC3CvkB,KAAKwkB,YAAc3O,EAAMA,EAAI2O,YAAc,M,o1BCFnD,IAAMC,GAAUvlB,IAAOoF,IAAV,MAGPogB,GAAWxlB,IAAOoF,IAAV,MAGRD,GAAenF,IAAOoF,IAAV,MAGZqgB,GAAezlB,IAAOgO,OAAV,MASZ0X,GAAuB1lB,IAAOoF,IAAV,MAMpBugB,GAAa3lB,IAAOoF,IAAV,MAMHwgB,GAAb,kDACI,WAAYzlB,GAAsB,IAAD,8BAC7B,cAAMA,IAEDE,MAAQ6kB,GACb,EAAKja,aAAe,EAAKA,aAAavK,KAAlB,gBACpB,EAAKmlB,oBAAsB,EAAKA,oBAAoBnlB,KAAzB,gBAC3B,EAAKolB,mBAAqB,EAAKA,mBAAmBplB,KAAxB,gBANG,EADrC,gEAWWI,KAAKX,MAAMmkB,UACVxjB,KAAKgB,SAAS,CACVwiB,SAAUxjB,KAAKX,MAAMmkB,aAbrC,mCAsBiB7Y,GACT3K,KAAKgB,SAAS,CACVqjB,WAAY1Z,EAAE5I,OAAOC,UAxBjC,4CA+B2B,IAAD,OACd2W,EAAU,IAAImL,KACdN,EAAWxjB,KAAKT,MAAMikB,SACtBa,EAAa,IAAIC,GAAQ,CACzBC,YAAavkB,KAAKX,MAAM4lB,UACxBpB,QAAS7jB,KAAKT,MAAM8kB,WACpBG,YAAa7L,EAAQuM,gBAEzB1B,EAASziB,KAAKsjB,GACdrkB,KAAKgB,SAAS,CACVwiB,SAAUA,EACVa,WAAY,KACb,WACC,EAAKhlB,MAAM8lB,gBAAgB,EAAK5lB,YA5C5C,2CAoDQ,IAAI+B,EAMJ,OALGtB,KAAKT,MAAMikB,SAASphB,OAAS,IAC5Bd,EACI,4CAAkBtB,KAAKT,MAAMikB,SAASphB,OAAtC,OAGDd,IA1Df,2CAiEyBuiB,GACjB,OACI,yBAAKuB,wBAAyB,CAACC,OAAQxB,OAnEnD,+BAuEc,IAAD,OACL,OACI,kBAAC,GAAD,KACI,yBAAKriB,UAAU,eACX,qCAAU,8BAAUQ,MAAOhC,KAAKT,MAAM8kB,WAAY5iB,SAAUzB,KAAKmK,aAAc3I,UAAU,eAAe0K,KAAM,KAC9G,kBAAC0Y,GAAD,KACI,kBAACD,GAAD,CAAczU,QAASlQ,KAAK+kB,qBAA5B,UAGR,yBAAKvjB,UAAU,gBAEPxB,KAAKglB,qBAGLhlB,KAAKT,MAAMikB,SAASlB,MAAM,GAAGgD,UAAUziB,KAAI,SAAC0iB,EAAKliB,GAAN,OACvC,kBAACwhB,GAAD,CAAYrjB,UAAU,UAAUyB,IAAKI,GACjC,kBAACuhB,GAAD,CAAsBpjB,UAAU,kBAC5B,kBAACijB,GAAD,CAASjjB,UAAU,gBAAnB,UAEO+jB,EAAIhB,YAAYxU,UAFvB,YAEoCwV,EAAIhB,YAAYvU,WAGpD,kBAAC0U,GAAD,CAAUljB,UAAU,gBAEZ+jB,EAAIf,cAIhB,yBAAKhjB,UAAU,mBAEP,EAAKgkB,qBAAqBD,EAAI1B,oBArGtE,GAAgCvgB,IAAMC,WCnCzBkiB,GAAb,oHAOgC5gB,EAAY6gB,GACpC,IACIC,EAAO9gB,EAAK+gB,cACZpY,EAAQ3I,EAAKghB,WAAa,EAC1BC,EAAMjhB,EAAKkhB,UACXC,EAAOnhB,EAAKohB,WACZC,EAASrhB,EAAKshB,aACdC,EAASvhB,EAAKwhB,aAOlB,OANSX,EAAOY,QAAQ,OAAQX,EAAKrjB,YAChCgkB,QAAQ,KAAMtmB,KAAKumB,oBAAoB/Y,IACvC8Y,QAAQ,KAAMtmB,KAAKumB,oBAAoBT,IACvCQ,QAAQ,KAAMtmB,KAAKumB,oBAAoBP,IACvCM,QAAQ,MAAOtmB,KAAKumB,oBAAoBL,IACxCI,QAAQ,KAAMtmB,KAAKumB,oBAAoBH,MApBpD,0CA4BwB3Y,GAGhB,OADSA,EAAS,GAAM,IAAMA,EAAOnL,WAAcmL,EAAOnL,aA9BlE,uCAuCwBkkB,EAAYC,GAK5B,IAJA,IAAInlB,GAAkB,EAElBolB,EAA6B,GAC7BC,EAA6B,GACjC,MAAyBzjB,OAAO0jB,QAAQJ,GAAxC,eAAkD,CAAC,IAAD,uBAAxCvjB,EAAwC,KAAnCjB,EAAmC,KAC9C0kB,EAAKzjB,GAAOjB,EAEhB,cAAyBkB,OAAO0jB,QAAQH,GAAxC,eAAkD,CAAC,IAAD,uBAAxCxjB,EAAwC,KAAnCjB,EAAmC,KAC9C2kB,EAAK1jB,GAAOjB,EAGhB,IAAK,IAAIpB,KAAK8lB,EACV,GAAIjmB,KAAKE,UAAU+lB,EAAK9lB,MAAQH,KAAKE,UAAUgmB,EAAK/lB,IAAK,CACrDU,GAAS,EACT,MAGR,OAAOA,MAzDf,K,mOCqBA,IAAM+C,GAAenF,IAAOoF,IAAV,MAQZuiB,GAAwC,CAC1C1d,MAAO,MACP8I,QAAS,eACTM,UAAW,QACXrJ,aAAc,QAEZ4d,GAAyC,CAC3C3d,MAAO,MACP8I,QAAS,eACTM,UAAW,OACXgJ,YAAa,QAEXwL,GAA0C,CAC5CxU,UAAW,OACXgJ,YAAa,QAEXyL,GAA6C,CAC/Cnd,OAAQ,OACRod,WAAY,OACZC,aAAc,uBACd/d,MAAO,OAELge,GAAuC,CACzC5U,UAAW,SACXgJ,YAAa,QAEX6L,G,kDAKF,WAAY/nB,GAAuB,IAAD,8BAC9B,cAAMA,IALV+F,YAIkC,IAHlCiiB,qBAGkC,IAFlCtd,gBAEkC,IADlCud,mBACkC,EAG9B,EAAK/nB,MAAQwkB,GACb,EAAKha,WAAa,IAAItD,aACtB,EAAKrB,OAAS,IAAI0N,EAClB,EAAKuU,gBAAkB,IAAItE,GAC3B,EAAKuE,cAAgB,IAAI7B,GAEzB,EAAK9O,YAAc,EAAKA,YAAY/W,KAAjB,gBACnB,EAAKgX,aAAe,EAAKA,aAAahX,KAAlB,gBACpB,EAAKmlB,oBAAsB,EAAKA,oBAAoBnlB,KAAzB,gBAC3B,EAAK2nB,iBAAmB,EAAKA,iBAAiB3nB,KAAtB,gBACxB,EAAK4nB,oBAAsB,EAAKA,oBAAoB5nB,KAAzB,gBAC3B,EAAK6nB,mBAAqB,EAAKA,mBAAmB7nB,KAAxB,gBAdI,E,mLAmBX,cADFI,KAAKX,MAAMmP,MAAMnF,OAAjB,W,gCAEQrJ,KAAKqnB,gBAAgBhS,QAAQrV,KAAKX,MAAMmP,MAAMnF,OAAjB,Y,OAA9C2a,E,OACJhkB,KAAKgB,SAAS,CACVgjB,SAAUA,EACVC,cAAc,I,kLASPpN,G,yFAEXmN,EAAWhkB,KAAKwnB,oBAAoB3Q,IAEpC7W,KAAKT,MAAM0kB,a,gCACCjkB,KAAKqnB,gBAAgBK,OAAO1D,G,OAAxCxe,E,8CAGYxF,KAAKqnB,gBAAgBM,UAAU3D,G,OAA3Cxe,E,eAIoB,MADpBoiB,EAAkB5nB,KAAKynB,mBAAmBzD,MAEtC6D,EAAa7nB,KAAKT,MAAM0kB,aAAeD,EAAS3hB,IAAMmD,EAEtDsiB,EAAW,IAAIxD,GAAQ,CACvBviB,OAAQ8lB,EACRhE,QAAS+D,EACTrD,YAAavkB,KAAKX,MAAM4lB,UACxBT,aAAa,IAAIV,MAAOoB,gBAE5BlB,EAASR,SAASziB,KAAK+mB,GAEvB9nB,KAAKqnB,gBAAgBU,cAAc/D,EAASR,UACvCjO,MAAK,SAACjU,GACA,EAAK/B,MAAM0kB,aACV,EAAKjjB,SAAS,CACVgjB,SAAUA,IAId3V,OAAOC,SAAS0Z,QAAO,MAI9BtS,OAAM,SAAC/J,GAEJ7G,QAAQC,IAAI4G,O,iJAUTqY,GACf,IAAI1iB,EAAS,GAiJb,OA/IIb,KAAKE,UAAUX,KAAKT,MAAMykB,YAAcvjB,KAAKE,UAAUqjB,KACnDvjB,KAAKE,UAAUX,KAAKT,MAAMykB,SAASd,eAAiBziB,KAAKE,UAAUqjB,EAASd,cAC5E5hB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,iBAEJ,yBAAKhe,MAAOoe,IAEJnD,EAASd,aAGjB,kBAAC,GAAD,CAAWiB,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMykB,SAASb,qBAAuB1iB,KAAKE,UAAUqjB,EAASb,oBAClF7hB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,wBAEJ,yBAAKhe,MAAOoe,IAEJnD,EAASb,mBAGjB,kBAAC,GAAD,CAAWgB,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMykB,SAASV,UAAY7iB,KAAKE,UAAUqjB,EAASV,SACvEhiB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,WACA,wCAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACK9C,EAASV,OAAT,UACMU,EAASV,OAAOthB,OACjB,KAId,kBAAC,GAAD,CAAWmiB,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMykB,SAAST,cAAgB9iB,KAAKE,UAAUqjB,EAAST,aAC3EjiB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,gBACA,6CAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACM9C,EAAST,YAAcS,EAAST,WAAWlhB,IAA5C,UACM2hB,EAAST,WAAWxT,UAD1B,YACuCiU,EAAST,WAAWvT,UACtD,KAId,kBAAC,GAAD,CAAWmU,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMykB,SAASZ,YAAc3iB,KAAKE,UAAUqjB,EAASZ,WACzE9hB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,cACA,2CACA,0CAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACK9C,EAASZ,SAASjf,UACfnE,KAAKsnB,cAAca,4BAA4BnE,EAASZ,SAASjf,UAAWnE,KAAKoF,OAAOsP,eAAeC,UACrG,IAGV,6BACKqP,EAASZ,SAAShf,QACfpE,KAAKsnB,cAAca,4BAA4BnE,EAASZ,SAAShf,QAASpE,KAAKoF,OAAOsP,eAAeC,UACnG,KAId,kBAAC,GAAD,CAAWwP,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMykB,SAASX,cAAgB5iB,KAAKE,UAAUqjB,EAASX,aAC3E/hB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,gBACA,2CACA,0CAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACK9C,EAASX,WAAWlf,UACjBnE,KAAKsnB,cAAca,4BAA4BnE,EAASX,WAAWlf,UAAWnE,KAAKoF,OAAOsP,eAAeC,UACvG,IAGV,6BACKqP,EAASX,WAAWjf,QACjBpE,KAAKsnB,cAAca,4BAA4BnE,EAASX,WAAWjf,QAASpE,KAAKoF,OAAOsP,eAAeC,UACrG,KAId,kBAAC,GAAD,CAAWwP,cAAe6C,SAMvC1lB,EAAO0b,KAAK,M,0CAOHnG,GAChB,IAAIuR,EAAapoB,KAAKT,MAAMykB,SACxBqE,EAAU,IAAIpF,GAASpM,EAAK/X,YAOhC,OANAupB,EAAQhmB,IAAM+lB,EAAW/lB,IACzBgmB,EAAQ7E,SAAW4E,EAAW5E,SAC9B6E,EAAQ5E,UAAY2E,EAAW3E,UAC/B4E,EAAQ3E,YAAc0E,EAAW1E,YACjC2E,EAAQ1E,UAAYyE,EAAWzE,UAC/B0E,EAAQzE,YAAcwE,EAAWxE,YAC1ByE,I,0CAOSxR,GAAsB,IAAD,OACjCmN,EAAWhkB,KAAKT,MAAMykB,SAC1BA,EAASR,SAAW3M,EAAK2M,SACzBQ,EAASR,SAASljB,SAAQ,SAACsC,GACvBA,EAAIb,OAASiiB,EAAS3hB,OAEtBrC,KAAKT,MAAM0kB,cACXjkB,KAAKqnB,gBAAgBU,cAAc/D,EAASR,UACvCjO,MAAK,SAACjU,GACH,EAAKN,SAAS,CACVgjB,SAAUA,OAGjBtO,OAAM,SAAC/J,GACJ7G,QAAQC,IAAI4G,Q,kCAShBqY,GAAqB,IAAD,OACxBjN,EAAiC,GACjC/L,EAA+C,IAEnDA,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,4BAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,cACLuG,MAAO,cACPxH,MAAOgiB,EAASd,YAChBlY,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,OAIXhM,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,oCAElB4L,EAAUhW,KAAK,IAAI8F,mBAAiB,CAChC5D,IAAK,oBACLuG,MAAO,qBACPxH,MAAOgiB,EAASb,kBAChBnY,WAAYA,EACZkB,KAAM,EACN8K,MAAO,MAGX,IAAIpT,EAAsB,GAC1BV,OAAOC,KAAKnD,KAAKoF,OAAOkP,gBAAgBhU,SAAQ,SAAC8C,EAAKC,GAClDO,EAAQ7C,KAAK,EAAKqE,OAAOkP,eAAelR,QAE5CQ,EAAUA,EAAQ0kB,MAAK,SAAC7V,EAAG8V,GAAJ,OAAU9V,EAAExP,IAAMslB,EAAEtlB,QACnCulB,QAAQxoB,KAAKoF,OAAOmP,uBAAuBE,OAEnDzJ,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,uBAElB4L,EAAUhW,KAAK,IAAIwF,mBAAiB,CAChCtD,IAAK,SACLuG,MAAO,SACPxH,MAAOgiB,EAASV,OAChBtY,WAAYA,EACZpH,QAASA,EACTrC,WAAW,EACXyV,MAAO,MAIXD,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,aACLuG,MAAO,cACPxH,MAAOgiB,EAAST,WAChBpjB,UAAWH,KAAKoF,OAAO2N,cAAcG,MACrCpS,aAAc,QACdhC,WAAY,CAAC,QAAS,YAAa,YACnCyC,WAAW,EACXyV,MAAO,MAKX,IAAI9S,EAAY8f,EAASZ,SA0BzB,OAzBAlf,EAAUC,UAAYD,EAAUC,UAAY,IAAI2f,KAAK5f,EAAUC,gBAAaS,EAC5EV,EAAUE,QAAUF,EAAUE,QAAU,IAAI0f,KAAK5f,EAAUE,cAAWQ,GACtEoG,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,0BAElB4L,EAAUhW,KAAK,IAAImG,oBAAkB,CACjCjE,IAAK,WACLuG,MAAO,OACPxH,MAAOkC,EACP8G,WAAYA,EACZgM,MAAO,OAIX9S,EAAY8f,EAASX,YACXlf,UAAYD,EAAUC,UAAY,IAAI2f,KAAK5f,EAAUC,gBAAaS,EAC5EV,EAAUE,QAAUF,EAAUE,QAAU,IAAI0f,KAAK5f,EAAUE,cAAWQ,EACtEmS,EAAUhW,KAAK,IAAImG,oBAAkB,CACjCjE,IAAK,aACLuG,MAAO,SACPxH,MAAOkC,EACP8S,MAAO,MAEJD,I,yCAOP,IAAIzV,EAWJ,OAVItB,KAAKT,MAAM0kB,eACX3iB,EACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAY2jB,UAAWjlB,KAAKX,MAAM4lB,UAC9BzB,SAAUxjB,KAAKT,MAAMykB,SAASR,SAC9B2B,gBAAiBnlB,KAAK+kB,wBAI/BzjB,I,+BAIP,IAAIyV,EAAY/W,KAAK2W,YAAY3W,KAAKT,MAAMykB,UAC5C,OACI,kBAAC,GAAD,KACI,kBAACla,EAAA,YAAD,CAAaU,WAAYuM,EAAW1K,iBAAkBrM,KAAK4W,eAEvD5W,KAAKunB,wB,GA9YOjkB,IAAMC,WAqZvB0T,eAAWmQ,I,8GCjb1B,IAAM/iB,GAAenF,IAAOoF,IAAV,MAIZmkB,G,kDAIF,WAAYppB,GAAgC,IAAD,8BACvC,cAAMA,IAJVgoB,qBAG2C,IAF3CjiB,YAE2C,IAD3CkiB,mBAC2C,EAGvC,EAAK/nB,MAAQ,CACTmpB,YAAa,GACbC,aAAc,GACd5G,WAAW,EACX6G,mBAAmB,GAEvB,EAAKvB,gBAAkB,IAAItE,GAC3B,EAAKuE,cAAgB,IAAI7B,GACzB,EAAKrgB,OAAS,IAAI0N,EAElB,EAAK+V,oBAAsB,EAAKA,oBAAoBjpB,KAAzB,gBAC3B,EAAKkpB,sBAAwB,EAAKA,sBAAsBlpB,KAA3B,gBAC7B,EAAKmpB,mBAAqB,EAAKA,mBAAmBnpB,KAAxB,gBAC1B,EAAKopB,oBAAsB,EAAKA,oBAAoBppB,KAAzB,gBAhBY,E,iEAoBnCI,KAAKT,MAAMqpB,mBAGX5oB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,gIAYL1G,G,8EACtBliB,KAAKgB,SAAS,CACV+gB,WAAW,IAGW,KADtBzO,EAAatT,KAAKT,MAAMmpB,aACbtmB,O,gCACQpC,KAAKqnB,gBAAgBrE,a,OAAxC1P,E,OACAtT,KAAKX,MAAM4pB,gBAAgB3V,G,OAEzB8O,EAAWF,EAAW3C,SAAW2C,EAAW5C,UAC5C+C,EAASD,EAAWF,EAAW3C,SACrCvf,KAAKgB,SAAS,CACV0nB,YAAapV,EACbqV,aAAcrV,EAAWgP,MAAMF,EAAUC,GACzCN,WAAW,I,6LAQSQ,G,qEACpBlU,OAAOmU,QAAQ,iD,gCACTxiB,KAAKqnB,gBAAgB5E,cAAcF,G,OACzClU,OAAOC,SAAS0Z,S,kJAQpBhoB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,4CAQvB,GAAI5oB,KAAKT,MAAMqpB,kBACX,OACI,kBAAC,IAAD,CAAU7nB,MAAM,EAAMkP,GAAG,uC,+BAK3B,IAAD,OACCoN,EAAU,CACZ,CACIuB,OAAQ,cACRpc,GAAI,cACJkgB,SAAU,cACV5D,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAM3H,GAAE,qBAAgB2H,EAAI+K,SAAStgB,MAAQuV,EAAI+K,SAASO,eAEhG,CACItE,OAAQ,sBACRpc,GAAI,oBACJkgB,SAAU,qBAEd,CACI9D,OAAQ,YACRpc,GAAI,WACJ6a,QAAS,CACL,CACIuB,OAAQ,aACRpc,GAAI,gBACJkgB,SAAU,SAAC9K,GACP,IAAItW,EAAS,GACb,GAAIsW,EAAIwL,UAAYxL,EAAIwL,SAASjf,UAAW,CACxC,IAAIue,EAAW,IAAIoB,KAAKlM,EAAIwL,SAASjf,WACrC7C,EAAS,EAAKgmB,cAAca,4BAA4BzF,EAAU,EAAKtd,OAAOsP,eAAeC,UAEjG,OAAOrT,IAGf,CACIsd,OAAQ,WACRpc,GAAI,cACJkgB,SAAU,SAAC9K,GACP,IAAItW,EAAS,GACb,GAAIsW,EAAIwL,UAAYxL,EAAIwL,SAAShf,QAAS,CACtC,IAAIse,EAAW,IAAIoB,KAAKlM,EAAIwL,SAAShf,SACrC9C,EAAS,EAAKgmB,cAAca,4BAA4BzF,EAAU,EAAKtd,OAAOsP,eAAeC,UAEjG,OAAOrT,MAKvB,CACIsd,OAAQ,cACRpc,GAAI,aACJ6a,QAAS,CACL,CACIuB,OAAQ,aACRpc,GAAI,kBACJkgB,SAAU,SAAC9K,GACP,IAAItW,EAAS,GACb,GAAIsW,EAAIyL,YAAczL,EAAIyL,WAAWlf,UAAW,CAC5C,IAAIue,EAAW,IAAIoB,KAAKlM,EAAIyL,WAAWlf,WACvC7C,EAAS,EAAKgmB,cAAca,4BAA4BzF,EAAU,EAAKtd,OAAOsP,eAAeC,UAEjG,OAAOrT,IAGf,CACIsd,OAAQ,WACRpc,GAAI,gBACJkgB,SAAU,SAAC9K,GACP,IAAItW,EAAS,GACb,GAAIsW,EAAIyL,YAAczL,EAAIyL,WAAWjf,QAAS,CAC1C,IAAIse,EAAW,IAAIoB,KAAKlM,EAAIyL,WAAWjf,SACvC9C,EAAS,EAAKgmB,cAAca,4BAA4BzF,EAAU,EAAKtd,OAAOsP,eAAeC,UAEjG,OAAOrT,MAKvB,CACIsd,OAAQ,SACRpc,GAAI,SAEJ0b,OAAQzG,GACR9U,OAAQ,WACR+f,SAAU,SAAC9K,GACP,IAAItW,EAAS,GAIb,OAHIsW,EAAI0L,SACJhiB,EAASsW,EAAI0L,OAAOthB,OAEjBV,IAGf,CACIsd,OAAQ,cACRpc,GAAI,aACJkgB,SAAU,SAAC9K,GAAD,OAAmBA,EAAI2L,WAAJ,UAAoB3L,EAAI2L,WAAWxT,UAAnC,YAAgD6H,EAAI2L,WAAWvT,UAAa,MAGjH,OACI,6BAEQhQ,KAAKgpB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpG,OAAK,EAACC,KAAK,0BACd,kBAAC,GAAD,CAAcrhB,UAAU,iBACpB,kBAAC,GAAD,CAAO6b,QAASA,EACZlc,KAAMnB,KAAKT,MAAMopB,aACjBnL,UAAWxd,KAAKT,MAAMmpB,YAAYtmB,OAClCkb,UAAWtd,KAAK6oB,oBAChB1M,oBAAqBnc,KAAK8oB,sBAC1B1M,iBAAkBpc,KAAK+oB,mBACvB1M,UAAU,iBAItB,kBAAC,IAAD,CAAOwG,KAAI,sCACP,kBAAC,GAAD,CAAmBoC,UAAWjlB,KAAKX,MAAMuQ,KAAKgB,qB,GAzMtCrN,aAwN1BiN,GAAqB,CACvByY,gBCrPG,SAAyBC,GAC9B,MAAO,CACLpiB,KCF4B,mBDG5Bgc,QAASoG,KDqPExY,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZ+Y,aAAchY,EAAM2C,cAQa9C,GAA1BE,CAA8C+X,IG5OhDU,GAAgC,CAC5C7d,MAAO,GACPoC,SAAU,GACV0b,YAAY,EACZpqB,qBAAqB,EACrBqqB,wBAAwB,EACxBC,sBAAsB,G,koBChBvB,IAAMxX,GAAY5S,IAAOoF,IAAV,MAKTyN,GAAW7S,IAAOoF,IAAV,MAORilB,GAAUrqB,IAAOoF,IAAV,MAGPsF,GAA+B,CACjCC,OAAQ,GAENyI,GAAkC,CACpCC,UAAW,UAETC,GAAQtT,IAAOuT,EAAV,MAGU+W,G,kDACjB,WAAYnqB,GAAoB,IAAD,8BAC3B,cAAMA,IAEDE,MAAQ4pB,GACb,EAAKhf,aAAe,EAAKA,aAAavK,KAAlB,gBACpB,EAAK6pB,oBAAsB,EAAKA,oBAAoB7pB,KAAzB,gBAC3B,EAAK8pB,qBAAuB,EAAKA,qBAAqB9pB,KAA1B,gBAC5B,EAAK+pB,mBAAqB,EAAKA,mBAAmB/pB,KAAxB,gBAPC,E,yDAclBgC,GAAa,IAAD,OACrB5B,KAAKgB,SAAL,eACKY,EAAMG,OAAO8I,KAAOjJ,EAAMG,OAAOC,QACnC,WACC,IAAIyI,EAAgC,KAArB,EAAKlL,MAAM+L,OAAwC,KAAxB,EAAK/L,MAAMmO,SACrD,EAAK1M,SAAS,CACVhC,oBAAqByL,S,0CASb7I,GAChB5B,KAAKgB,SAAL,eACKY,EAAMG,OAAO8I,KAAOjJ,EAAMG,OAAOkH,Y,6CAQtCjJ,KAAKgB,SAAS,CACVqoB,wBAAwB,M,2CAQ5BrpB,KAAKgB,SAAS,CACVsoB,sBAAsB,M,+BAIpB,IAAD,OAEL,OAAGtpB,KAAKT,MAAM8pB,uBACH,kBAAC,IAAD,CAAUtoB,MAAM,EAAMkP,GAAIjQ,KAAKX,MAAMuqB,6BAG7C5pB,KAAKT,MAAM+pB,qBACH,kBAAC,IAAD,CAAUvoB,MAAM,EAAMkP,GAAIjQ,KAAKX,MAAMwqB,2BAI5C,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,0BAAMzd,SAAU,SAACzB,GAAOA,EAAE9I,iBAAkB,EAAKxC,MAAMyqB,QAAQ,EAAKvqB,SAChE,wBAAIwJ,MAAOuJ,IAAX,SAEA,yBAAK9Q,UAAU,cACX,+BAAO,kDACP,2BAAOqJ,KAAK,QACR/D,KAAK,QACLrF,SAAUzB,KAAKmK,aACf3I,UAAU,eACVE,YAAY,iBAGpB,yBAAKF,UAAU,cACX,+BAAO,6CACP,2BAAOqJ,KAAK,WACR/D,KAAK,WACLrF,SAAUzB,KAAKmK,aACf3I,UAAU,eACVE,YAAY,oBAGpB,yBAAKF,UAAU,cACX,yBAAKA,UAAU,kCACX,2BAAOqJ,KAAK,aACR/D,KAAK,WACLtF,UAAU,uBACV0O,QAASlQ,KAAKypB,oBACdjnB,GAAG,iBACP,2BAAOhB,UAAU,uBAAuBqK,QAAQ,gBAC5C,kDAKZ,2BAAO9C,MAAOa,GACV9C,KAAK,SACL9E,MAAM,SACNR,UAAU,4BACViJ,SAAUzK,KAAKT,MAAMP,sBAEzB,kBAACuqB,GAAD,KACI,uBAAG/nB,UAAU,cACT,kBAAC,GAAD,CAAOA,UAAU,WAAW0O,QAASlQ,KAAK2pB,oBAA1C,YAEJ,uBAAGnoB,UAAU,eAAb,UACW,kBAAC,GAAD,CAAO0O,QAASlQ,KAAK0pB,sBAArB,sB,GAhHJnmB,aCtBtBwmB,GAAb,WAGI,aAAe,yBAFf/U,aAEc,OADdC,iBACc,EACVjV,KAAKgV,QAAU,IAAIlC,EACnB9S,KAAKiV,YAAcvV,IAEnBM,KAAKgjB,WAAahjB,KAAKgjB,WAAWpjB,KAAKI,MACvCA,KAAKqV,QAAUrV,KAAKqV,QAAQzV,KAAKI,MARzC,kMAgB8DsF,IAAUC,IAAIvF,KAAKgV,QAAQjC,cAAcQ,gBAhBvG,cAgBkB/N,EAhBlB,yBAiBmBF,IAAUG,QAAQD,IAjBrC,iOA4ByBhD,GA5BzB,gGA8B4D8C,IAAUC,IAAV,UAAiBvF,KAAKgV,QAAQjC,cAAcQ,eAA5C,YAA8D/Q,IA9B1H,cA8BkBgD,EA9BlB,yBA+BmBF,IAAUG,QAAQD,IA/BrC,oOAsC2BqQ,GAtC3B,gGAwC8BvQ,IAAUY,KAAV,UAAkBlG,KAAKgV,QAAQjC,cAAcQ,gBAAkBsC,GAxC7F,cAwCkBrQ,EAxClB,yBAyCmBF,IAAUG,QAAQD,IAzCrC,iOAgDwBqQ,GAhDxB,gGAkD8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcQ,gBAAkBsC,GAlD5F,cAkDkBrQ,EAlDlB,yBAmDmBF,IAAUG,QAAQD,IAnDrC,wOA0D+BqQ,GA1D/B,gGA4D8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcQ,eAA5C,aAAuEsC,GA5DrG,cA4DkBrQ,EA5DlB,yBA6DmBF,IAAUG,QAAQD,IA7DrC,wOAoE+BmQ,GApE/B,uFAsEY3V,KAAKiV,YAAY9T,KAAOwU,EAtEpC,SAuE8BrQ,IAAUU,OAAV,UAAoBhG,KAAKgV,QAAQjC,cAAcQ,gBAAkBvT,KAAKiV,aAvEpG,cAuEkBzP,EAvElB,yBAwEmBF,IAAUG,QAAQD,IAxErC,kKCLawkB,GACT,WAAYnU,GAAU,yBAWtBxT,SAXqB,OAYrBwI,UAZqB,OAarBof,WAbqB,OAcrBzG,cAdqB,OAgBrBC,eAhBqB,OAiBrBC,iBAjBqB,OAkBrBC,eAlBqB,OAmBrBC,iBAnBqB,EACjB5jB,KAAKqC,IAAMwT,EAAMA,EAAIxT,IAAM,KAC3BrC,KAAK6K,KAAOgL,EAAMA,EAAIhL,KAAO,GAC7B7K,KAAKiqB,MAAQpU,EAAMA,EAAIoU,MAAQ,IAAIrU,EACnC5V,KAAKwjB,SAAW3N,EAAMA,EAAIgO,QAAU,GAEpC7jB,KAAKyjB,UAAa5N,EAAMA,EAAI4N,UAAY,IAAI7N,EAC5C5V,KAAK0jB,YAAe7N,EAAMA,EAAI6N,YAAa,IAAII,KAC/C9jB,KAAK2jB,UAAa9N,EAAMA,EAAI8N,UAAY,IAAI/N,EAC5C5V,KAAK4jB,YAAe/N,EAAMA,EAAI+N,YAAc,IAAIE,MCC3CoG,GAAkD,CAC3DnrB,OAAQ,GACRorB,cAAe,IAAIH,GACnB/F,cAAc,G,+MCGlB,IAAM5f,GAAenF,IAAOoF,IAAV,MAQZuiB,GAAwC,CAC1C1d,MAAO,MACP8I,QAAS,eACTM,UAAW,QACXrJ,aAAc,QAEZ4d,GAAyC,CAC3C3d,MAAO,MACP8I,QAAS,eACTM,UAAW,OACXgJ,YAAa,QAEXwL,GAA0C,CAC5CxU,UAAW,OACXgJ,YAAa,QAEXyL,GAA6C,CAC/Cnd,OAAQ,OACRod,WAAY,OACZC,aAAc,uBACd/d,MAAO,OAELge,GAAuC,CACzC5U,UAAW,SACXgJ,YAAa,QAEX6O,G,kDAKF,WAAY/qB,GAA4B,IAAD,8BACnC,cAAMA,IALV+F,YAIuC,IAHvCilB,0BAGuC,IAFvCtgB,gBAEuC,IADvCud,mBACuC,EAGnC,EAAK/nB,MAAQ2qB,GACb,EAAKngB,WAAa,IAAItD,aACtB,EAAKrB,OAAS,IAAI0N,EAClB,EAAKuX,qBAAuB,IAAIN,GAChC,EAAKzC,cAAgB,IAAI7B,GAEzB,EAAK9O,YAAc,EAAKA,YAAY/W,KAAjB,gBACnB,EAAKgX,aAAe,EAAKA,aAAahX,KAAlB,gBACpB,EAAKmlB,oBAAsB,EAAKA,oBAAoBnlB,KAAzB,gBAC3B,EAAK2nB,iBAAmB,EAAKA,iBAAiB3nB,KAAtB,gBACxB,EAAK4nB,oBAAsB,EAAKA,oBAAoB5nB,KAAzB,gBAC3B,EAAK0qB,wBAA0B,EAAKA,wBAAwB1qB,KAA7B,gBAdI,E,mLAmBX,cADFI,KAAKX,MAAMmP,MAAMnF,OAAjB,gB,gCAEQrJ,KAAKqqB,qBAAqBhV,QAAQrV,KAAKX,MAAMmP,MAAMnF,OAAjB,iB,OAAxD8gB,E,OACJnqB,KAAKgB,SAAS,CACVmpB,cAAeA,EACflG,cAAc,I,kLASPpN,G,yFAEXsT,EAAgBnqB,KAAKwnB,oBAAoB3Q,IAEzC7W,KAAKT,MAAM0kB,a,gCACCjkB,KAAKqqB,qBAAqB3C,OAAOyC,G,OAA7C3kB,E,8CAGYxF,KAAKqqB,qBAAqB1C,UAAUwC,G,OAAhD3kB,E,eAIyB,MADzB+kB,EAAuBvqB,KAAKsqB,wBAAwBH,MAEhDK,EAAkBxqB,KAAKT,MAAM0kB,aAAekG,EAAc9nB,IAAMmD,EAEhEsiB,EAAW,IAAIxD,GAAQ,CACvBviB,OAAQyoB,EACR3G,QAAS0G,EACThG,YAAavkB,KAAKX,MAAM4lB,UACxBT,aAAa,IAAIV,MAAOoB,gBAE5BiF,EAAc3G,SAASziB,KAAK+mB,GAE5B9nB,KAAKqqB,qBAAqBtC,cAAcoC,EAAc3G,UACjDjO,MAAK,SAACjU,GACA,EAAK/B,MAAM0kB,aACV,EAAKjjB,SAAS,CACVmpB,cAAeA,IAInB9b,OAAOC,SAAS0Z,QAAO,MAI9BtS,OAAM,SAAC/J,GAEJ7G,QAAQC,IAAI4G,O,sJAUJwe,GACpB,IAAI7oB,EAAS,GA4Cb,OA1CIb,KAAKE,UAAUX,KAAKT,MAAM4qB,iBAAmB1pB,KAAKE,UAAUwpB,KACxD1pB,KAAKE,UAAUX,KAAKT,MAAM4qB,cAActf,QAAUpK,KAAKE,UAAUwpB,EAActf,OAC/EvJ,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,UAEJ,yBAAKhe,MAAOoe,IAEJgD,EAActf,MAGtB,kBAAC,GAAD,CAAWsZ,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAM4qB,cAAcF,SAAWxpB,KAAKE,UAAUwpB,EAAcF,QAChF3oB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,UACA,uCAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACMqD,EAAcF,OAASE,EAAcF,MAAM5nB,IAA5C,UACM8nB,EAAcF,MAAMla,UAD1B,YACuCoa,EAAcF,MAAMja,UACtD,KAId,kBAAC,GAAD,CAAWmU,cAAe6C,SAMvC1lB,EAAO0b,KAAK,M,0CAOHnG,GAChB,IAAIuR,EAAapoB,KAAKT,MAAM4qB,cACxB9B,EAAU,IAAI2B,GAAcnT,EAAK/X,YAOrC,OANAupB,EAAQhmB,IAAM+lB,EAAW/lB,IACzBgmB,EAAQ7E,SAAW4E,EAAW5E,SAC9B6E,EAAQ5E,UAAY2E,EAAW3E,UAC/B4E,EAAQ3E,YAAc0E,EAAW1E,YACjC2E,EAAQ1E,UAAYyE,EAAWzE,UAC/B0E,EAAQzE,YAAcwE,EAAWxE,YAC1ByE,I,0CAOSxR,GAAsB,IAAD,OACjCsT,EAAgBnqB,KAAKT,MAAM4qB,cAC/BA,EAAc3G,SAAW3M,EAAK2M,SAC9B2G,EAAc3G,SAASljB,SAAQ,SAACsC,GAC5BA,EAAIb,OAASooB,EAAc9nB,OAE3BrC,KAAKT,MAAM0kB,cACXjkB,KAAKqqB,qBAAqBtC,cAAcoC,EAAc3G,UACjDjO,MAAK,SAACjU,GACH,EAAKN,SAAS,CACVmpB,cAAeA,OAGtBzU,OAAM,SAAC/J,GACJ7G,QAAQC,IAAI4G,Q,kCAShBwe,GACR,IAAIpT,EAAiC,GACjC/L,EAA+C,GA4BnD,OA1BAA,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,qBAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,OACLuG,MAAO,OACPxH,MAAOmoB,EAActf,KACrBG,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,OAIXD,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,QACLuG,MAAO,QACPxH,MAAOmoB,EAAcF,MACrB9pB,UAAWH,KAAKoF,OAAO2N,cAAcG,MACrCpS,aAAc,QACdhC,WAAY,CAAC,QAAS,YAAa,YACnCyC,WAAW,EACXyV,MAAO,OAGJD,I,yCAOP,IAAIzV,EAWJ,OAVItB,KAAKT,MAAM0kB,eACX3iB,EACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAY2jB,UAAWjlB,KAAKX,MAAM4lB,UAC9BzB,SAAUxjB,KAAKT,MAAM4qB,cAAc3G,SACnC2B,gBAAiBnlB,KAAK+kB,wBAI/BzjB,I,+BAIP,IAAIyV,EAAY/W,KAAK2W,YAAY3W,KAAKT,MAAM4qB,eAC5C,OACI,kBAAC,GAAD,KACI,kBAACrgB,EAAA,YAAD,CAAaU,WAAYuM,EAAW1K,iBAAkBrM,KAAK4W,eAEvD5W,KAAKunB,wB,GAxOYjkB,IAAMC,WA+O5B0T,eAAWmT,I,8GC3Q1B,IAAM/lB,GAAenF,IAAOoF,IAAV,MAIZmmB,G,kDAIF,WAAYprB,GAAqC,IAAD,8BAC5C,cAAMA,IAJVgrB,0BAGgD,IAFhDjlB,YAEgD,IADhDkiB,mBACgD,EAG5C,EAAK/nB,MAAQ,CACTmrB,iBAAkB,GAClBC,kBAAmB,GACnB5I,WAAW,EACX6G,mBAAmB,GAEvB,EAAKyB,qBAAuB,IAAIN,GAChC,EAAKzC,cAAgB,IAAI7B,GACzB,EAAKrgB,OAAS,IAAI0N,EAElB,EAAK8X,yBAA2B,EAAKA,yBAAyBhrB,KAA9B,gBAChC,EAAKirB,2BAA6B,EAAKA,2BAA2BjrB,KAAhC,gBAClC,EAAKkrB,wBAA0B,EAAKA,wBAAwBlrB,KAA7B,gBAC/B,EAAKopB,oBAAsB,EAAKA,oBAAoBppB,KAAzB,gBAhBiB,E,iEAoBxCI,KAAKT,MAAMqpB,mBAGX5oB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,qIAYA1G,G,8EAC3BliB,KAAKgB,SAAS,CACV+gB,WAAW,IAGe,KAD1BxO,EAAiBvT,KAAKT,MAAMmrB,kBACbtoB,O,gCACQpC,KAAKqqB,qBAAqBrH,a,OAAjDzP,E,OACAvT,KAAKX,MAAM0rB,oBAAoBxX,G,OAE7B6O,EAAWF,EAAW3C,SAAW2C,EAAW5C,UAC5C+C,EAASD,EAAWF,EAAW3C,SACrCvf,KAAKgB,SAAS,CACV0pB,iBAAkBnX,EAClBoX,kBAAmBpX,EAAe+O,MAAMF,EAAUC,GAClDN,WAAW,I,kMAQcQ,G,qEACzBlU,OAAOmU,QAAQ,iD,gCACTxiB,KAAKqqB,qBAAqB5H,cAAcF,G,OAC9ClU,OAAOC,SAAS0Z,S,uJAQpBhoB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,4CAQvB,GAAI5oB,KAAKT,MAAMqpB,kBACX,OACI,kBAAC,IAAD,CAAU7nB,MAAM,EAAMkP,GAAG,2C,+BAMjC,IAAMoN,EAAU,CACZ,CACIuB,OAAQ,OACRpc,GAAI,OACJkgB,SAAU,OACV5D,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAM3H,GAAE,yBAAoB2H,EAAI+K,SAAStgB,MAAQuV,EAAI+K,SAAS9X,QAEpG,CACI+T,OAAQ,QACRpc,GAAI,QACJkgB,SAAU,SAAC9K,GAAD,OAAwBA,EAAIqS,MAAJ,UAAerS,EAAIqS,MAAMla,UAAzB,YAAsC6H,EAAIqS,MAAMja,UAAa,MAGvG,OACI,6BAEQhQ,KAAKgpB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpG,OAAK,EAACC,KAAK,8BACd,kBAAC,GAAD,CAAcrhB,UAAU,sBACpB,kBAAC,GAAD,CAAO6b,QAASA,EACZlc,KAAMnB,KAAKT,MAAMorB,kBACjBnN,UAAWxd,KAAKT,MAAMmrB,iBAAiBtoB,OACvCkb,UAAWtd,KAAK4qB,yBAChBzO,oBAAqBnc,KAAK6qB,2BAC1BzO,iBAAkBpc,KAAK8qB,wBACvBzO,UAAU,sBAItB,kBAAC,IAAD,CAAOwG,KAAI,+CACP,kBAAC,GAAD,CAAwBoC,UAAWjlB,KAAKX,MAAMuQ,KAAKgB,qB,GA1HtCrN,aAyI/BiN,GAAqB,CACvBua,oBCpKG,SAA6B7B,GAClC,MAAO,CACLpiB,KCFiC,wBDGjCgc,QAASoG,KDoKExY,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZ+a,kBAAmBha,EAAM4C,kBAQQ/C,GAA1BE,CAA8C+Z,IGpKhDO,GAAb,WAGI,aAAe,yBAFfhW,aAEc,OADdC,iBACc,EACVjV,KAAKgV,QAAU,IAAIlC,EACnB9S,KAAKiV,YAAcvV,IAEnBM,KAAKgjB,WAAahjB,KAAKgjB,WAAWpjB,KAAKI,MACvCA,KAAKqV,QAAUrV,KAAKqV,QAAQzV,KAAKI,MARzC,kMAgBiEsF,IAAUC,IAAIvF,KAAKgV,QAAQjC,cAAcS,mBAhB1G,cAgBkBhO,EAhBlB,yBAiBmBF,IAAUG,QAAQD,IAjBrC,iOA4ByBhD,GA5BzB,gGA8B+D8C,IAAUC,IAAV,UAAiBvF,KAAKgV,QAAQjC,cAAcS,kBAA5C,YAAiEhR,IA9BhI,cA8BkBgD,EA9BlB,yBA+BmBF,IAAUG,QAAQD,IA/BrC,oOAsC2BqQ,GAtC3B,gGAwC8BvQ,IAAUY,KAAV,UAAkBlG,KAAKgV,QAAQjC,cAAcS,mBAAqBqC,GAxChG,cAwCkBrQ,EAxClB,yBAyCmBF,IAAUG,QAAQD,IAzCrC,iOAgDwBqQ,GAhDxB,gGAkD8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcS,mBAAqBqC,GAlD/F,cAkDkBrQ,EAlDlB,yBAmDmBF,IAAUG,QAAQD,IAnDrC,wOA0D+BmQ,GA1D/B,uFA4DY3V,KAAKiV,YAAY9T,KAAOwU,EA5DpC,SA6D8BrQ,IAAUU,OAAV,UAAoBhG,KAAKgV,QAAQjC,cAAcS,mBAAqBxT,KAAKiV,aA7DvG,cA6DkBzP,EA7DlB,yBA8DmBF,IAAUG,QAAQD,IA9DrC,kKCJaylB,GACT,WAAYpV,GAAU,yBAatBxT,SAbqB,OAcrB6oB,sBAdqB,OAerBf,mBAfqB,OAgBrBgB,cAhBqB,OAiBrBC,cAjBqB,OAkBrBC,aAlBqB,OAoBrB5H,eApBqB,OAqBrBC,iBArBqB,OAsBrBC,eAtBqB,OAuBrBC,iBAvBqB,EACjB5jB,KAAKqC,IAAMwT,EAAMA,EAAIxT,IAAM,KAC3BrC,KAAKkrB,iBAAmBrV,EAAMA,EAAIqV,iBAAmB,GACrDlrB,KAAKmqB,cAAgBtU,EAAMA,EAAIsU,cAAgB,IAAIH,GACnDhqB,KAAKmrB,SAAWtV,EAAMA,EAAIsV,SAAW,GACrCnrB,KAAKorB,SAAWvV,EAAMA,EAAIuV,SAAW,IAAIxV,EACzC5V,KAAKqrB,QAAUxV,EAAMA,EAAIwV,QAAU,EAEnCrrB,KAAKyjB,UAAa5N,EAAMA,EAAI4N,UAAY,IAAI7N,EAC5C5V,KAAK0jB,YAAe7N,EAAMA,EAAI6N,YAAa,IAAII,KAC/C9jB,KAAK2jB,UAAa9N,EAAMA,EAAI8N,UAAY,IAAI/N,EAC5C5V,KAAK4jB,YAAe/N,EAAMA,EAAI+N,YAAc,IAAIE,MCD3CwH,GAAwD,CACjEvsB,OAAQ,GACRwsB,iBAAkB,IAAIN,GACtBhH,cAAc,G,yVCZlB,IAAM5f,GAAenF,IAAOoF,IAAV,MAQZknB,GAAuBtsB,IAAOoF,IAAV,MAIpBmnB,GAAqC,CACvCpc,OAAQ,OACRlG,MAAO,OACPuiB,WAAY,IACZzjB,SAAU,QACViK,aAAc,SACdnD,OAAQ,+BACRsD,QAAS,cAKAsZ,GAAb,4KACkB7kB,GACV,OAAQA,GACJ,IAAK,MACD,IAAI8kB,EAAcvd,OAAOwd,KAAK,GAAI,IAC9BD,IACAA,EAAYE,SAASC,MAAM,+BAC3BH,EAAYE,SAASC,MAAM,kBAC3BH,EAAYE,SAASC,MAAM/rB,KAAKX,MAAM8rB,UACtCS,EAAYE,SAASC,MAAM,kBAC3BH,EAAYE,SAASE,QACrBJ,EAAYK,YAXhC,+BAwBc,IAAD,OACL,OACI,kBAAC,GAAD,KACI,kBAACT,GAAD,KACI,kBAAC3nB,GAAA,EAAD,CAAUrC,UAAU,eAChB,kBAACqC,GAAA,EAASqoB,OAAV,CAAiB3iB,QAAQ,UAAU/G,GAAG,iBAAiBuG,MAAO0iB,IAA9D,YAGA,kBAAC5nB,GAAA,EAASsoB,KAAV,KACI,kBAACtoB,GAAA,EAASb,KAAV,CAAekN,QAAS,kBAAM,EAAKkc,cAAc,SAAjD,OACA,kBAACvoB,GAAA,EAASb,KAAV,CAAekN,QAAS,kBAAM,EAAKkc,cAAc,SAAjD,OACA,kBAACvoB,GAAA,EAASb,KAAV,CAAekN,QAAS,kBAAM,EAAKkc,cAAc,UAAjD,WAIZ,yBAAK5pB,GAAG,WAAWuG,MAAO,CAAEsjB,WAAY,SAAWjH,wBAAyB,CAAEC,OAAQrlB,KAAKX,MAAM8rB,iBAvCjH,GAAoC7nB,IAAMC,W,sUCZ1C,IAAMc,GAAenF,IAAOoF,IAAV,MAQZgoB,GAAsBptB,IAAOoF,IAAV,MAInBioB,G,kDAKF,WAAYltB,GAA+B,IAAD,8BACtC,cAAMA,IALV+F,YAI0C,IAH1ConB,6BAG0C,IAF1CziB,gBAE0C,IAD1Cud,mBAC0C,EAGtC,EAAK/nB,MAAQ+rB,GACb,EAAKvhB,WAAa,IAAItD,aACtB,EAAKrB,OAAS,IAAI0N,EAClB,EAAK0Z,wBAA0B,IAAIxB,GACnC,EAAK1D,cAAgB,IAAI7B,GAEzB,EAAK9O,YAAc,EAAKA,YAAY/W,KAAjB,gBACnB,EAAKgX,aAAe,EAAKA,aAAahX,KAAlB,gBACpB,EAAK4nB,oBAAsB,EAAKA,oBAAoB5nB,KAAzB,gBAXW,E,mLAgBX,cADFI,KAAKX,MAAMmP,MAAMnF,OAAjB,mB,gCAEQrJ,KAAKwsB,wBAAwBnX,QAAQrV,KAAKX,MAAMmP,MAAMnF,OAAjB,oB,OAA9DkiB,E,OACJvrB,KAAKgB,SAAS,CACVuqB,iBAAkBA,EAClBtH,cAAc,I,yIASbpN,GAA0B,IAAD,OAE9B0U,EAAmBvrB,KAAKwnB,oBAAoB3Q,GAC5C7W,KAAKT,MAAM0kB,aACXjkB,KAAKwsB,wBAAwB9E,OAAO6D,GAC/BhW,MAAK,SAACjU,OAGNoU,OAAM,SAAC/J,GAEJ7G,QAAQC,IAAI4G,MAIpB3L,KAAKwsB,wBAAwB7E,UAAU4D,GAClChW,MAAK,SAACjU,GACC,EAAK/B,MAAM0kB,aACX,EAAKjjB,SAAS,CACVuqB,iBAAkBA,IAItBld,OAAOC,SAAS0Z,QAAO,MAI9BtS,OAAM,SAAC/J,GAEJ7G,QAAQC,IAAI4G,Q,0CASRkL,GAChB,IAAIuR,EAAapoB,KAAKT,MAAMgsB,iBACxBlD,EAAU,IAAI4C,GAAiBpU,EAAK/X,YAMxC,OALAupB,EAAQhmB,IAAM+lB,EAAW/lB,IACzBgmB,EAAQ5E,UAAY2E,EAAW3E,UAC/B4E,EAAQ3E,YAAc0E,EAAW1E,YACjC2E,EAAQ1E,UAAYyE,EAAWzE,UAC/B0E,EAAQzE,YAAcwE,EAAWxE,YAC1ByE,I,kCAOCkD,GACR,IAAIxU,EAAiC,GACjC/L,EAA+C,GA4DnD,OA1DAA,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,kCAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,mBACLuG,MAAO,oBACPxH,MAAOupB,EAAiBL,iBACxBlgB,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,QAIXhM,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,+BAElB4L,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,gBACLuG,MAAO,iBACPxH,MAAOupB,EAAiBpB,cACxBnf,WAAYA,EACZ7K,UAAWH,KAAKoF,OAAO2N,cAAcQ,eACrCzS,aAAc,OACdhC,WAAY,CAAC,QACbyC,WAAW,EACXyV,MAAO,QAIXhM,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,yBAElB4L,EAAUhW,KAAK,IAAIsG,mBAAiB,CAChCpE,IAAK,WACLuG,MAAO,WACPxH,MAAOupB,EAAiBJ,SACxBngB,WAAYA,EACZgM,MAAO,OAIXD,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,WACLuG,MAAO,WACPxH,MAAOupB,EAAiBH,SACxBjrB,UAAWH,KAAKoF,OAAO2N,cAAcG,MACrCpS,aAAc,QACdhC,WAAY,CAAC,QAAS,YAAa,YACnCyC,WAAW,EACXyV,MAAO,OAGJD,I,+BAIP,IAAIA,EAAY/W,KAAK2W,YAAY3W,KAAKT,MAAMgsB,kBAC5C,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO3I,OAAK,EAACC,KAAI,qDACb,kBAAC,GAAD,KAEQ7iB,KAAKT,MAAM0kB,aAEH,kBAACqI,GAAD,KACI,kBAACG,GAAA,EAAD,CAAQjrB,UAAU,cAAc+H,QAAQ,YAAYG,MAAM,WACtD,kBAAC,IAAD,CAAMuG,GAAE,UAAKjQ,KAAKT,MAAMgsB,iBAAiBlpB,IAAjC,YAAgD0G,MAAO,CAACW,MAAO,UAAvE,aAKX,GAET,kBAACI,EAAA,YAAD,CAAaU,WAAYuM,EAAW1K,iBAAkBrM,KAAK4W,iBAGnE,kBAAC,IAAD,CAAOiM,KAAI,6DACP,kBAAC,GAAD,CAAgBsI,SAAUnrB,KAAKT,MAAMgsB,iBAAiBJ,kB,GA9KtC7nB,IAAMC,WAuL/B0T,eAAWsV,I,8GC1L1B,IAAMloB,GAAenF,IAAOoF,IAAV,MAGZooB,GAAmC,CACrC3Q,UAAW,OACX4Q,SAAU,UAERC,G,kDAIF,WAAYvtB,GAAwC,IAAD,8BAC/C,cAAMA,IAJVmtB,6BAGmD,IAFnDpnB,YAEmD,IADnDkiB,mBACmD,EAG/C,EAAK/nB,MAAQ,CACTstB,oBAAqB,GACrBC,qBAAsB,GACtB/K,WAAW,EACX6G,mBAAmB,GAEvB,EAAK4D,wBAA0B,IAAIxB,GACnC,EAAK1D,cAAgB,IAAI7B,GACzB,EAAKrgB,OAAS,IAAI0N,EAElB,EAAKia,4BAA8B,EAAKA,4BAA4BntB,KAAjC,gBACnC,EAAKotB,8BAAgC,EAAKA,8BAA8BptB,KAAnC,gBACrC,EAAKqtB,2BAA6B,EAAKA,2BAA2BrtB,KAAhC,gBAClC,EAAKopB,oBAAsB,EAAKA,oBAAoBppB,KAAzB,gBAhBoB,E,iEAoB3CI,KAAKT,MAAMqpB,mBAGX5oB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,wIAYG1G,G,8EAC9BliB,KAAKgB,SAAS,CACV+gB,WAAW,IAGkB,KAD7BvO,EAAoBxT,KAAKT,MAAMstB,qBACbzqB,O,gCACQpC,KAAKwsB,wBAAwBxJ,a,OAAvDxP,E,OACAxT,KAAKX,MAAM6tB,uBAAuB1Z,G,OAEhC4O,EAAWF,EAAW3C,SAAW2C,EAAW5C,UAC5C+C,EAASD,EAAWF,EAAW3C,SACrCvf,KAAKgB,SAAS,CACV6rB,oBAAqBrZ,EACrBsZ,qBAAsBtZ,EAAkB8O,MAAMF,EAAUC,GACxDN,WAAW,I,qMAQiBQ,G,qEAC5BlU,OAAOmU,QAAQ,iD,gCACTxiB,KAAKwsB,wBAAwB/J,cAAcF,G,OACjDlU,OAAOC,SAAS0Z,S,0JAQpBhoB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,4CAQvB,GAAI5oB,KAAKT,MAAMqpB,kBACX,OACI,kBAAC,IAAD,CAAU7nB,MAAM,EAAMkP,GAAG,8C,+BAMjC,IAAMoN,EAAU,CACZ,CACIuB,OAAQ,oBACRpc,GAAI,mBACJkgB,SAAU,mBACV5D,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAM3H,GAAE,4BAAuB2H,EAAI+K,SAAStgB,MAAQuV,EAAI+K,SAASuI,oBAEvG,CACItM,OAAQ,OACRpc,GAAI,gBACJkgB,SAAU,SAAC9K,GAAD,OAA2BA,EAAIuS,cAAJ,UAAuBvS,EAAIuS,cAActf,MAAS,KAE3F,CACI+T,OAAQ,WACRpc,GAAI,WACJkgB,SAAU,SAAC9K,GAAD,OAA4B,yBAAK7O,MAAO2jB,GAActH,wBAAyB,CAACC,OAAQzN,EAAIuT,cAE1G,CACIvM,OAAQ,WACRpc,GAAI,WACJkgB,SAAU,SAAC9K,GAAD,OAA2BA,EAAIwT,SAAJ,UAAkBxT,EAAIwT,SAASrb,UAA/B,YAA4C6H,EAAIwT,SAASpb,UAAa,MAGnH,OACI,6BAEQhQ,KAAKgpB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpG,OAAK,EAACC,KAAK,iCACd,kBAAC,GAAD,CAAcrhB,UAAU,yBACpB,kBAAC,GAAD,CAAO6b,QAASA,EACZlc,KAAMnB,KAAKT,MAAMutB,qBACjBtP,UAAWxd,KAAKT,MAAMstB,oBAAoBzqB,OAC1Ckb,UAAWtd,KAAK+sB,4BAChB5Q,oBAAqBnc,KAAKgtB,8BAC1B5Q,iBAAkBpc,KAAKitB,2BACvB5Q,UAAU,yBAItB,kBAAC,IAAD,CAAOwG,KAAI,qDACP,kBAAC,GAAD,CAA2BoC,UAAWjlB,KAAKX,MAAMuQ,KAAKgB,qB,GApItCrN,aAmJlCiN,GAAqB,CACvB0c,uBCjLG,SAAgChE,GACrC,MAAO,CACLpiB,KCFoC,2BDGpCgc,QAASoG,KDiLExY,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZkd,qBAAsBnc,EAAM6C,qBAQKhD,GAA1BE,CAA8Ckc,IGhLhDO,GAAb,WAGI,aAAe,yBAFfnY,aAEc,OADdC,iBACc,EACVjV,KAAKgV,QAAU,IAAIlC,EACnB9S,KAAKiV,YAAcvV,IAEnBM,KAAKgjB,WAAahjB,KAAKgjB,WAAWpjB,KAAKI,MACvCA,KAAKqV,QAAUrV,KAAKqV,QAAQzV,KAAKI,MARzC,kMAgBwDsF,IAAUC,IAAIvF,KAAKgV,QAAQjC,cAAcU,UAhBjG,cAgBkBjO,EAhBlB,yBAiBmBF,IAAUG,QAAQD,IAjBrC,iOA4ByBhD,GA5BzB,gGA8BsD8C,IAAUC,IAAV,UAAiBvF,KAAKgV,QAAQjC,cAAcU,SAA5C,YAAwDjR,IA9B9G,cA8BkBgD,EA9BlB,yBA+BmBF,IAAUG,QAAQD,IA/BrC,oOAsC2BqQ,GAtC3B,gGAwC8BvQ,IAAUY,KAAV,UAAkBlG,KAAKgV,QAAQjC,cAAcU,UAAYoC,GAxCvF,cAwCkBrQ,EAxClB,yBAyCmBF,IAAUG,QAAQD,IAzCrC,iOAgDwBqQ,GAhDxB,gGAkD8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcU,UAAYoC,GAlDtF,cAkDkBrQ,EAlDlB,yBAmDmBF,IAAUG,QAAQD,IAnDrC,wOA0D+BqQ,GA1D/B,gGA4D8BvQ,IAAUa,IAAV,UAAiBnG,KAAKgV,QAAQjC,cAAcU,SAA5C,aAAiEoC,GA5D/F,cA4DkBrQ,EA5DlB,yBA6DmBF,IAAUG,QAAQD,IA7DrC,wOAoE+BmQ,GApE/B,uFAsEY3V,KAAKiV,YAAY9T,KAAOwU,EAtEpC,SAuE8BrQ,IAAUU,OAAV,UAAoBhG,KAAKgV,QAAQjC,cAAcU,UAAYzT,KAAKiV,aAvE9F,cAuEkBzP,EAvElB,yBAwEmBF,IAAUG,QAAQD,IAxErC,kKCLa4nB,GACT,WAAYvX,GAAU,yBAYtBxT,SAZqB,OAarBwI,UAbqB,OAcrBwiB,aAdqB,OAerBC,aAfqB,OAgBrB9J,cAhBqB,OAkBrBC,eAlBqB,OAmBrBC,iBAnBqB,OAoBrBC,eApBqB,OAqBrBC,iBArBqB,EACjB5jB,KAAKqC,IAAMwT,EAAMA,EAAIxT,IAAM,KAC3BrC,KAAK6K,KAAOgL,EAAMA,EAAIhL,KAAO,GAC7B7K,KAAKqtB,QAAUxX,EAAMA,EAAIwX,QAAU,IAAIzX,EACvC5V,KAAKstB,QAAUzX,EAAMA,EAAIyX,QAAU,GACnCttB,KAAKwjB,SAAW3N,EAAMA,EAAIgO,QAAU,GAEpC7jB,KAAKyjB,UAAa5N,EAAMA,EAAI4N,UAAY,IAAI7N,EAC5C5V,KAAK0jB,YAAe7N,EAAMA,EAAI6N,YAAa,IAAII,KAC/C9jB,KAAK2jB,UAAa9N,EAAMA,EAAI8N,UAAY,IAAI/N,EAC5C5V,KAAK4jB,YAAe/N,EAAMA,EAAI+N,YAAc,IAAIE,MCA3CyJ,GAAsC,CAC/CxuB,OAAQ,GACRyuB,QAAS,IAAIJ,GACbnJ,cAAc,G,+MCGlB,IAAM5f,GAAenF,IAAOoF,IAAV,MAQZuiB,GAAwC,CAC1C1d,MAAO,MACP8I,QAAS,eACTM,UAAW,QACXrJ,aAAc,QAEZ4d,GAAyC,CAC3C3d,MAAO,MACP8I,QAAS,eACTM,UAAW,OACXgJ,YAAa,QAEXwL,GAA0C,CAC5CxU,UAAW,OACXgJ,YAAa,QAEXyL,GAA6C,CAC/Cnd,OAAQ,OACRod,WAAY,OACZC,aAAc,uBACd/d,MAAO,OAELge,GAAuC,CACzC5U,UAAW,SACXgJ,YAAa,QAEXkS,G,kDAKF,WAAYpuB,GAAsB,IAAD,8BAC7B,cAAMA,IALV+F,YAIiC,IAHjCsoB,oBAGiC,IAFjC3jB,gBAEiC,IADjCud,mBACiC,EAG7B,EAAK/nB,MAAQguB,GACb,EAAKxjB,WAAa,IAAItD,aACtB,EAAKrB,OAAS,IAAI0N,EAClB,EAAK4a,eAAiB,IAAIP,GAC1B,EAAK7F,cAAgB,IAAI7B,GAEzB,EAAK9O,YAAc,EAAKA,YAAY/W,KAAjB,gBACnB,EAAKgX,aAAe,EAAKA,aAAahX,KAAlB,gBACpB,EAAKmlB,oBAAsB,EAAKA,oBAAoBnlB,KAAzB,gBAC3B,EAAK2nB,iBAAmB,EAAKA,iBAAiB3nB,KAAtB,gBACxB,EAAK4nB,oBAAsB,EAAKA,oBAAoB5nB,KAAzB,gBAC3B,EAAK+tB,kBAAoB,EAAKA,kBAAkB/tB,KAAvB,gBAdI,E,qLAmBX,eADdguB,EAAY5tB,KAAKX,MAAMmP,MAAMnF,OAAjB,W,gCAEQrJ,KAAK0tB,eAAerY,QAAQuY,G,OAA5CJ,E,OACJxtB,KAAKgB,SAAS,CACVwsB,QAASA,EACTvJ,cAAc,I,kLASPpN,G,yFAEX2W,EAAUxtB,KAAKwnB,oBAAoB3Q,IAEnC7W,KAAKT,MAAM0kB,a,gCACCjkB,KAAK0tB,eAAehG,OAAO8F,G,OAAvChoB,E,8CAGYxF,KAAK0tB,eAAe/F,UAAU6F,G,OAA1ChoB,E,eAImB,MADnBqoB,EAAiB7tB,KAAK2tB,kBAAkBH,MAEpCI,EAAY5tB,KAAKT,MAAM0kB,aAAeuJ,EAAQnrB,IAAMmD,EAEpDsiB,EAAW,IAAIxD,GAAQ,CACvBviB,OAAQ6rB,EACR/J,QAASgK,EACTtJ,YAAavkB,KAAKX,MAAM4lB,UACxBT,aAAa,IAAIV,MAAOoB,gBAE5BsI,EAAQhK,SAASziB,KAAK+mB,GAEtB9nB,KAAK0tB,eAAe3F,cAAcyF,EAAQhK,UACrCjO,MAAK,SAACjU,GACA,EAAK/B,MAAM0kB,aACV,EAAKjjB,SAAS,CACVwsB,QAASA,IAIbnf,OAAOC,SAAS0Z,QAAO,MAI9BtS,OAAM,SAAC/J,GAEJ7G,QAAQC,IAAI4G,O,gJAUV6hB,GACd,IAAIlsB,EAAS,GA4Cb,OA1CIb,KAAKE,UAAUX,KAAKT,MAAMiuB,WAAa/sB,KAAKE,UAAU6sB,KAClD/sB,KAAKE,UAAUX,KAAKT,MAAMiuB,QAAQ3iB,QAAUpK,KAAKE,UAAU6sB,EAAQ3iB,OACnEvJ,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,UAEJ,yBAAKhe,MAAOoe,IAEJqG,EAAQ3iB,MAGhB,kBAAC,GAAD,CAAWsZ,cAAe6C,QAMtCvmB,KAAKE,UAAUX,KAAKT,MAAMiuB,QAAQH,WAAa5sB,KAAKE,UAAU6sB,EAAQH,UACtE/rB,EAAOP,KACHknB,KAAeC,eACX,6BACI,yBAAKnf,MAAO8d,IACR,yBAAK9d,MAAOge,IAAZ,YACA,yCAEJ,yBAAKhe,MAAO+d,IACR,8BACA,6BACM0G,EAAQH,SAAWG,EAAQH,QAAQhrB,IAApC,UACMmrB,EAAQH,QAAQtd,UADtB,YACmCyd,EAAQH,QAAQrd,UAC9C,KAId,kBAAC,GAAD,CAAWmU,cAAe6C,SAMvC1lB,EAAO0b,KAAK,M,0CAOHnG,GAChB,IAAIuR,EAAapoB,KAAKT,MAAMiuB,QACxBnF,EAAU,IAAI+E,GAAQvW,EAAK/X,YAO/B,OANAupB,EAAQhmB,IAAM+lB,EAAW/lB,IACzBgmB,EAAQ7E,SAAW4E,EAAW5E,SAC9B6E,EAAQ5E,UAAY2E,EAAW3E,UAC/B4E,EAAQ3E,YAAc0E,EAAW1E,YACjC2E,EAAQ1E,UAAYyE,EAAWzE,UAC/B0E,EAAQzE,YAAcwE,EAAWxE,YAC1ByE,I,0CAOSxR,GAAsB,IAAD,OACjC2W,EAAUxtB,KAAKT,MAAMiuB,QACzBA,EAAQhK,SAAW3M,EAAK2M,SACxBgK,EAAQhK,SAASljB,SAAQ,SAACsC,GACtBA,EAAIb,OAASyrB,EAAQnrB,OAErBrC,KAAKT,MAAM0kB,cACXjkB,KAAK0tB,eAAe3F,cAAcyF,EAAQhK,UACrCjO,MAAK,SAACjU,GACH,EAAKN,SAAS,CACVwsB,QAASA,OAGhB9X,OAAM,SAAC/J,GACJ7G,QAAQC,IAAI4G,Q,kCAShBmiB,GACR,IAAI/W,EAAiC,GACjC/L,EAA+C,GA+CnD,OA7CAA,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,qBAElB4L,EAAUhW,KAAK,IAAIiG,kBAAgB,CAC/B/D,IAAK,OACLuG,MAAO,OACPxH,MAAO8rB,EAAOjjB,KACdG,WAAYA,EACZlE,KAAM9G,KAAK+J,WAAWkD,aAAagB,KACnC+I,MAAO,QAIXhM,EAAa,IACFhL,KAAK+J,WAAWkB,eAAeC,SAAW,CACjDlJ,OAAO,EACPmJ,aAAc,wBAElB4L,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,UACLuG,MAAO,UACPxH,MAAO8rB,EAAOT,QACdltB,UAAWH,KAAKoF,OAAO2N,cAAcG,MACrClI,WAAYA,EACZlK,aAAc,QACdhC,WAAY,CAAC,QAAS,YAAa,YACnCyC,WAAW,EACXyV,MAAO,OAIXD,EAAUhW,KAAK,IAAIoG,oBAAkB,CACjClE,IAAK,UACLuG,MAAO,SACPxH,MAAO8rB,EAAOR,QACdntB,UAAWH,KAAKoF,OAAO2N,cAAcG,MACrCpS,aAAc,QACdhC,WAAY,CAAC,QAAS,YAAa,YACnCyC,WAAW,EACXiH,UAAU,EACVwO,MAAO,OAGJD,I,yCAOP,IAAIzV,EAWJ,OAVItB,KAAKT,MAAM0kB,eACX3iB,EACI,6BACI,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAY2jB,UAAWjlB,KAAKX,MAAM4lB,UAC9BzB,SAAUxjB,KAAKT,MAAMiuB,QAAQhK,SAC7B2B,gBAAiBnlB,KAAK+kB,wBAI/BzjB,I,+BAIP,IAAIyV,EAAY/W,KAAK2W,YAAY3W,KAAKT,MAAMiuB,SAC5C,OACI,kBAAC,GAAD,KACI,kBAAC1jB,EAAA,YAAD,CAAaU,WAAYuM,EAAW1K,iBAAkBrM,KAAK4W,eAEvD5W,KAAKunB,wB,GA3PMjkB,IAAMC,WAkQtB0T,eAAWwW,I,8GC9R1B,IAAMppB,GAAenF,IAAOoF,IAAV,MAIZypB,G,kDAIF,WAAY1uB,GAA+B,IAAD,8BACtC,cAAMA,IAJVquB,oBAG0C,IAF1CtoB,YAE0C,IAD1CkiB,mBAC0C,EAGtC,EAAK/nB,MAAQ,CACTyuB,WAAY,GACZC,YAAa,GACblM,WAAW,EACX6G,mBAAmB,GAEvB,EAAK8E,eAAiB,IAAIP,GAC1B,EAAK7F,cAAgB,IAAI7B,GACzB,EAAKrgB,OAAS,IAAI0N,EAElB,EAAKob,mBAAqB,EAAKA,mBAAmBtuB,KAAxB,gBAC1B,EAAKuuB,qBAAuB,EAAKA,qBAAqBvuB,KAA1B,gBAC5B,EAAKwuB,kBAAoB,EAAKA,kBAAkBxuB,KAAvB,gBACzB,EAAKopB,oBAAsB,EAAKA,oBAAoBppB,KAAzB,gBAhBW,E,iEAoBlCI,KAAKT,MAAMqpB,mBAGX5oB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,+HAYN1G,G,8EACrBliB,KAAKgB,SAAS,CACV+gB,WAAW,IAGS,KADpBtO,EAAWzT,KAAKT,MAAMyuB,YACb5rB,O,gCACQpC,KAAK0tB,eAAe1K,a,OAArCvP,E,OACAzT,KAAKX,MAAMgvB,cAAc5a,G,OAEvB2O,EAAWF,EAAW3C,SAAW2C,EAAW5C,UAC5C+C,EAASD,EAAWF,EAAW3C,SACrCvf,KAAKgB,SAAS,CACVgtB,WAAYva,EACZwa,YAAaxa,EAAS6O,MAAMF,EAAUC,GACtCN,WAAW,I,4LAQQQ,G,qEACnBlU,OAAOmU,QAAQ,iD,gCACTxiB,KAAK0tB,eAAejL,cAAcF,G,OACxClU,OAAOC,SAAS0Z,S,iJAQpBhoB,KAAKgB,SAAS,CACV4nB,mBAAmB,M,4CAQvB,GAAI5oB,KAAKT,MAAMqpB,kBACX,OACI,kBAAC,IAAD,CAAU7nB,MAAM,EAAMkP,GAAG,qC,+BAMjC,IAAMoN,EAAU,CACZ,CACIuB,OAAQ,OACRpc,GAAI,OACJkgB,SAAU,OACV5D,KAAM,gBAAGlH,EAAH,EAAGA,IAAH,OAA4B,kBAAC,IAAD,CAAM3H,GAAE,mBAAc2H,EAAI+K,SAAStgB,MAAQuV,EAAI+K,SAAS9X,QAE9F,CACI+T,OAAQ,UACRpc,GAAI,UACJkgB,SAAU,SAAC9K,GAAD,OAAkBA,EAAIyV,QAAJ,UAAiBzV,EAAIyV,QAAQtd,UAA7B,YAA0C6H,EAAIyV,QAAQrd,UAAa,MAGvG,OACI,6BAEQhQ,KAAKgpB,sBAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOpG,OAAK,EAACC,KAAK,wBACd,kBAAC,GAAD,CAAcrhB,UAAU,gBACpB,kBAAC,GAAD,CAAO6b,QAASA,EACZlc,KAAMnB,KAAKT,MAAM0uB,YACjBzQ,UAAWxd,KAAKT,MAAMyuB,WAAW5rB,OACjCkb,UAAWtd,KAAKkuB,mBAChB/R,oBAAqBnc,KAAKmuB,qBAC1B/R,iBAAkBpc,KAAKouB,kBACvB/R,UAAU,eAItB,kBAAC,IAAD,CAAOwG,KAAI,mCACP,kBAAC,GAAD,CAAkBoC,UAAWjlB,KAAKX,MAAMuQ,KAAKgB,qB,GA1HtCrN,aAyIzBiN,GAAqB,CACvB6d,cCpKG,SAAuBnF,GAC5B,MAAO,CACLpiB,KCF0B,iBDG1Bgc,QAASoG,KDoKExY,gBAXU,SAACC,GACtB,MAAO,CACHf,KAAMe,EAAMf,KACZqe,YAAatd,EAAM8C,YAQcjD,GAA1BE,CAA8Cqd,IGlIvDO,G,kDAGL,WAAYjvB,GAAkB,IAAD,8BAC5B,cAAMA,IAHPqX,iBAE6B,IAD7BtR,YAC6B,EAG5B,EAAK7F,MAAQ,CACZgvB,eAAe,EACfC,cAAc,EACdC,YAAa,IAEd,EAAK/X,YAAc,IAAI3B,EAAerV,KACtC,EAAK0F,OAAS,IAAI0N,EAIlB,EAAK4b,wBAA0B,EAAKA,wBAAwB9uB,KAA7B,gBAE/B,EAAK+uB,2BAA6B,EAAKA,2BAA2B/uB,KAAhC,gBAGlC,EAAKgvB,2BAA6B,EAAKA,2BAA2BhvB,KAAhC,gBAGlC,EAAKivB,kBAAoB,EAAKA,kBAAkBjvB,KAAvB,gBACzB,EAAKkvB,mBAAqB,EAAKA,mBAAmBlvB,KAAxB,gBAtBE,E,6GA8BCiX,G,8EACzBvB,EAA2B,CAC9ByZ,SAAUlY,EAAKvL,MACfoC,SAAUmJ,EAAKnJ,SACf0b,WAAYvS,EAAKuS,YAElBppB,KAAK0W,YAAYxB,UAAUI,GACzBC,MAAK,SAACjU,GACN,GAAIA,GAAUA,EAAOgK,QAAUuL,EAAKvL,MAAO,CAC1C,IAAIsE,EAAO,IAAIgG,EAAKtU,GACpB,EAAKjC,MAAM4lB,UAAUrV,GACrB,EAAK5O,SAAS,CACbwtB,cAAc,SAIf,EAAKxtB,SAAS,CACbytB,YAAa,CACZtY,MAAM,EACNnU,MAAO,EAAKoD,OAAOsO,cAAcE,aACjCrK,QAAS,EAAKnE,OAAO0O,cAAcG,aAIpCyB,OAAM,SAAC/J,GACT,EAAK3K,SAAS,CACbytB,YAAa,CACZtY,MAAM,EACNnU,MAAO,EAAKoD,OAAOsO,cAAcC,WACjCpK,QAAS,EAAKnE,OAAO0O,cAAcG,a,wJAWb4C,GAAoB,IAAD,OACzCmY,EAAU,IAAIpZ,EAAK,CACtB7F,UAAW8G,EAAK9G,UAChBC,SAAU6G,EAAK7G,SACf1E,MAAOuL,EAAKvL,MACZoC,SAAUmJ,EAAKnJ,SACfiE,MAAOkF,EAAKlF,MACZD,QAASmF,EAAKnF,UAEf1R,KAAK0W,YAAYvB,aAAa6Z,GAC5BzZ,MAAK,SAACjU,GACFA,GAAUA,EAAOgK,QAAUuL,EAAKvL,MACnC,EAAKtK,SAAS,CACbutB,eAAe,IAIhB,EAAKvtB,SAAS,CACbytB,YAAa,CACZtY,MAAM,EACNnU,MAAO,EAAKoD,OAAOsO,cAAcG,YACjCtK,QAAS,EAAKnE,OAAO0O,cAAcG,aAKtCyB,OAAM,SAAC/J,GACP,EAAK3K,SAAS,CACbytB,YAAa,CACZtY,MAAM,EACNnU,MAAO,EAAKoD,OAAOsO,cAAcG,YACjCtK,QAAS,EAAKnE,OAAO0O,cAAcG,e,mDAUvC,OAAIjU,KAAKT,MAAMgvB,cAEb,kBAAC,IAAD,CAAUxtB,MAAM,EAAMkP,GAAG,WAGlBjQ,KAAKT,MAAMivB,aAElB,kBAAC,IAAD,CAAUztB,MAAM,EAAMkP,GAAG,WAFtB,I,2CAYLjQ,KAAKgB,SAAS,CACbytB,YAAa,O,0CAOd,GAAIzuB,KAAKT,MAAMkvB,YAAYtY,KAC1B,OACC,kBAAC,EAAD,CAAU5M,QAASvJ,KAAKT,MAAMkvB,YAAYllB,QACzC4M,MAAM,EACNnU,MAAOhC,KAAKT,MAAMkvB,YAAYzsB,MAC9ByG,QAASzI,KAAK8uB,uB,wFAgBb9uB,KAAKT,MAAMivB,aACdxuB,KAAKgB,SAAS,CACbwtB,cAAc,IAGPxuB,KAAKT,MAAMgvB,eACnBvuB,KAAKgB,SAAS,CACbutB,eAAe,M,+BAMjB,OACC,kBAAC,IAAD,KACC,kBAAC,EAAD,MAECvuB,KAAK6uB,oBAGL7uB,KAAK4uB,6BAEN,yBAAKptB,UAAU,aACd,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOqhB,KAAK,UACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,wBACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,0BACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,8BACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,iCACX,kBAAC,GAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,UACX,kBAAC,GAAD,YAGoCje,IAApC5E,KAAKX,MAAMuQ,KAAKgB,YAAYvO,IAE1B,kBAAC,IAAD,CAAOugB,OAAK,EAACC,KAAK,UACjB,kBAAC,GAAD,CAAOiH,QAAS9pB,KAAK0uB,wBACpB7E,yBAAyB,UACzBD,2BAA2B,qBAK7B,GAEH,kBAAC,IAAD,CAAOhH,OAAK,EAACC,KAAK,WACjB,kBAAC,EAAD,CAAQhQ,WAAY7S,KAAK2uB,2BACxB/b,kBAAkB,YAEpB,kBAAC,IAAD,CAAOiQ,KAAK,KACX,kBAAC,EAAD,c,GA/NWvf,IAAMC,WA4OTmN,gBAJS,SAACnR,GAAD,MAAsB,CAC7CqQ,KAAMrQ,EAAMqQ,QAKZ,CAAEqV,UtD5QI,SAAmBA,GACxB,MAAO,CACLne,KCTsB,aDUtBgc,QAASmC,KsDuQEvU,CAGb4d,ICtRWW,GAAb,uKAEQ,OACI,6BAASztB,UAAU,iBAAiBgB,GAAG,UACnC,yBAAKhB,UAAU,aACX,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,uBAAGoN,KAAK,KACJ,yBAAKF,IAAG,UAAKhC,gBAAL,kCAA6DiC,IAAI,UAAUlM,MAAM,QAIrG,yBAAKjB,UAAU,6CACX,wBAAIA,UAAU,QAAd,WAGA,uBAAGA,UAAU,YAAb,uBAA4C,6BAA5C,6BAEJ,yBAAKA,UAAU,6CACX,wBAAIA,UAAU,QAAd,YAGA,uBAAGA,UAAU,YAAb,+FACsH,6BADtH,gCAKR,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,+BAGR,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,sBACX,uBAAGA,UAAU,sCAAb,qDACoDkL,sPAAYwiB,iCAGpE,yBAAK1tB,UAAU,YACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,+BAA+B7M,OAAO,UACpE,0BAAMP,UAAU,+DAGxB,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,2DAA2D7M,OAAO,UAChG,0BAAMP,UAAU,gEAGxB,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,qCAAqC7M,OAAO,UAC1E,0BAAMP,UAAU,+DAGxB,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,iCAAiC7M,OAAO,UACtE,0BAAMP,UAAU,iEAGxB,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,wCAAwC7M,OAAO,UAC7E,0BAAMP,UAAU,kEAGxB,yBAAKA,UAAU,YACX,uBAAGqN,IAAI,sBAAsBD,KAAK,mCAAmC7M,OAAO,UACxE,0BAAMP,UAAU,yEArE5D,GAA4B8B,IAAMC,W,qECM5B4rB,GAAe,CACnBve,YAAa,GACbkR,SAAU,ICHZ,IAAMqN,GAAe,CACnB7b,WAAY,ICPP,ICKD6b,GAAe,CACnBzpB,gBAAiB,GCAnB,IAAMypB,GAAe,CACnB5b,eAAgB,ICDlB,IAAM4b,GAAe,CACnB3b,kBAAmB,I,yBCLd,SAAS4b,GAAcC,GAC5B,MAAO,CACLvoB,KJJ0B,iBIK1Bgc,QAASuM,GCCb,IAAMF,GAAe,CACnB1b,SAAU,ICUZ,IAAM6b,GAAgB,CACrBrsB,IAAK,OACLssB,cAGKC,GAAcC,2BAAgB,CACnC7f,KRXM,WAGC,IAFNrQ,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,IvDdsB,auDepB,OAAO,6BACFvH,GADL,IACYqR,YAAaG,EAAO+R,UAElC,IvDjBuB,cuDkBrB,OAAO,6BACFvjB,GADL,IACYqR,YAAa,KAE3B,IvDpBsB,auDqBpB,OAAO,6BACFrR,GADL,IACYuiB,SAAU/Q,EAAO+R,UAE/B,QACE,OAAOvjB,IQNZ+T,WPdM,WAGC,IAFN/T,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,I5BZ4B,mB4Ba1B,OAAO,6BACFvH,GADL,IACY+T,WAAYvC,EAAO+R,UAEjC,I5Bf6B,oB4BgB3B,OAAO,6BACFvjB,GADL,IACY+T,WAAY,KAE1B,QACE,OAAO/T,IOCZwG,QLhBM,WAGC,IAFNxG,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,IDd0B,iBCexB,OAAO,6BACFvH,GADL,IACYmG,gBAAiBqL,EAAO+R,UAEtC,QACE,OAAOvjB,IKOZgU,eJhBM,WAGC,IAFNhU,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,ItBZiC,wBsBa/B,OAAO,6BACFvH,GADL,IACYgU,eAAgBxC,EAAO+R,UAErC,ItBfkC,yBsBgBhC,OAAO,6BACFvjB,GADL,IACYgU,eAAgB,KAE9B,QACE,OAAOhU,IIGZiU,kBHjBM,WAGC,IAFNjU,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,IfZoC,2BealC,OAAO,6BACFvH,GADL,IACYiU,kBAAmBzC,EAAO+R,UAExC,IffqC,4BegBnC,OAAO,6BACFvjB,GADL,IACYiU,kBAAmB,KAEjC,QACE,OAAOjU,IGIZkU,SDlBM,WAGC,IAFNlU,EAEK,uDAFG4vB,GACRpe,EACK,uCACL,OAAQA,EAAOjK,MACb,IVZ0B,iBUaxB,OAAO,6BACFvH,GADL,IACYkU,SAAU1C,EAAO+R,UAE/B,IVf2B,kBUgBzB,OAAO,6BACFvjB,GADL,IACYkU,SAAU,KAExB,QACE,OAAOlU,MCSPmwB,GAAmBC,aAAeL,GAAeE,IAEjDI,GAAc,CAACC,MACjBnqB,GAAkB,EAChBoqB,GAAmB,CACxBC,aAAc,CACbhqB,QAAS,CAAC,CACTN,QAAS,WAAyDuqB,GAA2B,IAAxEC,EAAuE,EAAvEA,SAAUC,EAA6D,EAA7DA,SAC1Bpb,GADuF,EAAnDqb,gBAChBF,KAKxB,OAJAD,EAAIpjB,QAAQwjB,cAAZ,iBAAuCtb,EAASlF,KAAKgB,YAAYmF,OACjErQ,KACAZ,QAAQC,IAAIW,IACZwqB,EAASd,GAAc1pB,KAChBsqB,GAER1pB,MAAO,WAAyDA,GAAa,EAA1D2pB,SAA0D,EAAhDC,SAAgD,EAAtCC,gBAEtC,OADArrB,QAAQC,IAAIuB,GACLA,KAITD,SAAU,CAAC,CACVZ,QAAS,WAAyDD,GAAqB,EAAlEyqB,SAAmE,IAAzDC,EAAwD,EAAxDA,SAAwD,EAA9CC,gBAGxC,OADAD,EAASd,KADT1pB,KAEOF,GAERc,MAAO,WAAyDA,GAAa,EAA1D2pB,SAA2D,IAAjDC,EAAgD,EAAhDA,SAAgD,EAAtCC,gBAItC,OADAD,EAASd,KADT1pB,KAEOY,OAML+pB,GAAqBC,mBAAe,WAAf,EAAmBV,GAAnB,QACxBW,KAAgBjrB,IAAUK,IAAKmqB,OAEnB,cACd,IAAInf,EAAa6f,uBAChBd,GACEe,+BAAoBJ,KAGvB,MAAO,CAAE1f,QAAO+f,UADAC,aAAahgB,K,oZCtE9B,IAAMigB,GAAWC,eAAH,MAMRxsB,GAAenF,IAAOoF,IAAV,MAeZwsB,G,mLAEEhsB,QAAQC,IAAI/E,KAAKX,S,+BAGjB,OACI,6BAEQW,KAAKX,MAAMqG,gBAAkB,EAErB,kBAAC,GAAD,CAAclE,UAAU,iBACpB,kBAAC,KAAD,CACIqvB,IAAKD,GACLG,KAAM,IACNrnB,MAAO,UACPsnB,QAAShxB,KAAKX,MAAMqG,gBAAkB,KAI/C,Q,GAnBEpC,IAAMC,WA8BpBmN,gBAJS,SAACnR,GAAD,MAAsB,CAC1CmG,gBAAiBnG,EAAMwG,QAAQL,mBAK/B,GAFWgL,CAGbogB,ICnDFG,IAAS1Q,OACR,kBAAC,IAAD,CAAU5P,MAAOggB,KAAuBhgB,OACvC,kBAAC,KAAD,CAAaqgB,QAAS,KAAMN,UAAWC,KAAuBD,WAC7D,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QAGF5E,SAASoF,eAAe,StEwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9b,MAAK,SAAA+b,GACJA,EAAaC,gBAEd7b,OAAM,SAAApP,GACLxB,QAAQwB,MAAMA,EAAMkrB,a,6EuE/If5qB,EAmBZ,aAkBS,IAlBGhD,EAkBJ,uDAAJ,GAAI,yBApCR5B,WAoCQ,OAnCRiB,SAmCQ,OAlCRuG,WAkCQ,OAjCR+H,cAiCQ,OAhCRyF,WAgCQ,OA/BRxQ,iBA+BQ,OA9BRM,UA8BQ,OA7BRlD,aA6BQ,OA5BRoH,gBA4BQ,OA3BRxC,cA2BQ,OA1BR0D,UA0BQ,OAzBRD,cAyBQ,OAxBR1K,eAwBQ,OAvBRpB,eAuBQ,OAtBRW,kBAsBQ,OArBRhC,gBAqBQ,OApBRqN,qBAoBQ,EACPnM,KAAKgC,MAAQ4B,EAAQ5B,MACrBhC,KAAKiD,IAAMW,EAAQX,KAAO,GAC1BjD,KAAKwJ,MAAQ5F,EAAQ4F,OAAS,GAC9BxJ,KAAKuR,WAAa3N,EAAQ2N,SAC1BvR,KAAKgX,WAA0BpS,IAAlBhB,EAAQoT,MAAsB,EAAIpT,EAAQoT,MACvDhX,KAAKwG,YAAc5C,EAAQ4C,aAAe,GAC1CxG,KAAK8G,KAAOlD,EAAQkD,MAAQ,GAC5B9G,KAAK4D,QAAUA,EAAQA,SAAW,GAClC5D,KAAKgL,WAAapH,EAAQoH,YAAc,GACxChL,KAAKwI,WAAa5E,EAAQ4E,SAC1BxI,KAAKkM,UAAwBtH,IAAjBhB,EAAQsI,KAAqB,EAAItI,EAAQsI,KACrDlM,KAAKiM,WAAarI,EAAQqI,SAC1BjM,KAAKuB,YAAcqC,EAAQrC,UAC3BvB,KAAKG,UAAYyD,EAAQzD,WAAa,GACtCH,KAAKc,aAAe8C,EAAQ9C,cAAgB,GAC5Cd,KAAKlB,WAAa8E,EAAQ9E,YAAc,GACxCkB,KAAKmM,gBAAkBvI,EAAQuI,iBAAmB,K,6ECxDvCzI,EACT,WAAYmS,GAAgB,yBAI5B5S,SAJ2B,OAK3BjB,WAL2B,EACvBhC,KAAKiD,IAAM4S,EAAMA,EAAI5S,IAAM,KAC3BjD,KAAKgC,MAAQ6T,EAAMA,EAAI7T,MAAQ,O,6ECH1BiC,EACT,WAAY4R,GAAW,yBAIvB1R,eAJsB,OAKtBC,aALsB,EAClBpE,KAAKmE,UAAY0R,EAAMA,EAAI1R,UAAY,KACvCnE,KAAKoE,QAAUyR,EAAMA,EAAIzR,QAAU,Q","file":"static/js/main.7e8559eb.chunk.js","sourcesContent":["import { QuestionBase } from \"./questions/question-base\";\r\n\r\n\r\nexport interface DynamicFormProps {\r\n    ListFields: QuestionBase<string>[],\r\n    OnSubmitCallback: (form: DynamicFormStates) => void\r\n}\r\n\r\nexport interface DynamicFormStates {\r\n    originalListFields: any,\r\n    listFields: any,\r\n    errors:{[s:string]: string[]},\r\n    disableSubmitButton: boolean\r\n    \r\n}\r\n\r\nexport const initialDynamicFormStates: DynamicFormStates = {\r\n    originalListFields: {},\r\n    listFields : {},\r\n    errors: {},\r\n    disableSubmitButton: true\r\n}","import React from 'react';\r\nimport { ReferenceProps, ReferenceStates, initialReferenceStates } from './ReferencePropsStates';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport './ReferenceList.scss';\r\nimport styled from 'styled-components';\r\nimport { ReferenceService } from './Reference.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nconst SearchInput = styled.input`\r\n    border-radius: 0px;\r\n    border-left: 0px;\r\n    border-right: 0px;\r\n`;\r\nexport class ReferenceList extends React.Component<ReferenceProps, ReferenceStates>{\r\n    referenceService: ReferenceService;\r\n    constructor(props: ReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = initialReferenceStates;\r\n        this.referenceService = new ReferenceService(apiConfig.apiConfig);\r\n        this.onSelectionChangeHandler = this.onSelectionChangeHandler.bind(this);\r\n        this.renderSearchBar = this.renderSearchBar.bind(this);\r\n        this.onSearchInputChangeHandler = this.onSearchInputChangeHandler.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n        else if (this.props.default)\r\n            selected = this.props.default;\r\n\r\n        let allReference = await this.referenceService.getByUrl(this.props.serverUrl);\r\n        let displayedData: any[] = [];\r\n        allReference.forEach(element => {\r\n            let newObj = JSON.parse(JSON.stringify(element));   //clone object\r\n            //remove the fields that do not display\r\n            if (this.props.listFields) {\r\n                for (let p in newObj) {\r\n                    if (this.props.listFields.indexOf(p) === -1 && p !== '_id' && p !== this.props.displayField) {\r\n                        delete newObj[p];\r\n                    }\r\n                }\r\n                displayedData.push(newObj);\r\n            }\r\n        });\r\n        this.setState({\r\n            selected: selected,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            referenceKey: this.props.referenceKey,\r\n            data: displayedData,\r\n            originalData: allReference\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            this.setState({\r\n                selected: this.props.selected,\r\n                originalSelected: JSON.parse(JSON.stringify(this.props.selected)),\r\n                selectedValue: this.props.selected[this.props.displayField]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render the search bar: search by display field\r\n     */\r\n    renderSearchBar() {\r\n        let result;\r\n        if (this.props.searchBar) {\r\n            result = (\r\n                <div className=\"search-bar\">\r\n                    <SearchInput className=\"form-control\" onChange={this.onSearchInputChangeHandler} placeholder=\"Search ...\" />\r\n                    <Dropdown.Divider></Dropdown.Divider>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Search input change\r\n     * @param event input event\r\n     */\r\n    onSearchInputChangeHandler(event: any) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            searchKey: event.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle selection changed\r\n     * @param eventKey selected key\r\n     * @param event event\r\n     */\r\n    onSelectionChangeHandler(eventKey: any, event: Object) {\r\n        //get the selected option\r\n        let preSelected = this.state.selected;\r\n        for (let i = 0; i < this.state.originalData.length; i++) {\r\n            if (this.state.originalData[i]._id.toString() === eventKey.toString()) {\r\n                preSelected = this.state.originalData[i];\r\n                break;\r\n            }\r\n        }\r\n        //update selected option and send it to parent component\r\n        this.setState({\r\n            selected: preSelected,\r\n            selectedValue: preSelected[this.props.displayField]\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DropdownButton id=\"reference-box\"\r\n                title={this.state.selectedValue}\r\n                onSelect={this.onSelectionChangeHandler}>\r\n                {\r\n                    this.renderSearchBar()\r\n                }\r\n                {\r\n                    this.state.data\r\n                        .filter((val, i) => {\r\n                            return val[this.props.displayField].indexOf(this.state.searchKey) !== -1 || this.state.searchKey === \"\";\r\n                        })\r\n                        .map((option, index) => (\r\n                            <Dropdown.Item key={`${option['_id']}${index}`} eventKey={option['_id']} className=\"option\" >\r\n                                {\r\n                                    Object.keys(option).filter((val) => {\r\n                                        return val !== '_id';\r\n                                    }).map((opt, ind) => (\r\n                                        <span className=\"col-sm-3\" key={ind}>{option[opt]}</span>\r\n                                    ))\r\n                                }\r\n                            </Dropdown.Item>\r\n                        ))\r\n                }\r\n            </DropdownButton>\r\n        )\r\n    }\r\n}","import { KeyValue } from \"../../../class/common/keyValue\";\r\n\r\nexport interface DropDownProps {\r\n    options: KeyValue[],\r\n    dropdownKey: string,\r\n    onSelectionChange: (selected: DropDownStates) => void,\r\n    selected?: KeyValue,\r\n    searchBar?: boolean\r\n}\r\n\r\nexport interface DropDownStates {\r\n    dropdownKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    searchKey: string,\r\n}\r\n\r\nexport const initialDropDownStates: DropDownStates = {\r\n    dropdownKey: '',\r\n    originalSelected: new KeyValue({\r\n        key: 0,\r\n        value: \"--None--\"\r\n    }),\r\n    //default value is None\r\n    selected: new KeyValue({\r\n        key: 0,\r\n        value: \"--None--\"\r\n    }),\r\n    searchKey: ''\r\n}","import React from 'react';\r\nimport { DropDownProps, DropDownStates, initialDropDownStates } from './DropDownPropsStates';\r\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport './DropdownList.scss';\r\nimport styled from 'styled-components';\r\nconst SearchInput = styled.input`\r\n    border-radius: 0px;\r\n    border-left: 0px;\r\n    border-right: 0px;\r\n`;\r\nexport class CustomDropDown extends React.Component<DropDownProps, DropDownStates>{\r\n    constructor(props: DropDownProps) {\r\n        super(props);\r\n\r\n        this.state = initialDropDownStates;\r\n        this.onSelectionChangeHandler = this.onSelectionChangeHandler.bind(this);\r\n        this.renderSearchBar = this.renderSearchBar.bind(this);\r\n        this.onSearchInputChangeHandler = this.onSearchInputChangeHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //set selected value for default\r\n        let preSelected = this.props.options[0];    //default option\r\n        if(this.props.selected && this.props.selected.key != null){\r\n            preSelected = this.props.selected;\r\n        }\r\n        \r\n        this.setState({\r\n            selected: preSelected,\r\n            originalSelected: JSON.parse(JSON.stringify(preSelected)),\r\n            dropdownKey: this.props.dropdownKey\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (this.props.selected && this.props.selected.key !== null && JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            this.setState({\r\n                selected: JSON.parse(JSON.stringify(this.props.selected)),\r\n                originalSelected: JSON.parse(JSON.stringify(this.props.selected))\r\n            });\r\n        }\r\n    }\r\n\r\n    renderSearchBar(){\r\n        let result;\r\n        if(this.props.searchBar){\r\n            result = (\r\n                <div className=\"search-bar\">\r\n                    <SearchInput className=\"form-control\" onChange={this.onSearchInputChangeHandler} placeholder=\"Search ...\" />\r\n                    <Dropdown.Divider></Dropdown.Divider>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    onSearchInputChangeHandler(event: any){\r\n        event.preventDefault();\r\n        this.setState({\r\n            searchKey: event.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle selection changed\r\n     * @param eventKey selected key\r\n     * @param event event\r\n     */\r\n    onSelectionChangeHandler(eventKey: any, event: Object) {\r\n        //get the selected option\r\n        let preSelected = this.state.selected;\r\n        for(let i = 0; i < this.props.options.length; i++){\r\n            if(this.props.options[i].key.toString() === eventKey.toString()){\r\n                preSelected = this.props.options[i];\r\n                break;\r\n            }\r\n        }\r\n        //update selected option and send it to parent component\r\n        this.setState({\r\n            selected: preSelected\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DropdownButton id=\"dropdown-box\"  \r\n                title={this.state.selected.value} \r\n                onSelect={this.onSelectionChangeHandler}>\r\n                {\r\n                    this.renderSearchBar()\r\n                }\r\n                {\r\n                    this.props.options.filter((val, index) => {\r\n                        return val.value.indexOf(this.state.searchKey) !== -1 || this.state.searchKey === '';\r\n                    })\r\n                    .map((option, index) => (\r\n                        <Dropdown.Item key={`${option.key}${index}`} eventKey={option.key} className=\"option\" >\r\n                            {option.value}\r\n                        </Dropdown.Item>\r\n                    ))\r\n                }\r\n            </DropdownButton>\r\n        )\r\n    }\r\n}","import { ODateRange } from \"../../../class/common/date-range\";\r\n\r\nexport interface DateRangeProps {\r\n    dateRange?: ODateRange,\r\n    onSelectionChange: (selected: DateRangeStates) => void,\r\n    referenceKey: string\r\n}\r\n\r\nexport interface DateRangeStates {\r\n    referenceKey: string,\r\n    originalDateRange: ODateRange,\r\n    dateRange: ODateRange,\r\n    startDate: any,\r\n    endDate: any\r\n}\r\n\r\nexport const initialDateRangeStates: DateRangeStates = {\r\n    referenceKey: '',\r\n    originalDateRange: new ODateRange(),\r\n    dateRange: new ODateRange(),\r\n    startDate: null,\r\n    endDate: null\r\n}","/**\r\n * Require react-datepicker\r\n */\r\nimport React from 'react';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { DateRangeProps, DateRangeStates, initialDateRangeStates } from './DateRangePropsStates';\r\nimport './DateRange.scss';\r\nimport styled from 'styled-components';\r\nimport { ODateRange } from '../../../class/common/date-range';\r\nconst ContainerDiv = styled.div`\r\n    width: 100%;\r\n`;\r\nconst StartDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nconst EndDateDiv = styled.div`\r\n    display: inline-block;\r\n    width: 50%;\r\n    padding: 0px 20px;\r\n`;\r\nexport class DateRange extends React.Component<DateRangeProps, DateRangeStates>{\r\n    constructor(props: DateRangeProps) {\r\n        super(props);\r\n\r\n        this.state = initialDateRangeStates;\r\n\r\n        this.handleChangeStartDate = this.handleChangeStartDate.bind(this);\r\n        this.handleChangeEndDate = this.handleChangeEndDate.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let dateRange = new ODateRange();\r\n        if (this.props.dateRange) {\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n        }\r\n        this.setState({\r\n            referenceKey: this.props.referenceKey,\r\n            dateRange: dateRange,\r\n            originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(this.props.dateRange){\r\n            let dateRange = new ODateRange();\r\n            dateRange.startDate = this.props.dateRange.startDate || undefined;\r\n            dateRange.endDate = this.props.dateRange.endDate || undefined;\r\n            if (JSON.stringify(this.state.originalDateRange) !== JSON.stringify(dateRange)) {\r\n                this.setState({\r\n                    dateRange: dateRange,\r\n                    originalDateRange: JSON.parse(JSON.stringify(dateRange))\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handle start date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeStartDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: date,\r\n            endDate: this.state.dateRange.endDate\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle end date selection changed\r\n     * @param date selected date\r\n     */\r\n    handleChangeEndDate(date: any) {\r\n        console.log(date);\r\n        let dateRange = new ODateRange({\r\n            startDate: this.state.dateRange.startDate,\r\n            endDate: date\r\n        });\r\n        this.setState({\r\n            dateRange: dateRange\r\n        }, () => {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <StartDateDiv>\r\n                    <div>Start Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        maxDate={this.state.dateRange.endDate}\r\n                        selected={this.state.dateRange.startDate}\r\n                        onChange={this.handleChangeStartDate}\r\n                    />\r\n                </StartDateDiv>\r\n                <EndDateDiv>\r\n                    <div>End Date</div>\r\n                    <ReactDatePicker\r\n                        dateFormat=\"yyyy/MM/dd\"\r\n                        minDate={this.state.dateRange.startDate}\r\n                        selected={this.state.dateRange.endDate}\r\n                        onChange={this.handleChangeEndDate}\r\n                    />\r\n                </EndDateDiv>\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}","import { KeyValue } from \"../../../class/common/keyValue\";\r\n\r\nexport interface ReferenceProps {\r\n    serverUrl: string,\r\n    displayField: string,   //the field will show on search bar\r\n    listFields?: string[],  //the list of field will show in options\r\n    filterCondition?: string,\r\n    onSelectionChange: (selected: ReferenceStates) => void,\r\n    selected?: any,\r\n    default?: KeyValue,\r\n    searchBar?: boolean,\r\n    referenceKey: string\r\n}\r\n\r\nexport interface ReferenceStates {\r\n    referenceKey: string,\r\n    originalSelected: any,\r\n    selected: any,\r\n    selectedValue: string,\r\n    searchKey: string,\r\n    data: any[],\r\n    originalData: any[],\r\n    selectedItems: any[]\r\n}\r\n\r\nexport const initialReferenceStates: ReferenceStates = {\r\n    referenceKey: '',\r\n    //default value is None\r\n    originalSelected: null,\r\n    selected: null,\r\n    selectedValue: '',\r\n    searchKey: '',\r\n    data: [],\r\n    originalData: [],\r\n    selectedItems: []\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\nexport class ReferenceService {\r\n    constructor(config: AxiosRequestConfig) {\r\n        this.getByUrl = this.getByUrl.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get data by url\r\n     */\r\n    public async getByUrl(url: string): Promise<any[]>{\r\n        try {\r\n            const res: AxiosResponse<any[]> = await commonAPI.get<any, AxiosResponse<any[]>>(url);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n}","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from \"axios\";\r\nimport { apiConfig } from \"../configuration/api.config\";\r\n\r\n/**\r\n * ES6 Axios Class.\r\n *\r\n * @class Api\r\n * @extends {Axios}\r\n * @example\r\n * class UserApi extends Api {\r\n *   public constructor (config) {\r\n *     super(config);\r\n *\r\n *     this.login=this.login.bind(this);\r\n *   }\r\n *\r\n *   public login (user: User) {\r\n *     return this.api.post<string, User, AxiosResponse<User>>(\"https://www.domain/login\", {name: user.name, pass: user.pass})\r\n *        .then((res: AxiosResponse<string>) => res.data);\r\n *   }\r\n * }\r\n */\r\nclass Api {\r\n    [x: string]: any;\r\n    numberOfRequest: number;\r\n    api: AxiosInstance;\r\n    /**\r\n     * Creates an instance of Api.\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios configuration.\r\n     * @memberof Api\r\n     */\r\n    public constructor(config?: AxiosRequestConfig) {\r\n        this.api = axios.create(config);\r\n        this.numberOfRequest = 0;\r\n\r\n        this.getUri = this.getUri.bind(this);\r\n        this.request = this.request.bind(this);\r\n        this.get = this.get.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.head = this.head.bind(this);\r\n        this.post = this.post.bind(this);\r\n        this.put = this.put.bind(this);\r\n        this.patch = this.patch.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get Uri\r\n     *\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config]\r\n     * @returns {string}\r\n     * @memberof Api\r\n     */\r\n    public getUri(config?: AxiosRequestConfig): string {\r\n        return this.api.getUri(config);\r\n    }\r\n\r\n    /**\r\n     * Generic request.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP axios response payload.\r\n     * @memberof Api\r\n     *\r\n     * @example\r\n     * api.request({\r\n     *   method: \"GET|POST|DELETE|PUT|PATCH\"\r\n     *   baseUrl: \"http://www.domain.com\",\r\n     *   url: \"/api/v1/users\",\r\n     *   headers: {\r\n     *     \"Content-Type\": \"application/json\"\r\n     *  }\r\n     * }).then((response: AxiosResponse<User>) => response.data)\r\n     *\r\n     */\r\n    public request<T, R = AxiosResponse<T>>(config: AxiosRequestConfig): Promise<R> {\r\n        return this.api.request(config);\r\n    }\r\n\r\n    /**\r\n     * HTTP GET method, used to fetch data `statusCode`: 200.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} HTTP `axios` response payload.\r\n     * @memberof Api\r\n     */\r\n    public get<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.get(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP DELETE method, `statusCode`: 204 No Content.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public delete<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.delete(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP HEAD method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public head<T, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.head(url, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP POST method `statusCode`: 201 Created.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public post<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.post(url, data, config);\r\n    }\r\n\r\n    /**\r\n     * HTTP PUT method.\r\n     *\r\n     * @access public\r\n     * @template T - `TYPE`: expected object.\r\n     * @template B - `BODY`: body request object.\r\n     * @template R - `RESPONSE`: expected object inside a axios response format.\r\n     * @param {string} url - endpoint you want to reach.\r\n     * @param {B} data - payload to be send as the `request body`,\r\n     * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n     * @returns {Promise<R>} - HTTP [axios] response payload.\r\n     * @memberof Api\r\n     */\r\n    public put<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.put(url, data, config);\r\n    }\r\n\r\n    /**\r\n      * HTTP PATCH method.\r\n      *\r\n      * @access public\r\n      * @template T - `TYPE`: expected object.\r\n      * @template B - `BODY`: body request object.\r\n      * @template R - `RESPONSE`: expected object inside a axios response format.\r\n      * @param {string} url - endpoint you want to reach.\r\n      * @param {B} data - payload to be send as the `request body`,\r\n      * @param {import(\"axios\").AxiosRequestConfig} [config] - axios request configuration.\r\n      * @returns {Promise<R>} - HTTP [axios] response payload.\r\n      * @memberof Api\r\n      */\r\n    public patch<T, B, R = AxiosResponse<T>>(url: string, data?: B, config?: AxiosRequestConfig): Promise<R> {\r\n        return this.api.patch(url, data, config);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @template T - type.\r\n     * @param {import(\"axios\").AxiosResponse<T>} response - axios response.\r\n     * @returns {T} - expected object.\r\n     * @memberof Api\r\n     */\r\n    public success<T>(response: AxiosResponse<T>): T {\r\n        return response.data;\r\n    }\r\n\r\n    public error(error: AxiosError<Error>) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport const commonAPI = new Api(apiConfig);","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class DropdownQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  options: {key: string, value: string}[] = [];\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.options = options['options'] || [];\r\n    this.controlType = new FormConfig().questionControlType.dropdown;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextAreaQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textarea;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class TextboxQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n  type: string;\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.type = options['type'] || '';\r\n    this.controlType = new FormConfig().questionControlType.textbox;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\nimport { ODateRange } from '../../../class/common/date-range';\r\n\r\nexport class DateRangeQuestion extends QuestionBase<ODateRange> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.dateRange;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class ReferenceQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.reference;\r\n  }\r\n}\r\n","import { QuestionBase } from './question-base';\r\nimport { FormConfig } from '../form.config';\r\n\r\nexport class CkeditorQuestion extends QuestionBase<string> {\r\n  controlType = '';\r\n\r\n  constructor(options: any) {\r\n    super(options);\r\n    this.controlType = new FormConfig().questionControlType.ckeditor;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport styled from 'styled-components';\r\nimport './Ckeditor.scss';\r\n\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\n\r\nexport class ReactCkeditor extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data={this.props.data}\r\n                    onInit={editor => {\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                        console.log('Editor is ready to use!', editor);\r\n                    }}\r\n                    onChange={(event, editor) => {\r\n                        const data = editor.getData();\r\n                        console.log({ event, editor, data });\r\n                        this.props.dataChange(data, this.props.ckeditorKey);\r\n                    }}\r\n                    onBlur={(event, editor) => {\r\n                        console.log('Blur.', editor);\r\n                    }}\r\n                    onFocus={(event, editor) => {\r\n                        console.log('Focus.', editor);\r\n                    }}\r\n                />\r\n            </ContainerDiv>\r\n        )\r\n    }\r\n}\r\n\r\nReactCkeditor.propTypes = {\r\n    data: PropTypes.string.isRequired,\r\n    dataChange: PropTypes.func.isRequired,\r\n    ckeditorKey: PropTypes.string.isRequired\r\n}","import React from 'react';\r\nimport { ReferenceProps, ReferenceStates, initialReferenceStates } from './ReferencePropsStates';\r\nimport { TextField,Checkbox } from '@material-ui/core';\r\nimport Autocomplete, { AutocompleteCloseReason, AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport './ReferenceList.scss';\r\nimport { ReferenceService } from './Reference.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nexport class ReferenceMultipleList extends React.Component<ReferenceProps, ReferenceStates>{\r\n    referenceService: ReferenceService;\r\n    constructor(props: ReferenceProps) {\r\n        super(props);\r\n\r\n        this.state = initialReferenceStates;\r\n        this.referenceService = new ReferenceService(apiConfig.apiConfig);\r\n        this.onCloseDropdown = this.onCloseDropdown.bind(this);\r\n        this.onChangeDropdown = this.onChangeDropdown.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //set selected value for default\r\n        let selected = this.state.selected;\r\n        if (this.props.selected)\r\n            selected = this.props.selected;\r\n        else if (this.props.default)\r\n            selected = [this.props.default.key];\r\n\r\n        let allReference = await this.referenceService.getByUrl(this.props.serverUrl);\r\n        let displayedData: any[] = [];\r\n        allReference.forEach(element => {\r\n            let newObj = JSON.parse(JSON.stringify(element));   //clone object\r\n            //remove the fields that do not display\r\n            if (this.props.listFields) {\r\n                for (let p in newObj) {\r\n                    if (this.props.listFields.indexOf(p) === -1 && p !== '_id' && p !== this.props.displayField) {\r\n                        delete newObj[p];\r\n                    }\r\n                }\r\n                displayedData.push(newObj);\r\n            }\r\n        });\r\n        //get selected items\r\n        let selectedItems: any[] = [];\r\n        displayedData.forEach((value) => {\r\n            if (selected && selected.indexOf(value['_id']) !== -1) {\r\n                selectedItems.push(value);\r\n            }\r\n        });\r\n\r\n        this.setState({\r\n            selected: selected,\r\n            selectedItems: selectedItems,\r\n            originalSelected: JSON.parse(JSON.stringify(selected)),\r\n            referenceKey: this.props.referenceKey,\r\n            data: displayedData,\r\n            originalData: allReference\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //listen in case the selected value is retrieved from server\r\n        if (JSON.stringify(this.state.originalSelected) !== JSON.stringify(this.props.selected)) {\r\n            //get selected items\r\n            let selectedItems: any[] = [];\r\n            this.state.data.forEach((value) => {\r\n                if (this.props.selected.indexOf(value['_id']) !== -1) {\r\n                    selectedItems.push(value);\r\n                }\r\n            });\r\n            this.setState({\r\n                selected: this.props.selected,\r\n                originalSelected: JSON.parse(JSON.stringify(this.props.selected)),\r\n                selectedItems: selectedItems\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle action close dropdown list\r\n     * @param event change event\r\n     * @param reason reason for close\r\n     */\r\n    onCloseDropdown(event: React.ChangeEvent<{}>, reason: AutocompleteCloseReason) {\r\n        //update selected value for the parent component\r\n        this.props.onSelectionChange(this.state);\r\n    }\r\n\r\n    /**\r\n     * Handle action change selection\r\n     * @param event change event\r\n     * @param value value selected\r\n     * @param reason reason for change\r\n     */\r\n    onChangeDropdown(event: React.ChangeEvent<{}>, value: any, reason: AutocompleteChangeReason) {\r\n        //extract selected id\r\n        let selected: any[] = [];\r\n        (value as string[]).forEach((val: any) => {\r\n            selected.push(val[\"_id\"]);\r\n        });\r\n        this.setState({\r\n            selectedItems: value,\r\n            selected: selected\r\n        }, ()=> {\r\n            this.props.onSelectionChange(this.state);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Autocomplete\r\n                multiple\r\n                id=\"multiple-checkbox\"\r\n                className=\"font-theme\"\r\n                value={this.state.selectedItems}\r\n                onClose={this.onCloseDropdown}\r\n                onChange={this.onChangeDropdown}\r\n                options={this.state.data}\r\n                disableCloseOnSelect\r\n                getOptionLabel={(option) => option[this.props.displayField]}\r\n                renderOption={(option, { selected }) => (\r\n                    <React.Fragment>\r\n                        <Checkbox\r\n                            icon={icon}\r\n                            checkedIcon={checkedIcon}\r\n                            style={{ marginRight: 8 }}\r\n                            checked={selected}\r\n                        />\r\n                        {\r\n                            Object.keys(option).filter((val) => {\r\n                                return val !== '_id';\r\n                            }).map((opt, ind) => (\r\n                                <span className=\"font-theme\" style={{ paddingRight: '10px' }} key={ind}>{option[opt]}</span>\r\n                            ))\r\n                        }\r\n                    </React.Fragment>\r\n                )}\r\n                style={{ width: '100%' }}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} variant=\"outlined\" label=\"Please select items\" placeholder=\"Search for items ...\" />\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { DynamicFormProps, DynamicFormStates, initialDynamicFormStates } from './DynamicFormPropState';\r\nimport styled from 'styled-components';\r\nimport { QuestionBase } from './questions/question-base';\r\nimport { FormConfig } from './form.config';\r\nimport { CustomDropDown } from '../Variables/DropdownList/DropdownList';\r\nimport { DropDownStates } from '../Variables/DropdownList/DropDownPropsStates';\r\nimport { ReferenceList } from '../Variables/ReferenceList/ReferenceList';\r\nimport { ReferenceStates } from '../Variables/ReferenceList/ReferencePropsStates';\r\nimport { DateRange } from '../Variables/DateRange/DateRange';\r\nimport { DateRangeStates } from '../Variables/DateRange/DateRangePropsStates';\r\nimport './DynamicForm.scss';\r\nimport { ODateRange } from '../../class/common/date-range';\r\nimport { ReactCkeditor } from '../Ckeditor/Ckeditor';\r\nimport { ReferenceMultipleList } from '../Variables/ReferenceList/ReferenceMultipleList';\r\nconst ContainerDiv = styled.div`\r\n`;\r\nconst DangerText: React.CSSProperties = {\r\n    color: 'red',\r\n    fontStyle: 'italic'\r\n};\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nexport class DynamicForm extends React.Component<DynamicFormProps, DynamicFormStates>{\r\n    formConfig: FormConfig;\r\n    constructor(props: DynamicFormProps) {\r\n        super(props);\r\n\r\n        this.formConfig = new FormConfig();\r\n        this.state = initialDynamicFormStates;\r\n\r\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\r\n        this.renderQuestion = this.renderQuestion.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        //handle change\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.onSelectionChangeCallback = this.onSelectionChangeCallback.bind(this);\r\n        this.onSelectionReferenceListChange = this.onSelectionReferenceListChange.bind(this);\r\n        this.onselectionDateRangeChange = this.onselectionDateRangeChange.bind(this);\r\n        this.onCkeditorChange = this.onCkeditorChange.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //wait for update from container element\r\n        let listFields: { [s: string]: any } = {};\r\n        this.props.ListFields.forEach((val) => {\r\n            listFields[val.key] = val.value;\r\n        });\r\n        if (JSON.stringify(this.state.originalListFields) !== JSON.stringify(listFields)) {\r\n            this.setState({\r\n                listFields: listFields,\r\n                originalListFields: JSON.parse(JSON.stringify(listFields))\r\n            }, () => {\r\n                let { errors, valid } = this.validateForm();\r\n                let disabled = !valid;\r\n                this.setState({\r\n                    disableSubmitButton: disabled,\r\n                    errors\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle date range selection changed\r\n     * @param e date range state\r\n     */\r\n    onselectionDateRangeChange(e: DateRangeStates) {\r\n        let listFields = this.state.listFields;\r\n        let newDateRange: ODateRange = e.dateRange;\r\n        listFields[e.referenceKey] = newDateRange;\r\n        this.setState({\r\n            listFields: listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handle reference list selected record\r\n     * @param e reference state\r\n     */\r\n    onSelectionReferenceListChange(e: ReferenceStates) {\r\n        let listFields = this.state.listFields;\r\n        listFields[e.referenceKey] = e.selected;\r\n        this.setState({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle dropdown list change\r\n     * @param e Dropdown state\r\n     */\r\n    onSelectionChangeCallback(e: DropDownStates) {\r\n        let listFields = this.state.listFields;\r\n        listFields[e.dropdownKey] = e.selected;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle input change\r\n     * @param event event\r\n     */\r\n    handleChange(event: any) {\r\n        event.preventDefault();\r\n        const { name, value } = event.target;\r\n        let listFields = this.state.listFields;\r\n        listFields[name] = value;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On ckeditor change handler\r\n     * @param str string value\r\n     * @param key key of question\r\n     */\r\n    onCkeditorChange(str: string, key: string) {\r\n        let listFields = this.state.listFields;\r\n        listFields[key] = str;\r\n        this.setState<never>({\r\n            listFields\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate the form\r\n     */\r\n    validateForm() {\r\n        let valid = true;\r\n        let errors: { [s: string]: string[] } = {};\r\n        this.props.ListFields.forEach(element => {\r\n            errors[element.key] = [];\r\n            switch (element.controlType) {\r\n                case this.formConfig.questionControlType.textbox:\r\n                case this.formConfig.questionControlType.textarea:\r\n                    for (var key1 in element.validators) {\r\n                        switch (key1) {\r\n                            case this.formConfig.formValidators.require:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key] !== \"\")) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.minLength:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length >= element.validators[key].value)) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.maxLength:\r\n                                if (!(this.state.listFields[element.key] && this.state.listFields[element.key].length <= element.validators[key].value)) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key1].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            case this.formConfig.formValidators.email:\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.reference:\r\n                    for (var key2 in element.validators) {\r\n                        switch (key2) {\r\n                            case this.formConfig.formValidators.require:\r\n                                if (!this.state.listFields[element.key] || this.state.listFields[element.key]._id == null) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key2].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.dropdown:\r\n                    for (var key3 in element.validators) {\r\n                        switch (key3) {\r\n                            case this.formConfig.formValidators.require:\r\n                                //not have value or value is 0 = [--none--]\r\n                                if (!this.state.listFields[element.key]\r\n                                    || !this.state.listFields[element.key].key\r\n                                    || this.state.listFields[element.key].key === 0\r\n                                ) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key3].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case this.formConfig.questionControlType.dateRange:\r\n                    for (var key4 in element.validators) {\r\n                        switch (key4) {\r\n                            case this.formConfig.formValidators.require:\r\n                                //not have value or value of one of two date is null\r\n                                if (!this.state.listFields[element.key] ||\r\n                                    this.state.listFields[element.key].startDate == null ||\r\n                                    this.state.listFields[element.key].endDate == null) {\r\n                                    errors[element.key].push(\r\n                                        element.validators[key4].errorMessage\r\n                                    );\r\n                                }\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n        });\r\n        for (var key in errors) {\r\n            if (errors[key].length > 0) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return { errors, valid };\r\n    }\r\n\r\n    /**\r\n     * Render error message base on question key\r\n     * @param questionKey question key\r\n     */\r\n    renderErrorMessage(questionKey: string) {\r\n        //get state.error message base on question key\r\n        let errors = this.state.errors[questionKey];\r\n        //if there is no error => return\r\n        if (!errors) return;\r\n        //else display error message\r\n        return (\r\n            <div style={DangerText}>\r\n                {\r\n                    errors.map((err, i) => (\r\n                        <div key={i}>\r\n                            <span>{err}</span>\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Render questions\r\n     * @param question question definition\r\n     */\r\n    renderQuestion(question: QuestionBase<any>) {\r\n        //depend on type of question => render appropriate element\r\n        switch (question.controlType) {\r\n            case this.formConfig.questionControlType.textbox: //type textbox\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <input className=\"form-control\"\r\n                            onChange={this.handleChange}\r\n                            readOnly={question.readonly}\r\n                            type={question.type}\r\n                            name={question.key}\r\n                            value={this.state.listFields[question.key]}\r\n                            id={question.key} />\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.textarea:    //type text area\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <textarea className=\"form-control\"\r\n                            onChange={this.handleChange}\r\n                            readOnly={question.readonly}\r\n                            rows={question.rows}\r\n                            name={question.key}\r\n                            value={this.state.listFields[question.key]}\r\n                            id={question.key} ></textarea>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.dropdown:    //type dropdown\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <CustomDropDown searchBar={question.searchBar}\r\n                            selected={question.value}\r\n                            dropdownKey={question.key}\r\n                            onSelectionChange={this.onSelectionChangeCallback}\r\n                            options={question.options}></CustomDropDown>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                );\r\n            case this.formConfig.questionControlType.reference:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        {\r\n                            question.multiple ?\r\n                                (\r\n                                    <ReferenceMultipleList serverUrl={question.serverUrl}\r\n                                        displayField={question.displayField}\r\n                                        listFields={question.listFields}\r\n                                        filterCondition={question.filterCondition}\r\n                                        referenceKey={question.key}\r\n                                        searchBar={question.searchBar}\r\n                                        selected={question.value}\r\n                                        onSelectionChange={this.onSelectionReferenceListChange}\r\n                                    ></ReferenceMultipleList>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <ReferenceList serverUrl={question.serverUrl}\r\n                                        displayField={question.displayField}\r\n                                        listFields={question.listFields}\r\n                                        filterCondition={question.filterCondition}\r\n                                        referenceKey={question.key}\r\n                                        searchBar={question.searchBar}\r\n                                        selected={question.value}\r\n                                        onSelectionChange={this.onSelectionReferenceListChange}\r\n                                    ></ReferenceList>\r\n                                )\r\n                        }\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            case this.formConfig.questionControlType.dateRange:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <DateRange referenceKey={question.key}\r\n                            dateRange={question.value}\r\n                            onSelectionChange={this.onselectionDateRangeChange}>\r\n                        </DateRange>\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            case this.formConfig.questionControlType.ckeditor:\r\n                return (\r\n                    <fieldset key={question.key} className=\"form-group\">\r\n                        <label htmlFor={question.key}>\r\n                            <span hidden={!question.validators['required']} style={DangerText}>* </span><span data-text={question.label}>{question.label}</span>\r\n                        </label>\r\n                        <ReactCkeditor\r\n                            data={question.value}\r\n                            dataChange={this.onCkeditorChange}\r\n                            ckeditorKey={question.key}\r\n                        />\r\n                        {this.renderErrorMessage(question.key)}\r\n                    </fieldset>\r\n                )\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <form onSubmit={(e) => { e.preventDefault(); this.props.OnSubmitCallback(this.state) }}>\r\n                    {this.props.ListFields.map((field, i) => (\r\n                        this.renderQuestion(field)\r\n                    ))}\r\n                    <input style={Margin0}\r\n                        type=\"submit\"\r\n                        value=\"Submit\"\r\n                        disabled={this.state.disableSubmitButton}\r\n                        className=\"btn btn-primary btn-block\" />\r\n                </form>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","export * from './DynamicForm';\r\nexport * from './DynamicFormPropState';\r\nexport * from './form.config';\r\nexport * from './class/validator';\r\nexport * from './questions/question-base';\r\nexport * from './questions/question-dropdown';\r\nexport * from './questions/question-textarea';\r\nexport * from './questions/question-textbox';\r\nexport * from './questions/question-daterange';\r\nexport * from './questions/question-reference';\r\nexport * from './questions/question-ckeditor';","import { AxiosRequestConfig } from \"axios\";\r\nconst qs = require(\"qs\");\r\nexport const API_TIMEOUT = Number(process.env.REACT_APP_API_TIMEOUT) || 10000;\r\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL || \"\";\r\n\r\nexport const apiConfig: AxiosRequestConfig = {\r\n    // withCredentials: true,\r\n    timeout: API_TIMEOUT,\r\n    baseURL: REACT_APP_SERVER_URL,\r\n    headers: {\r\n        common: {\r\n            // \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\r\n            // Pragma: \"no-cache\",\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\"\r\n        }\r\n    },\r\n    paramsSerializer: (params: string) => qs.stringify(params, { indices: false })\r\n};\r\n","export class FormConfig {\r\n    formValidators = {          //the understand the value => refer the attributes of Validators in angular form, see in question-control.service.ts\r\n        require: \"required\",\r\n        minLength: \"minLength\",\r\n        maxLength: \"maxLength\",\r\n        email: \"email\"\r\n    }\r\n\r\n    inputTypeDef = {\r\n        button: 'button',\r\n        checkbox: 'checkbox',\r\n        color: 'color',\r\n        date: 'date',\r\n        datetime: 'datetime',\r\n        datetimeLocal: 'datetime-local',\r\n        email: 'email',\r\n        file: 'file',\r\n        hidden: 'hidden',\r\n        image: 'image',\r\n        month: 'month',\r\n        number: 'number',\r\n        password: 'password',\r\n        radio: 'radio',\r\n        range: 'range',\r\n        reset: 'reset',\r\n        search: 'search',\r\n        submit: 'submit',\r\n        tel: 'tel',\r\n        text: 'text',\r\n        time: 'time',\r\n        url: 'url',\r\n        week: 'week'\r\n    }\r\n\r\n    questionControlType = {\r\n        textbox: 'textbox',\r\n        textarea: 'textarea',\r\n        dropdown: 'dropdown',\r\n        reference: 'reference',\r\n        dateRange: 'daterange',\r\n        ckeditor: 'ckeditor'\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nexport class About extends React.Component {\r\n\r\n    render() {\r\n        const myStyleBorder = {\r\n            border: 0\r\n        } as React.CSSProperties;\r\n        const mystyleAbout = {\r\n            width: '90%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div style={mystyleAbout}>\r\n                <section className=\"team1 cid-s05ipp9BuT\" id=\"team1-g\">\r\n                    <div className=\"container align-center\">\r\n                        <h2 className=\"pb-3 mbr-fonts-style mbr-section-title display-2\">\r\n                            OUR AWESOME TEAM\r\n                        </h2>\r\n                        <h3 className=\"pb-5 mbr-section-subtitle mbr-fonts-style mbr-light display-5\">\r\n                            Click any icon or text to edit or style it. Click blue \"Gear\" icon in the top right corner to hide/show text and change the block and cards background, icons count and other.\r\n                        </h3>\r\n                        <div className=\"row media-row\">\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Steven Bruce</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a href=\"https://twitter.com/mobirise\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Anissa Fisher</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"team-item col-lg-3 col-md-6\">\r\n                                <div className=\"item-image\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} alt=\"\" title=\"\" />\r\n                                </div>\r\n                                <div className=\"item-caption py-3\">\r\n                                    <div className=\"item-name px-2\">\r\n                                        <p className=\"mbr-fonts-style display-5\">Thomas Long</p>\r\n                                    </div>\r\n                                    <div className=\"item-role px-2\">\r\n                                        <p>Developer</p>\r\n                                    </div>\r\n                                    <div className=\"item-social pt-2\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/mobirise\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-linkedin socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mobirise/\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/channel/UCt_tncVAetpK5JeM8L-8jyw\" target=\"_blank\">\r\n                                            <span className=\"p-1 socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"map2 cid-s05h5y5RKs\" id=\"map2-9\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-md-8\">\r\n                                <div className=\"google-map\">\r\n                                    <iframe title=\"google map\" frameBorder=\"0\" style={myStyleBorder} src=\"https://www.google.com/maps/embed/v1/place?key=AIzaSyCy9r70T3NYf3PhvVflTo0_zdif2_IoIYs&amp;q=place_id:ChIJ3VvA2VkrdTERuSbE1OXl8E8\" allowFullScreen></iframe>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './Home.scss';\r\nexport class Home extends React.Component {\r\n    render() {\r\n        const myStyle = {\r\n            opacity: '0.5',\r\n            backgroundColor: 'rgb(35, 35, 35)'\r\n        } as React.CSSProperties;\r\n        const myStyleWidth100 = {\r\n            width: '100%'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div>\r\n                <section className=\"cid-s05dw7YB4t mbr-fullscreen mbr-parallax-background\" id=\"header2-1\">\r\n                    <div className=\"mbr-overlay\" style={myStyle}></div>\r\n                    <div className=\"container align-center\">\r\n                        <div className=\"justify-content-md-center\">\r\n                            <div className=\"mbr-white\">\r\n                                <h1 className=\"mbr-section-title mbr-bold pb-3 mbr-fonts-style display-1\">\r\n                                    GrownUp\r\n                                </h1>\r\n                                <p className=\"mbr-text pb-3 mbr-fonts-style display-5\">\r\n                                    Build the future together\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mbr-arrow hidden-sm-down\" aria-hidden=\"true\">\r\n                        <a href=\"#footer\">\r\n                            <i className=\"mbri-down mbr-iconfont\"></i>\r\n                        </a>\r\n                    </div>\r\n                </section>\r\n                <section className=\"header7 cid-s05dxD9ioe\" id=\"header7-2\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"media-content align-right\">\r\n                                <h1 className=\"mbr-section-title mbr-white pb-3 mbr-fonts-style display-1\">\r\n                                    Intro with Video\r\n                                </h1>\r\n                                <div className=\"mbr-section-text mbr-white pb-3\">\r\n                                    <p className=\"mbr-text mbr-fonts-style display-5\">\r\n                                        Intro with background color, paddings and a video on the right. Mobirise helps you cut down development time by providing you with a flexible website editor with a drag and drop interface.\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-figure\" style={myStyleWidth100}>\r\n                                <iframe title=\"introduce-video\" className=\"mbr-embedded-video\" src=\"https://www.youtube.com/embed/uNCr7NdOJgw?rel=0&amp;amp;showinfo=0&amp;autoplay=0&amp;loop=0\" width=\"1280\" height=\"720\" frameBorder=\"0\" allowFullScreen></iframe>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n                <section className=\"testimonials1 cid-s05iIc8MxP\" id=\"testimonials1-h\">\r\n                    <div className=\"container\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"title col-12 align-center\">\r\n                                <h2 className=\"pb-3 mbr-fonts-style display-2\">\r\n                                    WHAT OUR FANTASTIC USERS SAY\r\n                                </h2>\r\n                                <h3 className=\"mbr-section-subtitle mbr-light pb-3 mbr-fonts-style display-5\">\r\n                                    This theme is based on Bootstrap 4 - most powerful mobile first framework\r\n                                </h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container pt-3 mt-2\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"1\" src={`${process.env.PUBLIC_URL}/assets/images/face1.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"2\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"3\" src={`${process.env.PUBLIC_URL}/assets/images/face3.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"4\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"5\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mbr-testimonial p-3 align-center col-12 col-md-6 col-lg-4\">\r\n                                <div className=\"panel-item p-3\">\r\n                                    <div className=\"card-block\">\r\n                                        <div className=\"testimonial-photo\">\r\n                                            <img alt=\"6\" src={`${process.env.PUBLIC_URL}/assets/images/face2.jpg`} />\r\n                                        </div>\r\n                                        <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Excepturi, aspernatur, voluptatibus, atque, tempore molestiae.\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"card-footer\">\r\n                                        <div className=\"mbr-author-name mbr-bold mbr-fonts-style display-7\">\r\n                                            John Smith\r\n                                        </div>\r\n                                        <small className=\"mbr-author-desc mbr-italic mbr-light mbr-fonts-style display-7\">\r\n                                            Developer\r\n                                        </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { logoutUser } from '../../../redux/store/user/actions';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from '../../../redux/store';\r\nimport { User } from '../../../class/user';\r\ntype ToolbarProps = {\r\n    logoutUser: typeof logoutUser,\r\n    user: User\r\n}\r\ntype ToolbarStates = {\r\n}\r\nclass Toolbar extends React.Component<ToolbarProps, ToolbarStates> {\r\n    constructor(props: ToolbarProps) {\r\n        super(props);\r\n\r\n        this.logout = this.logout.bind(this);\r\n        this.renderManagementLink = this.renderManagementLink.bind(this);\r\n        this.renderProfileLink = this.renderProfileLink.bind(this);\r\n        this.renderServiceLink = this.renderServiceLink.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle logout action\r\n     */\r\n    logout() {\r\n        this.props.logoutUser();\r\n    }\r\n\r\n    renderProfileLink() {\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        <span className=\"mbri-user mbr-iconfont mbr-iconfont-btn\"></span>{this.props.user.firstName} {this.props.user.lastName}\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to={`/users/${this.props.user._id}`}>Profile</Link>\r\n                        <Link className=\"nav-link link text-white display-4\" to=\"/login\" onClick={this.logout}>\r\n                            Logout\r\n                        </Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        else {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/login\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render Management Link\r\n     */\r\n    renderManagementLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item dropdown\">\r\n                    <a href=\"#blank-tslink\" className=\"nav-link link text-white dropdown-toggle display-4\" data-toggle=\"dropdown-submenu\" aria-expanded=\"false\">\r\n                        Management\r\n                    </a>\r\n                    <div className=\"dropdown-menu\">\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/projects\">Projects</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/activities\">Activities</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgebases\">Knowledge Bases</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/management/knowledgearticles\">Knowledge Articles</Link>\r\n                        <Link className=\"text-white dropdown-item display-4\" to=\"/users\">Users</Link>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Handle render service link\r\n     */\r\n    renderServiceLink(){\r\n        let result;\r\n        if (this.props.user._id != null && this.props.user._id !== '') {\r\n            result = (\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link link text-white display-4\" to=\"/service\">Services</Link>\r\n                </li>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n    // After the component did mount\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        const mystyles = {\r\n            height: '3.8rem'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <section className=\"menu cid-s05eVtUnGb\" id=\"menu1-7\" style={{zIndex: 100000}}>\r\n                <nav className=\"navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top navbar-toggleable-sm\">\r\n                    <button className=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <div className=\"hamburger\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </div>\r\n                    </button>\r\n                    <div className=\"menu-logo\">\r\n                        <div className=\"navbar-brand\">\r\n                            <span className=\"navbar-logo\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-122x68.jpg`} alt=\"GrownUp\" title=\"\" style={mystyles} />\r\n                                </a>\r\n                            </span>\r\n                            <span className=\"navbar-caption-wrap\">\r\n                                <a className=\"navbar-caption text-white display-4\" href=\"/\">\r\n                                    GrownUp\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav nav-dropdown\" data-app-modern-menu=\"true\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderManagementLink()\r\n                            }\r\n                            {\r\n                                this.renderServiceLink()\r\n                            }\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link link text-white display-4\" to=\"/about\">About Us</Link>\r\n                            </li>\r\n                            {\r\n                                this.renderProfileLink()\r\n                            }\r\n                        </ul>\r\n                        <div className=\"navbar-buttons mbr-section-btn\">\r\n                            <Link className=\"text-white btn btn-sm btn-primary display-4\" to=\"/contact\">Contact Us</Link>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user.currentUser\r\n    }\r\n}\r\nconst MapDispatchToProps = {\r\n    logoutUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(Toolbar);","import { USER_LOGOUT, USER_LOGIN, STORE_USER } from \"./types\";\r\nimport { User } from \"../../../class/user\";\r\n\r\nexport function storeUser(users: User[]){\r\n  return {\r\n    type: STORE_USER,\r\n    payload: users\r\n  };\r\n}\r\n\r\nexport function loginUser(loginUser: User) {\r\n  return {\r\n    type: USER_LOGIN,\r\n    payload: loginUser\r\n  };\r\n}\r\n\r\nexport function logoutUser() {\r\n  return {\r\n    type: USER_LOGOUT,\r\n    meta: {}\r\n  };\r\n}\r\n","import { User } from \"../../../class/user\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const USER_LOGIN = \"USER_LOGIN\";\r\nexport const USER_LOGOUT = \"USER_LOGOUT\";\r\nexport const STORE_USER = \"STORE_USER\";\r\n\r\ninterface UserLoginAction {\r\n  type: typeof USER_LOGIN;\r\n  payload: User;\r\n}\r\n\r\ninterface UserLogoutAction {\r\n  type: typeof USER_LOGOUT;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\ninterface StoreUserAction {\r\n  type: typeof STORE_USER;\r\n  payload: User[];\r\n}\r\n\r\nexport type UserActionTypes = UserLoginAction | UserLogoutAction | StoreUserAction;\r\n","import React from 'react';\r\nexport class Contact extends React.Component {\r\n    render() {\r\n        const formContainer = {\r\n            width: '50%',\r\n            margin: 'auto'\r\n        } as React.CSSProperties;\r\n        return (\r\n            <div className=\"contact-component\">\r\n                <section className=\"mbr-section form4 cid-s05iX5CkzH\" id=\"form4-k\">\r\n                    <div className=\"container\">\r\n                        <div style={formContainer}>\r\n                            <div>\r\n                                <h2 className=\"pb-3 align-left mbr-fonts-style display-2\">\r\n                                    Drop a Line\r\n                                </h2>\r\n                                <div>\r\n                                    <div className=\"icon-block pb-3 align-left\">\r\n                                        <span className=\"icon-block__icon\">\r\n                                            <span className=\"mbri-letter mbr-iconfont\"></span>\r\n                                        </span>\r\n                                        <h4 className=\"icon-block__title align-left mbr-fonts-style display-5\">\r\n                                            Don't hesitate to contact us\r\n                                        </h4>\r\n                                    </div>\r\n                                    <div className=\"icon-contacts pb-3\">\r\n                                        <h5 className=\"align-left mbr-fonts-style display-7\">\r\n                                            Ready for offers and cooperation\r\n                                        </h5>\r\n                                        <p className=\"mbr-text align-left mbr-fonts-style display-7\">\r\n                                            Phone: +84 (0) 33 870 5850 <br />\r\n                                            Email: robertvo.developer.93@mail.com\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div data-form-type=\"formoid\">\r\n                                    <form action=\"https://mobirise.com/\" method=\"POST\" className=\"mbr-form form-with-styler\" data-form-title=\"Mobirise Form\">\r\n                                        <input type=\"hidden\" name=\"email\" data-form-email=\"true\" value=\"NHgs6oyl7goD/2aO9xww+qh9DyXQV7DlGeDDf/DT7dkPO7mgri3MdhyGoeU3Q+oRWWU12LOq8p80NGjERdbxIWvoy+fcupNDheS2fFJMm7aX6zD0pQ7swhjl+LGjC1UD\" />\r\n                                        <div className=\"row\">\r\n                                            <div hidden={true} data-form-alert=\"\" className=\"alert alert-success col-12\">\r\n                                                Thanks for filling out the form!\r\n                                            </div>\r\n                                            <div hidden={true} data-form-alert-danger=\"\" className=\"alert alert-danger col-12\"></div>\r\n                                        </div>\r\n                                        <div className=\"dragArea row\">\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"name\">\r\n                                                <input type=\"text\" name=\"name\" placeholder=\"Your Name\" data-form-field=\"Name\" required={true} className=\"form-control input display-7\" id=\"name-form4-k\" />\r\n                                            </div>\r\n                                            <div className=\"col-md-6  form-group\" data-for=\"phone\">\r\n                                                <input type=\"text\" name=\"phone\" placeholder=\"Phone\" data-form-field=\"Phone\" required={true} className=\"form-control input display-7\" id=\"phone-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"email\" className=\"col-md-12  form-group\">\r\n                                                <input type=\"text\" name=\"email\" placeholder=\"Email\" data-form-field=\"Email\" className=\"form-control input display-7\" required={true} id=\"email-form4-k\" />\r\n                                            </div>\r\n                                            <div data-for=\"message\" className=\"col-md-12  form-group\">\r\n                                                <textarea name=\"message\" placeholder=\"Message\" data-form-field=\"Message\" className=\"form-control input display-7\" id=\"message-form4-k\"></textarea>\r\n                                            </div>\r\n                                            <div className=\"col-md-12 input-group-btn  mt-2 align-center\">\r\n                                                <button type=\"submit\" className=\"btn btn-primary btn-form display-4\">SEND MESSAGE</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","export interface SignUpProp {\r\n\tOnRegister: (form:SignUpState) => void,\r\n\tLoginRedirectLink: string\r\n}\r\n\r\nexport type SignUpState = {\r\n\tfirstName: string,\r\n\tlastName: string,\r\n\temail: string,\r\n\tpassword: string,\r\n\trepassword: string,\r\n\taddress: string,\r\n\tphone: string,\r\n\tredirectLoginPage: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\terrors: any,\r\n\tmandatoryFields: any\r\n}\r\n\r\nexport const initialSignUpState: SignUpState = {\r\n\tfirstName: '',\r\n\tlastName: '',\r\n\temail: '',\r\n\tpassword: '',\r\n\trepassword: '',\r\n\taddress: '',\r\n\tphone: '',\r\n\tredirectLoginPage: false,\r\n\tdisableSubmitButton: true,\r\n\terrors: {\r\n\t\tfirstName: 'First Name is required',\r\n\t\tlastName: 'Last Name is required',\r\n\t\temail: 'Email is required',\r\n\t\tpassword: 'Password is required',\r\n\t\trepassword: 'Re-Password is required'\r\n\t},\r\n\tmandatoryFields: {\r\n\t\tfirstName: true,\r\n\t\tlastName: true,\r\n\t\temail: true,\r\n\t\tpassword: true,\r\n\t\trepassword: true,\r\n\t}\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { SignUpProp, SignUpState, initialSignUpState } from \"./SignUpPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    background-color: #232323;\r\n    padding-top: 30px;\r\n    padding-bottom: 20px;\r\n`;\r\nconst LoginDiv = styled.div`\r\n    width: 400px;\r\n    margin: auto;\r\n    background-color: #e9ecef;\r\n    padding: 40px;\r\n    border-radius: 15px;\r\n`;\r\nconst CustomTextBox: React.CSSProperties = {\r\n    display: 'block',\r\n    width: '100%',\r\n    borderRadius: '.25rem',\r\n    backgroundColor: '#f5f5f5',\r\n    boxShadow: 'none',\r\n    color: '#565656',\r\n    lineHeight: 1.43,\r\n    padding: '1.07em 0.5em',\r\n    height: 'calc(2.25rem + 2px)',\r\n    border: '1px solid #e8e8e8'\r\n}\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst DangerText: React.CSSProperties = {\r\n    color: 'red',\r\n    fontStyle: 'italic'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class SignUp extends Component<SignUpProp, SignUpState> {\r\n    constructor(props: SignUpProp) {\r\n        super(props);\r\n\r\n        //initial variable\r\n        this.state = initialSignUpState;\r\n\r\n        //binding functions\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.validateForm = this.validateForm.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.renderErrorMessage = this.renderErrorMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * handle change value of form\r\n     * @param event Change event\r\n     */\r\n    handleChange(event: any) {\r\n        event.preventDefault();\r\n        const { name, value } = event.target;\r\n        this.setState<never>({\r\n            [name]: value\r\n        }, () => {\r\n            let { errors, valid } = this.validateForm();\r\n            let disabled = !valid;\r\n            this.setState({\r\n                disableSubmitButton: disabled,\r\n                errors\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate the sign up form\r\n     */\r\n    validateForm() {\r\n        let valid = true;\r\n        let errors: { [s: string]: string } = {};\r\n        errors['firstName'] = this.state.firstName.length > 0 ? \"\" : \"First Name is required\";\r\n        errors['lastName'] = this.state.lastName.length > 0 ? \"\" : \"Last Name is required\";\r\n        errors['email'] = this.state.email.length > 0 ? \"\" : \"Email is required\";\r\n        errors['password'] = this.state.password.length > 0 ? \"\" : \"Password is required\";\r\n        errors['repassword'] = this.state.repassword.length > 0 ? \"\" : \"Re-Password is required\";\r\n        if(this.state.repassword  !== \"\" && this.state.password !== this.state.repassword){\r\n            errors.repassword = \"Password and Re-Password are not match\";\r\n        }\r\n\r\n        for (var key in errors) {\r\n            if (errors[key].length > 0) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        return { errors, valid };\r\n    }\r\n\r\n    /**\r\n     * Render error message base on question key\r\n     * @param questionKey question key\r\n     */\r\n    renderErrorMessage(questionKey: string) {\r\n        //get state.error message base on question key\r\n        let errors = this.state.errors[questionKey];\r\n        //if there is no error => return\r\n        if (!errors || errors === \"\") return;\r\n        //else display error message\r\n        return (\r\n            <div style={DangerText}>\r\n                {\r\n                    <div key={questionKey}>\r\n                        <span>{errors}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handle redirect to login page\r\n     */\r\n    handleLogin() {\r\n        this.setState({\r\n            redirectLoginPage: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectLoginPage) {\r\n            return <Redirect push={true} to={this.props.LoginRedirectLink} />\r\n        }\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => { e.preventDefault(); this.props.OnRegister(this.state) }}>\r\n                        <h3 style={TextCenter}>Sign Up</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"First name\">First name</span>\r\n                            </label>\r\n                            <input name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"First name\" />\r\n                            {this.renderErrorMessage('firstName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Last name\">Last name</span>\r\n                            </label>\r\n                            <input name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Last name\" />\r\n                            {this.renderErrorMessage('lastName')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Email address\">Email address</span>\r\n                            </label>\r\n                            <input name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter email\" />\r\n                            {this.renderErrorMessage('email')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Password\">Password</span>\r\n                            </label>\r\n                            <input name=\"password\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter password\" />\r\n                            {this.renderErrorMessage('password')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"repassword\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Re-Password\">Re-Password</span>\r\n                            </label>\r\n                            <input name=\"repassword\"\r\n                                type=\"password\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Re-Enter password\" />\r\n                            {this.renderErrorMessage('repassword')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"address\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Address\">Address</span>\r\n                            </label>\r\n                            <input name=\"address\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter address\" />\r\n                            {this.renderErrorMessage('address')}\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"phone\">\r\n                                <span style={DangerText}>* </span><span data-text=\"Phone\">Phone</span>\r\n                            </label>\r\n                            <input name=\"phone\"\r\n                                type=\"text\"\r\n                                onChange={this.handleChange}\r\n                                style={CustomTextBox}\r\n                                placeholder=\"Enter phone Number\" />\r\n                            {this.renderErrorMessage('phone')}\r\n                        </div>\r\n\r\n                        <button style={Margin0}\r\n                            disabled={this.state.disableSubmitButton}\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary btn-block\">\r\n                            Sign Up\r\n                        </button>\r\n                        <p className=\"forgot-password text-right\">\r\n                            Already registered <LinkA onClick={this.handleLogin}>Login?</LinkA>\r\n                        </p>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","import { KeyValue } from \"../class/common/keyValue\"\r\n\r\nexport class Config {\r\n    apiServiceURL = {\r\n        server: `${process.env.REACT_APP_SERVER_URL}`,\r\n        serverAPI: `${process.env.REACT_APP_SERVER_URL}/api`,\r\n        users: `${process.env.REACT_APP_SERVER_URL}/api/users`,\r\n        login: `${process.env.REACT_APP_SERVER_URL}/api/login`,\r\n        register:`${process.env.REACT_APP_SERVER_URL}/api/register`,\r\n        todo: `${process.env.REACT_APP_SERVER_URL}/api/todos`,\r\n        activities: `${process.env.REACT_APP_SERVER_URL}/api/activities`,\r\n        knowledgeBases: `${process.env.REACT_APP_SERVER_URL}/api/knowledgebases`,\r\n        knowledgeArticles: `${process.env.REACT_APP_SERVER_URL}/api/knowledgearticles`,\r\n        projects: `${process.env.REACT_APP_SERVER_URL}/api/projects`\r\n    }\r\n\r\n    commonMessage = {\r\n        loginError: 'Login error!!!',\r\n        userNotFound: 'User not found!!!',\r\n        signUpError: 'Register error!!!'\r\n    }\r\n\r\n    alertVariants = {\r\n        primary :'primary',\r\n        secondar :'secondary',\r\n        success :'success',\r\n        danger :'danger',\r\n        warning :'warning',\r\n        info :'info',\r\n        light :'light',\r\n        dark :'dark'\r\n    }\r\n\r\n    activityStatus:any = {\r\n        'open': new KeyValue({key: 1, value: 'Open'}),\r\n        'inProgress': new KeyValue({key: 2, value: 'In Progress'}),\r\n        'completed': new KeyValue({key: 3, value: 'Completed'}),\r\n        'onPending': new KeyValue({key: 4, value: 'Pending'}),\r\n        'closed': new KeyValue({key: 5, value: 'Closed'}),\r\n        'cancelled': new KeyValue({key: 6, value: 'Cancelled'})\r\n    }\r\n\r\n    defaultDropDownOptions = {\r\n        all: new KeyValue({key: -1, value: '--All--'}),\r\n        none: new KeyValue({key: 0, value: '--None--'})\r\n    }\r\n\r\n    datetimeFormat = {\r\n        yyyyMMdd: 'yyyy/MM/dd',\r\n        ddMMyyyy: 'dd/mm/yyyy'\r\n    }\r\n\r\n    localStorageKey = {\r\n        appState: \"application_state\"\r\n    }\r\n}","import { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Credentials } from \"../../../interface/Credentials\";\r\nimport { User } from \"../../../class/user\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { JwtResponse } from \"../../../class/common/response-data\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\n\r\n/**\r\n * Example class\r\n *\r\n * @export\r\n * @class UserServiceApi\r\n * @extends {Api}\r\n *\r\n * @example\r\n * const axiosConfig = {\r\n *  baseUrl: \"www.domain.com\"\r\n * }\r\n * const api = new UserServiceApi(axiosConfig);\r\n *  */\r\nexport class UserServiceApi {\r\n    config: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor(configs: AxiosRequestConfig) {\r\n        // // this middleware is been called right before the http request is made.\r\n        // this.interceptors.request.use((param: AxiosRequestConfig) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        // // this middleware is been called right before the response is get it by the method that triggers the request\r\n        // this.interceptors.response.use((param: AxiosResponse) => ({\r\n        //     ...param\r\n        // }));\r\n\r\n        this.userLogin = this.userLogin.bind(this);\r\n        this.userRegister = this.userRegister.bind(this);\r\n        this.getAllUsers = this.getAllUsers.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n        this.config = new Config();\r\n        this.axiosConfig = configs;\r\n    }\r\n\r\n    public userLogin(credentials: Credentials): Promise<JwtResponse> {\r\n        return commonAPI.post<string, Credentials, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.login, credentials)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            });\r\n    }\r\n\r\n    public userRegister(user: User): Promise<JwtResponse> {\r\n        return commonAPI.post<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.register, user)\r\n            .then((res)=>{\r\n                //TODO: handle auth\r\n                localStorage.setItem(\"CURRENT_USER\", JSON.stringify(res));\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public updateUser(user: User): Promise<JwtResponse> {\r\n        return commonAPI.put<number, User, AxiosResponse<JwtResponse>>(this.config.apiServiceURL.users, user)\r\n            .then((res)=>{\r\n                return commonAPI.success(res);\r\n            })\r\n            .catch((error: AxiosError<Error>) => {\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public async deleteRecords(objs: User[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.config.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async getAllUsers(): Promise<User[]> {\r\n        try {\r\n            const res: AxiosResponse<User[]> = await commonAPI.get<User, AxiosResponse<User[]>>(this.config.apiServiceURL.users);\r\n            return commonAPI.success(res);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public getById(id: number): Promise<User> {\r\n        return commonAPI.get<User, AxiosResponse<User>>(`${this.config.apiServiceURL.users}/${id}`).then(commonAPI.success);\r\n    }\r\n}\r\n","export class User {\r\n    constructor(obj?: any){\r\n        this._id        = (obj && obj._id)?         obj._id : null;\r\n        this.userId     = (obj && obj.userId)?      obj.userId : '';\r\n        this.email      = (obj && obj.email)?       obj.email : '';\r\n        this.password   = (obj && obj.password)?    obj.password : '';\r\n        this.firstName  = (obj && obj.firstName)?   obj.firstName : '';\r\n        this.lastName   = (obj && obj.lastName)?    obj.lastName : '';\r\n        this.phone      = (obj && obj.phone)?       obj.phone : '';\r\n        this.address    = (obj && obj.address)?     obj.address : '';\r\n        this.token      = (obj && obj.token)?       obj.token : '';\r\n    }\r\n    _id: any;\r\n    userId: string;\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    phone: string;\r\n    address: string;\r\n    token: string\r\n}","import React from 'react';\r\nimport Alert, { AlertProps } from 'react-bootstrap/Alert';\r\nimport styled from 'styled-components';\r\nimport './Alert.scss';\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    top: -20px;\r\n    width: 100%;\r\n    z-index: 1000000;\r\n    padding: 30px;\r\n`;\r\nconst CloseButton = styled.div`\r\n    float: right;\r\n    margin-top: -18px;\r\n    cursor: pointer;\r\n    margin-right: -10px;\r\n`;\r\nconst AlertStyle: React.CSSProperties = {\r\n    borderRadius: '.25rem'\r\n};\r\ntype AlertStates = {\r\n    show?: boolean\r\n}\r\nexport class AlertDiv extends React.Component<AlertProps, AlertStates> {\r\n    constructor(props:AlertProps){\r\n        super(props);\r\n        this.state = {\r\n            show: this.props.show\r\n        }\r\n\r\n        this.setShow = this.setShow.bind(this);\r\n    }\r\n    setShow(flag: boolean){\r\n        this.setState({\r\n            show: flag\r\n        });\r\n    }\r\n    handleOnCloseButton(){\r\n        return this.props.onClose? this.props.onClose() : null;\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <ContainerDiv>\r\n                {this.state.show ? (\r\n                    <Alert style={AlertStyle}\r\n                        key={this.props.key} \r\n                        variant={this.props.variant}>\r\n                        <CloseButton onClick={()=> this.handleOnCloseButton()}>\r\n                            <strong>x</strong>\r\n                        </CloseButton>\r\n                        {this.props.value}\r\n                    </Alert>\r\n                ) : ''\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","import { User } from \"../../../class/user\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport interface UserProps extends RouteComponentProps<any>{\r\n\r\n}\r\n\r\nexport interface UserStates {\r\n    user: User;\r\n}\r\n\r\nexport const initialUserState : UserStates = {\r\n    user: new User()\r\n}","import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { UserServiceApi } from './User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { User } from '../../../class/user';\r\nimport { UserProps, UserStates, initialUserState } from './UserPropsStates';\r\nimport styled from 'styled-components';\r\nimport { \r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion, DynamicFormStates \r\n} from '../../../share-components/DynamicForm';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n`;\r\n\r\nclass UserComponent extends React.Component<UserProps, UserStates> {\r\n    userService: UserServiceApi;\r\n    formConfig: FormConfig;\r\n    constructor(props: UserProps) {\r\n        super(props);\r\n\r\n        this.state = initialUserState;\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.formConfig = new FormConfig();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let user = await this.userService.getById(this.props.match.params['userId']);\r\n        this.setState({\r\n            user: user\r\n        });\r\n    }\r\n    \r\n    handleSubmit(form: DynamicFormStates) {\r\n        let user = new User(form.listFields);\r\n        console.log(user);\r\n        this.userService.updateUser(user).then((result)=>{\r\n            console.log(result);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    getQuestion(user: User) {\r\n        let questions: QuestionBase<string>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'email',\r\n            label: 'Email',\r\n            value: user.email,\r\n            type: this.formConfig.inputTypeDef.email,\r\n            readonly: true,\r\n            order: 10\r\n        }));\r\n        \r\n        //Add first name text\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'First name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'firstName',\r\n            label: 'First name',\r\n            value: user.firstName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 20\r\n        }));\r\n\r\n        //Add last name text\r\n        validators = {};\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Last name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'lastName',\r\n            label: 'Last name',\r\n            value: user.lastName,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 30\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'address',\r\n            label: 'Address',\r\n            value: user.address,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 40\r\n        }));\r\n\r\n        //Add last name text\r\n        questions.push(new TextboxQuestion({\r\n            key: 'phone',\r\n            label: 'Phone',\r\n            value: user.phone,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 50\r\n        }));\r\n        return questions;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.user);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(UserComponent);","import React from 'react';\r\n// A great library for fuzzy filtering/sorting items\r\nimport matchSorter from 'match-sorter';\r\n\r\n// Define a default UI for filtering\r\nexport function DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n\r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onClick={e=> e.stopPropagation()}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n        />\r\n    )\r\n}\r\n\r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nexport function SelectColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the options for filtering\r\n    // using the preFilteredRows\r\n    const options = React.useMemo(() => {\r\n        const options = new Set()\r\n        preFilteredRows.forEach(row => {\r\n            options.add(row.values[id])\r\n        })\r\n        return [...options.values()]\r\n    }, [id, preFilteredRows])\r\n\r\n    // Render a multi-select box\r\n    return (\r\n        <select\r\n            value={filterValue}\r\n            onClick={e=> e.stopPropagation()}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined)\r\n            }}\r\n        >\r\n            <option value=\"\">All</option>\r\n            {options.map((option, i) => (\r\n                <option key={i} value={option}>\r\n                    {option}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    )\r\n}\r\n\r\n// This is a custom filter UI that uses a\r\n// slider to set the filter value between a column's\r\n// min and max values\r\nexport function SliderColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the min and max\r\n    // using the preFilteredRows\r\n\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={filterValue || min}\r\n                onChange={e => {\r\n                    setFilter(parseInt(e.target.value, 10))\r\n                }}\r\n            />\r\n            <button onClick={() => setFilter(undefined)}>Off</button>\r\n        </>\r\n    )\r\n}\r\n\r\n// This is a custom UI for our 'between' or number range\r\n// filter. It uses two number boxes and filters rows to\r\n// ones that have values between the two\r\nexport function NumberRangeColumnFilter({\r\n    column: { filterValue = [], preFilteredRows, setFilter, id },\r\n}) {\r\n    const [min, max] = React.useMemo(() => {\r\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\r\n        preFilteredRows.forEach(row => {\r\n            min = Math.min(row.values[id], min)\r\n            max = Math.max(row.values[id], max)\r\n        })\r\n        return [min, max]\r\n    }, [id, preFilteredRows])\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'flex',\r\n            }}\r\n        >\r\n            <input\r\n                value={filterValue[0] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n                }}\r\n                placeholder={`Min (${min})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginRight: '0.5rem',\r\n                }}\r\n            />\r\n      to\r\n            <input\r\n                value={filterValue[1] || ''}\r\n                type=\"number\"\r\n                onChange={e => {\r\n                    const val = e.target.value\r\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n                }}\r\n                placeholder={`Max (${max})`}\r\n                style={{\r\n                    width: '70px',\r\n                    marginLeft: '0.5rem',\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function fuzzyTextFilterFn(rows, id, filterValue) {\r\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\r\n}\r\n\r\n// Let the table remove the filter if the string is empty\r\nfuzzyTextFilterFn.autoRemove = val => !val\r\n\r\n// Define a custom filter filter function!\r\nexport function filterGreaterThan(rows, id, filterValue) {\r\n    return rows.filter(row => {\r\n        const rowValue = row.values[id]\r\n        return rowValue >= filterValue\r\n    })\r\n}\r\n\r\n// This is an autoRemove method on the filter function that\r\n// when given the new filter value and returns true, the filter\r\n// will be automatically removed. Normally this is just an undefined\r\n// check, but here, we want to remove the filter if it's not a number\r\nfilterGreaterThan.autoRemove = val => typeof val !== 'number';","import React from 'react';\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\n//Add selection\r\nexport const IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n        const defaultRef = React.useRef();\r\n        const resolvedRef = ref || defaultRef;\r\n\r\n        React.useEffect(() => {\r\n            resolvedRef.current.indeterminate = indeterminate;\r\n        }, [resolvedRef, indeterminate]);\r\n\r\n        return (\r\n            <>\r\n                <Checkbox type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n            </>\r\n        );\r\n    }\r\n);","import React from 'react'\r\n\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport LastPageIcon from '@material-ui/icons/LastPage'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}))\r\n\r\nconst TablePaginationActions = props => {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const { count, page, rowsPerPage, onChangePage } = props\r\n\r\n  const handleFirstPageButtonClick = event => {\r\n    onChangePage(event, 0)\r\n  }\r\n\r\n  const handleBackButtonClick = event => {\r\n    onChangePage(event, page - 1)\r\n  }\r\n\r\n  const handleNextButtonClick = event => {\r\n    onChangePage(event, page + 1)\r\n  }\r\n\r\n  const handleLastPageButtonClick = event => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default TablePaginationActions\r\n","import React from 'react'\r\n\r\nimport InputBase from '@material-ui/core/InputBase'\r\nimport { fade, makeStyles } from '@material-ui/core/styles'\r\nimport PropTypes from 'prop-types'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing(7),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: 200,\r\n    },\r\n  },\r\n}))\r\n\r\nconst GlobalFilter = ({\r\n  preGlobalFilteredRows,\r\n  globalFilter = '',\r\n  setGlobalFilter,\r\n}) => {\r\n  const classes = useStyles()\r\n  const count = preGlobalFilteredRows.length\r\n\r\n  // Global filter only works with pagination from the first page.\r\n  // This may not be a problem for server side pagination when\r\n  // only the current page is downloaded.\r\n\r\n  return (\r\n    <div className={classes.search}>\r\n      <div className={classes.searchIcon}>\r\n        <SearchIcon />\r\n      </div>\r\n      <InputBase\r\n        value={globalFilter || ''}\r\n        onChange={e => {\r\n          setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        classes={{\r\n          root: classes.inputRoot,\r\n          input: classes.inputInput,\r\n        }}\r\n        inputProps={{ 'aria-label': 'search' }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nGlobalFilter.propTypes = {\r\n  preGlobalFilteredRows: PropTypes.array.isRequired,\r\n  setGlobalFilter: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GlobalFilter\r\n","import React from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport {\r\n\tSelect, IconButton, Toolbar, Typography,\r\n\tTooltip, FormControl, InputLabel, Input, MenuItem,\r\n\tCheckbox, ListItemText\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types'\r\nimport GlobalFilter from '../Filter/GlobalFilter';\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n\tformControl: {\r\n\t\tmargin: theme.spacing(1),\r\n\t\tminWidth: 120,\r\n\t\tmaxWidth: 300,\r\n\t},\r\n\troot: {\r\n\t\tpaddingLeft: theme.spacing(2),\r\n\t\tpaddingRight: theme.spacing(1),\r\n\t},\r\n\thighlight:\r\n\t\ttheme.palette.type === 'light'\r\n\t\t\t? {\r\n\t\t\t\tcolor: theme.palette.secondary.main,\r\n\t\t\t\tbackgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n\t\t\t}\r\n\t\t\t: {\r\n\t\t\t\tcolor: theme.palette.text.primary,\r\n\t\t\t\tbackgroundColor: theme.palette.secondary.dark,\r\n\t\t\t},\r\n\ttitle: {\r\n\t\tflex: '1 1 100%',\r\n\t},\r\n}))\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n\tPaperProps: {\r\n\t\tstyle: {\r\n\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n\t\t\twidth: 250,\r\n\t\t},\r\n\t},\r\n};\r\n\r\nconst TableToolbar = props => {\r\n\tconst classes = useToolbarStyles()\r\n\tconst {\r\n\t\tnumSelected,\r\n\t\tdeleteRecordHandler,\r\n\t\taddRecordHandler,\r\n\t\tpreGlobalFilteredRows,\r\n\t\tsetGlobalFilter,\r\n\t\tglobalFilter = '',\r\n\t\tTableName = '',\r\n\t\tallColumns,\r\n\t} = props\r\n\treturn (\r\n\t\t<Toolbar\r\n\t\t\tclassName={clsx(classes.root, {\r\n\t\t\t\t[classes.highlight]: numSelected > 0,\r\n\t\t\t})}\r\n\t\t>\r\n\t\t\t{\r\n\t\t\t\taddRecordHandler.toString() !== \"() => {}\" ?\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t<Tooltip title=\"Add\">\r\n\t\t\t\t\t\t\t<IconButton aria-label=\"add\" onClick={addRecordHandler}>\r\n\t\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div></div>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\t{numSelected > 0 ? (\r\n\t\t\t\t<Typography\r\n\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\tcolor=\"inherit\"\r\n\t\t\t\t\tvariant=\"subtitle1\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{numSelected} selected\r\n\t\t\t\t</Typography>\r\n\t\t\t) : (\r\n\t\t\t\t\t<Typography className={classes.title} variant=\"h6\" id=\"tableTitle\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tTableName\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t)}\r\n\r\n\t\t\t{numSelected > 0 ? (\r\n\t\t\t\t<Tooltip title=\"Delete\">\r\n\t\t\t\t\t<IconButton aria-label=\"delete\" onClick={deleteRecordHandler}>\r\n\t\t\t\t\t\t<DeleteIcon />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t) : (\r\n\t\t\t\t\t<GlobalFilter\r\n\t\t\t\t\t\tpreGlobalFilteredRows={preGlobalFilteredRows}\r\n\t\t\t\t\t\tglobalFilter={globalFilter}\r\n\t\t\t\t\t\tsetGlobalFilter={setGlobalFilter}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel id=\"columns-visible-label\">Columns</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"columns-visible-label\"\r\n\t\t\t\t\tid=\"columns-visible-select\"\r\n\t\t\t\t\tmultiple\r\n\t\t\t\t\tvalue={[\"Select columns\"]}\r\n\t\t\t\t\tinput={<Input />}\r\n\t\t\t\t\trenderValue={(selected) => selected.join(', ')}\r\n\t\t\t\t\tMenuProps={MenuProps}\r\n\t\t\t\t>\r\n\t\t\t\t\t{allColumns.map(column => (\r\n\t\t\t\t\t\t<MenuItem key={column.id} value={column.id}>\r\n\t\t\t\t\t\t\t<Checkbox {...column.getToggleHiddenProps()} />\r\n\t\t\t\t\t\t\t<ListItemText primary={column.id} />\r\n\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</Toolbar>\r\n\t)\r\n}\r\n\r\nTableToolbar.propTypes = {\r\n\tnumSelected: PropTypes.number.isRequired,\r\n\taddRecordHandler: PropTypes.func.isRequired,\r\n\tdeleteRecordHandler: PropTypes.func.isRequired,\r\n\tsetGlobalFilter: PropTypes.func.isRequired,\r\n\tpreGlobalFilteredRows: PropTypes.array.isRequired,\r\n\tallColumns: PropTypes.array.isRequired\r\n}\r\n\r\nexport default TableToolbar\r\n","import React from 'react';\r\nimport {\r\n    useTable,\r\n    usePagination,\r\n    useFilters,\r\n    useGlobalFilter,\r\n    useRowSelect,\r\n    useSortBy\r\n} from \"react-table\";\r\nimport * as filter from './Filter/Filter';\r\nimport { IndeterminateCheckbox } from './Selection/RowSelection';\r\nimport PropTypes from 'prop-types';\r\nimport { TableContainer, TableHead, TableRow, TableCell, TableBody, TableFooter, TablePagination, TableSortLabel } from '@material-ui/core';\r\nimport MaUTable from '@material-ui/core/Table'\r\nimport TablePaginationActions from './Pagination/TablePaginationActions';\r\nimport TableToolbar from './Toolbar/TableToolbar';\r\nimport './Table.scss';\r\n\r\n// Our table component\r\nexport function Table({\r\n    columns,\r\n    data,\r\n    fetchData,\r\n    pageCount: controlledPageCount,\r\n    skipPageReset = true,\r\n    deleteRecordHandler = (selectedId) => { },\r\n    addRecordHandler = () => { },\r\n    TableName = ''\r\n}) {\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            // Add a new fuzzyTextFilterFn filter type.\r\n            fuzzyText: filter.fuzzyTextFilterFn,\r\n            // Or, override the default text filter to use\r\n            // \"startWith\"\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter(row => {\r\n                    const rowValue = row.values[id]\r\n                    return rowValue !== undefined\r\n                        ? String(rowValue)\r\n                            .toLowerCase()\r\n                            .startsWith(String(filterValue).toLowerCase())\r\n                        : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n    )\r\n\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Let's set up our default Filter UI\r\n            Filter: filter.DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        gotoPage,\r\n        setPageSize,\r\n        allColumns,\r\n        preGlobalFilteredRows,\r\n        setGlobalFilter,\r\n        state: { pageIndex, pageSize, selectedRowIds, globalFilter },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn, // Be sure to pass the defaultColumn option\r\n            filterTypes,\r\n            autoResetPage: !skipPageReset,  //reset page after change (filter)\r\n            pageCount: controlledPageCount,\r\n            manualPagination: true, // Tell the usePagination\r\n        },\r\n        useGlobalFilter,\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect,\r\n        hooks => {\r\n            hooks.allColumns.push(columns => [\r\n                // Let's make a column for selection\r\n                {\r\n                    id: \"selection\",\r\n                    // The header can use the table's getToggleAllRowsSelectedProps method\r\n                    // to render a checkbox\r\n                    Header: ({ getToggleAllRowsSelectedProps }) => (\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n                        </div>\r\n                    ),\r\n                    // The cell can use the individual row's getToggleRowSelectedProps method\r\n                    // to the render a checkbox\r\n                    Cell: ({ row }) => (\r\n                        <div style={{ textAlign: \"center\" }}>\r\n                            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n                        </div>\r\n                    )\r\n                },\r\n                ...columns\r\n            ]);\r\n        }\r\n    )\r\n\r\n    // Listen for changes in pagination and use the state to fetch our new data\r\n    React.useEffect(() => {\r\n        fetchData({ pageIndex, pageSize })\r\n    }, [fetchData, pageIndex, pageSize])\r\n\r\n    //Change row per page in pagination\r\n    const handleChangeRowsPerPage = event => {\r\n        setPageSize(Number(event.target.value))\r\n    }\r\n    //Change the selected page\r\n    const handleChangePage = (event, newPage) => {\r\n        gotoPage(newPage)\r\n    }\r\n    //pre-do to get selected record\r\n    const preDeleteRecordHandler = () => {\r\n        //get index of selected record\r\n        let selectedRowIndex = Object.keys(selectedRowIds).map(x => parseInt(x, 10));\r\n        //filter record\r\n        let selectedRecord = data.filter((_, i) => {\r\n            return selectedRowIndex.includes(i)\r\n        });\r\n        //send the record to handle page\r\n        deleteRecordHandler(selectedRecord);\r\n    }\r\n\r\n    return (\r\n        <TableContainer className=\"ReactTable\">\r\n            <TableToolbar\r\n                numSelected={Object.keys(selectedRowIds).length}\r\n                deleteRecordHandler={preDeleteRecordHandler}\r\n                addRecordHandler={addRecordHandler}\r\n                TableName={TableName}\r\n                preGlobalFilteredRows={preGlobalFilteredRows}\r\n                setGlobalFilter={setGlobalFilter}\r\n                globalFilter={globalFilter}\r\n                allColumns={allColumns}\r\n            />\r\n            <MaUTable {...getTableProps()} className=\"react-custom-table\">\r\n                <TableHead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <TableCell\r\n                                    {...(column.id === 'selection'\r\n                                        ? column.getHeaderProps()\r\n                                        : column.getHeaderProps(column.getSortByToggleProps()))}\r\n                                >\r\n                                    {column.render('Header')}\r\n                                    {column.id !== 'selection' ? (\r\n                                        <TableSortLabel\r\n                                            active={column.isSorted}\r\n                                            // react-table has a unsorted state which is not treated here\r\n                                            direction={column.isSortedDesc ? 'desc' : 'asc'}\r\n                                        />\r\n                                    ) : null}\r\n                                    <div className=\"table-header-filter\">\r\n                                        {(column.canFilter && !column.columnDisableGlobalFilter) ? column.render('Filter') : null}\r\n                                    </div>\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    ))}\r\n                </TableHead>\r\n                <TableBody {...getTableBodyProps()}>\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <TableRow {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return (\r\n                                        <TableCell {...cell.getCellProps()}>\r\n                                            {cell.render('Cell')}\r\n                                        </TableCell>\r\n                                    )\r\n                                })}\r\n                            </TableRow>\r\n                        )\r\n                    })}\r\n                </TableBody>\r\n                <TableFooter className=\"pagination\">\r\n                    <TableRow>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[\r\n                                5,\r\n                                10,\r\n                                25,\r\n                                50,\r\n                                100,\r\n                                { label: 'All', value: controlledPageCount },\r\n                            ]}\r\n                            colSpan={10000}\r\n                            count={controlledPageCount}\r\n                            rowsPerPage={pageSize}\r\n                            page={pageIndex}\r\n                            SelectProps={{\r\n                                inputProps: { 'aria-label': 'rows per page' },\r\n                                native: true,\r\n                            }}\r\n                            onChangePage={handleChangePage}\r\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </MaUTable>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nTable.propTypes = {\r\n    columns: PropTypes.array.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    fetchData: PropTypes.func.isRequired,\r\n    pageCount: PropTypes.number.isRequired,\r\n    deleteRecordHandler: PropTypes.func.isRequired\r\n}","import React, { Component } from 'react';\r\nimport './UserContainer.scss';\r\nimport { User } from '../../../class/user';\r\nimport { connect } from 'react-redux';\r\nimport { UserServiceApi } from '../../../components/Management/Users/User.service';\r\nimport * as apiConfig from '../../../configuration/api.config';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport  UserComponent  from '../../../components/Management/Users/User';\r\nimport { storeUser } from '../../store/user/actions';\r\nimport { AppState } from '../../store';\r\nimport styled from 'styled-components';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface UserContainerProps {\r\n    user: any,\r\n    storeUser: typeof storeUser\r\n}\r\ninterface UserContainerStates {\r\n    allUser: User[],\r\n    userList: User[],\r\n    isLoading: boolean,\r\n    skipPageReset: boolean,\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nclass UserContainer extends Component<UserContainerProps, UserContainerStates>{\r\n    userService: UserServiceApi;\r\n    constructor(props: UserContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allUser: [],\r\n            userList: [],\r\n            isLoading: false,\r\n            skipPageReset: false\r\n        }\r\n        this.userService = new UserServiceApi(apiConfig.apiConfig);\r\n        this.getUserByFilter = this.getUserByFilter.bind(this);\r\n        this.deleteUserHandler = this.deleteUserHandler.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getUserByFilter({pageSize: 10, pageIndex: 0});\r\n    }\r\n\r\n    async getUserByFilter(pagination: Pagination){\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let users = this.state.allUser;\r\n        if(users.length === 0){\r\n            users = await this.userService.getAllUsers();\r\n            this.props.storeUser(users);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allUser: users,\r\n            userList: users.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    async deleteUserHandler(records: User[]){\r\n        if(window.confirm(\"Do you want to delete the selected record(s)?\")){\r\n            await this.userService.deleteRecords(records);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Email',\r\n                accessor: 'email',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`users/${row.original._id}`}>{row.original.email}</Link>)\r\n            },\r\n            {\r\n                Header: 'First Name',\r\n                accessor: 'firstName'\r\n            },\r\n            {\r\n                Header: 'Last Name',\r\n                accessor: 'lastName'\r\n            },\r\n            {\r\n                Header: 'Phone',\r\n                accessor: 'phone'\r\n            },\r\n            {\r\n                Header: 'Address',\r\n                accessor: 'address'\r\n            }];\r\n        return (\r\n            <Switch>\r\n                <Route exact path='/users'>\r\n                    <ContainerDiv className=\"user-list\">\r\n                        <Table columns={columns} \r\n                            data={this.state.userList} \r\n                            pageCount={this.state.allUser.length}\r\n                            fetchData={this.getUserByFilter}\r\n                            deleteRecordHandler={this.deleteUserHandler}\r\n                            TableName=\"Users\"\r\n                        />\r\n                    </ContainerDiv>\r\n                </Route>\r\n                <Route path={`/users/:userId`}>\r\n                    <UserComponent></UserComponent>\r\n                </Route>\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        userList: store.user\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeUser\r\n}\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(UserContainer)","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ActivityService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Activity[]> {\r\n        try {\r\n            const res: AxiosResponse<Activity[]> = await commonAPI.get(this.configs.apiServiceURL.activities);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Activity> {\r\n        try {\r\n            const res: AxiosResponse<Activity> = await commonAPI.get(`${this.configs.apiServiceURL.activities}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Activity): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.activities}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Activity[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.activities}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { ODateRange } from \"./common/date-range\";\r\nimport { KeyValue } from \"./common/keyValue\";\r\nimport { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\n\r\nexport class Activity {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.description = obj ? obj.description : '';\r\n        this.implemetationPlan = obj ? obj.implemetationPlan : '';\r\n        this.planDate = obj ? obj.planDate : new ODateRange();\r\n        this.actualDate = obj ? obj.actualDate : new ODateRange();\r\n        this.status = obj ? obj.status : new KeyValue();\r\n        this.assignedTo = obj ? obj.assignedTo : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    description: string;\r\n    implemetationPlan: string;\r\n    planDate: ODateRange;\r\n    actualDate: ODateRange;\r\n    status: KeyValue;\r\n    assignedTo: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Activity } from \"../../../class/activity\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ActivityProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ActivityStates {\r\n    errors:{[s:string]: string[]},\r\n    activity: Activity,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialActivityStates: ActivityStates = {\r\n    errors: {},\r\n    activity: new Activity(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst ContainerDiv = styled.div`\r\n    margin: auto;\r\n    padding-top: 15px;\r\n    border-bottom: 0.2px solid #b0b0b0;\r\n`;\r\nexport interface BreakLineProps {\r\n    cssProperties?: React.CSSProperties\r\n}\r\nexport class BreakLine extends React.Component<BreakLineProps> {\r\n\r\n    render(){\r\n        return(\r\n            this.props.cssProperties ? \r\n            (\r\n                <div style={this.props.cssProperties}></div>\r\n            )\r\n            :\r\n            (\r\n                <ContainerDiv></ContainerDiv>\r\n            )\r\n            \r\n        );\r\n    }\r\n}","import { Comment } from \"../../class/common/comment\";\r\nimport { User } from \"../../class/user\";\r\n\r\nexport interface CommentProps {\r\n    comments: Comment[],\r\n    onSubmitComment: (form: CommentStates) => void,\r\n    loginUser: User\r\n}\r\nexport interface CommentStates {\r\n    comments: Comment[],\r\n    newComment: string\r\n}\r\nexport const initialCommentStates: CommentStates = {\r\n    comments: [],\r\n    newComment: ''\r\n}","import { User } from \"../user\";\r\n\r\nexport class Comment {\r\n    constructor(obj?: any){\r\n        this.target = obj ? obj.target : null;\r\n        this.comment = obj ? obj.comment : null;\r\n        this.userComment = obj ? obj.userComment : null;\r\n        this.commentDate = obj ? obj.commentDate : null;\r\n    }\r\n    target: string; //target Object's _id\r\n    comment: string;\r\n    userComment: User;\r\n    commentDate: string;\r\n}","import React from 'react';\r\nimport { CommentProps, CommentStates, initialCommentStates } from './CommentLogPropsStates';\r\nimport styled from 'styled-components';\r\nimport { Comment } from '../../class/common/comment';\r\n\r\nconst LeftDiv = styled.div`\r\n    float: left;\r\n`;\r\nconst RightDiv = styled.div`\r\n    float: right;\r\n`;\r\nconst ContainerDiv = styled.div`\r\n\r\n`;\r\nconst ButtonCustom = styled.button`\r\n    float: right;\r\n    margin-top: 10px;\r\n    border-radius: .25rem;\r\n    border: 0.5px solid #c9c9c9;\r\n    width: 50px;\r\n    height: 28px;\r\n    cursor: pointer;\r\n`;\r\nconst ContainerInlineBlock = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    border-bottom: 0.5px solid gray;\r\n    padding-bottom: 5px;\r\n`;\r\nconst CommentDiv = styled.div`\r\n    border: 0.5px solid gray;\r\n    border-radius: .25rem;\r\n    padding: 15px;\r\n    margin-top: 10px;\r\n`;\r\nexport class CommentLog extends React.Component<CommentProps, CommentStates> {\r\n    constructor(props: CommentProps) {\r\n        super(props);\r\n\r\n        this.state = initialCommentStates;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentTitle = this.renderCommentTitle.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        if(this.props.comments){\r\n            this.setState({\r\n                comments: this.props.comments\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle event textarea change data\r\n     * @param e textarea changed\r\n     */\r\n    handleChange(e: any) {\r\n        this.setState({\r\n            newComment: e.target.value\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle submit comment\r\n     */\r\n    handleSubmitComment() {\r\n        let current = new Date();\r\n        let comments = this.state.comments;\r\n        let newComment = new Comment({\r\n            userComment: this.props.loginUser,\r\n            comment: this.state.newComment,\r\n            commentDate: current.toUTCString()\r\n        });\r\n        comments.push(newComment);\r\n        this.setState({\r\n            comments: comments,\r\n            newComment: ''\r\n        }, () => {\r\n            this.props.onSubmitComment(this.state); //callback\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render Comment title\r\n     */\r\n    renderCommentTitle(){\r\n        let result;\r\n        if(this.state.comments.length > 0){\r\n            result = (\r\n                <div>Activities ({this.state.comments.length}):</div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * in case of html string => need this function to convert to html dom\r\n     * @param comment comment\r\n     */\r\n    renderCommentRawHTML(comment: string){\r\n        return (\r\n            <div dangerouslySetInnerHTML={{__html: comment}}></div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <div className=\"comment-new\">\r\n                    <div>Note <textarea value={this.state.newComment} onChange={this.handleChange} className=\"form-control\" rows={2}></textarea></div>\r\n                    <ContainerInlineBlock>\r\n                        <ButtonCustom onClick={this.handleSubmitComment}>Post</ButtonCustom>\r\n                    </ContainerInlineBlock>\r\n                </div>\r\n                <div className=\"comment-list\">\r\n                    {\r\n                        this.renderCommentTitle()\r\n                    }\r\n                    {\r\n                        this.state.comments.slice(0).reverse().map((com, ind) => (\r\n                            <CommentDiv className=\"comment\" key={ind}>\r\n                                <ContainerInlineBlock className=\"comment-header\">\r\n                                    <LeftDiv className=\"comment-user\">\r\n                                        {\r\n                                        `${com.userComment.firstName} ${com.userComment.lastName}`\r\n                                        }\r\n                                    </LeftDiv>\r\n                                    <RightDiv className=\"comment-date\">\r\n                                        {\r\n                                            com.commentDate\r\n                                        }\r\n                                    </RightDiv>\r\n                                </ContainerInlineBlock>\r\n                                <div className=\"comment-content\">\r\n                                    {\r\n                                        this.renderCommentRawHTML(com.comment)\r\n                                    }\r\n                                </div>\r\n                            </CommentDiv>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","export class CommonService {\r\n\r\n    /**\r\n     * convert date type to string base on format\r\n     * @param date date\r\n     * @param format format ex: yyyyMMdd or yyyyMMdd HHmmmSS ..etc\r\n     */\r\n    convertDateToStringByFormat(date: Date, format: string): string {\r\n        let result: string = '';\r\n        var year = date.getFullYear();\r\n        var month = date.getMonth() + 1;\r\n        var day = date.getDate();\r\n        var hour = date.getHours();\r\n        var minute = date.getMinutes();\r\n        var second = date.getSeconds();\r\n        result = format.replace('yyyy', year.toString())\r\n            .replace('MM', this.fixedFormatTwoDigit(month))\r\n            .replace('dd', this.fixedFormatTwoDigit(day))\r\n            .replace('HH', this.fixedFormatTwoDigit(hour))\r\n            .replace('mmm', this.fixedFormatTwoDigit(minute))\r\n            .replace('SS', this.fixedFormatTwoDigit(second));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * return the number with two fixed digits\r\n     * @param number source number\r\n     */\r\n    fixedFormatTwoDigit(number: number): string {\r\n        let result: string = '';\r\n        result = number < 10 ? ('0' + number.toString()) : number.toString();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * A short demo for compare two object. easiest way to compare object is JSON.stringify(obj)\r\n     * @param object1 object 1\r\n     * @param object2 object 2\r\n     */\r\n    compareTwoObject<T>(object1: T, object2: T): boolean {\r\n        let result: boolean = false;\r\n        //step 1: convert two object to {[s: string] : any} object\r\n        let obj1: { [s: string]: any } = {};\r\n        let obj2: { [s: string]: any } = {};\r\n        for (let [key, value] of Object.entries(object1)) {\r\n            obj1[key] = value;\r\n        }\r\n        for (let [key, value] of Object.entries(object2)) {\r\n            obj2[key] = value;\r\n        }\r\n        //step 2: loop through all properties to check out\r\n        for (let p in obj1) {\r\n            if (JSON.stringify(obj1[p]) !== JSON.stringify(obj2[p])) {\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","import React from 'react';\r\nimport './Activity.scss';\r\nimport { ActivityProps, ActivityStates, initialActivityStates } from './ActivityPropsState';\r\nimport styled from 'styled-components';\r\nimport { ActivityService } from './Activity.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, DropdownQuestion, DateRangeQuestion, ReferenceQuestion, TextAreaQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Activity } from '../../../class/activity';\r\nimport { KeyValue } from '../../../class/common/keyValue';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ActivityComponent extends React.Component<ActivityProps, ActivityStates> {\r\n    config: Config;\r\n    activityService: ActivityService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityProps) {\r\n        super(props);\r\n\r\n        this.state = initialActivityStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getActivityUpdated = this.getActivityUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let activityId = this.props.match.params['activityId'];\r\n        if (activityId !== \"createnew\") {\r\n            let activity = await this.activityService.getById(this.props.match.params['activityId']);\r\n            this.setState({\r\n                activity: activity,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit activity\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get activity object from dynamic form\r\n        let activity = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.activityService.update(activity);\r\n        }\r\n        else {\r\n            res = await this.activityService.createNew(activity);\r\n        }\r\n        //find out which part is updated\r\n        let activityChanged = this.getActivityUpdated(activity);\r\n        if (activityChanged !== \"\") {\r\n            let activityId = this.state.isEditRecord ? activity._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: activityId,\r\n                comment: activityChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            activity.comments.push(nComment);\r\n            //update comment\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            activity: activity\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted activity with current activity to find out which parts are updated\r\n     * use to show in activity log\r\n     * @param activity new activity\r\n     */\r\n    getActivityUpdated(activity: Activity) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.activity) !== JSON.stringify(activity)) {\r\n            if (JSON.stringify(this.state.activity.description) !== JSON.stringify(activity.description)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Description:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.description\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.implemetationPlan) !== JSON.stringify(activity.implemetationPlan)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Implemetation Plan:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    activity.implemetationPlan\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.status) !== JSON.stringify(activity.status)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Status:</div>\r\n                                <div>Status</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.status ?\r\n                                        `${activity.status.value}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.assignedTo) !== JSON.stringify(activity.assignedTo)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Assigned to:</div>\r\n                                <div>Assigned To</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(activity.assignedTo && activity.assignedTo._id) ?\r\n                                        `${activity.assignedTo.firstName} ${activity.assignedTo.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.planDate) !== JSON.stringify(activity.planDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Plan date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.planDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.planDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.planDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.activity.actualDate) !== JSON.stringify(activity.actualDate)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Actual date:</div>\r\n                                <div>Start date</div>\r\n                                <div>End date</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {activity.actualDate.startDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.startDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                                <div>\r\n                                    {activity.actualDate.endDate ?\r\n                                        this.commonService.convertDateToStringByFormat(activity.actualDate.endDate, this.config.datetimeFormat.yyyyMMdd)\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to activity\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Activity {\r\n        let currentAct = this.state.activity;\r\n        let formAct = new Activity(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let activity = this.state.activity;\r\n        activity.comments = form.comments;\r\n        activity.comments.forEach((val) => {\r\n            val.target = activity._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.activityService.updateComment(activity.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        activity: activity\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate activity questions\r\n     * @param activity activity object\r\n     */\r\n    getQuestion(activity: Activity) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'description',\r\n            label: 'Description',\r\n            value: activity.description,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 10\r\n        }));\r\n\r\n        //Add implementation plan text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Implementation plan is required.'\r\n        };\r\n        questions.push(new TextAreaQuestion({\r\n            key: 'implemetationPlan',\r\n            label: 'Implemetation Plan',\r\n            value: activity.implemetationPlan,\r\n            validators: validators,\r\n            rows: 5,\r\n            order: 20\r\n        }));\r\n\r\n        let options: KeyValue[] = [];\r\n        Object.keys(this.config.activityStatus).forEach((opt, ind) => {\r\n            options.push(this.config.activityStatus[opt]);\r\n        });\r\n        options = options.sort((a, b) => a.key - b.key);\r\n        options.unshift(this.config.defaultDropDownOptions.none);   //default value\r\n        //Add Status text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Status is required.'\r\n        };\r\n        questions.push(new DropdownQuestion({\r\n            key: 'status',\r\n            label: 'Status',\r\n            value: activity.status,\r\n            validators: validators,\r\n            options: options,\r\n            searchBar: true,\r\n            order: 50\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'assignedTo',\r\n            label: 'Assigned to',\r\n            value: activity.assignedTo,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 60\r\n        }));\r\n\r\n\r\n        //Add plan date\r\n        let dateRange = activity.planDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Plan date is required.'\r\n        };\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'planDate',\r\n            label: 'Plan',\r\n            value: dateRange,\r\n            validators: validators,\r\n            order: 70\r\n        }));\r\n\r\n        //Add actual date\r\n        dateRange = activity.actualDate;\r\n        dateRange.startDate = dateRange.startDate ? new Date(dateRange.startDate) : undefined;\r\n        dateRange.endDate = dateRange.endDate ? new Date(dateRange.endDate) : undefined;\r\n        questions.push(new DateRangeQuestion({\r\n            key: 'actualDate',\r\n            label: 'Actual',\r\n            value: dateRange,\r\n            order: 80\r\n        }));\r\n        return questions;\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.activity.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.activity);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ActivityComponent);","import './ActivityContainer.scss';\r\nimport React, { Component } from 'react';\r\nimport { Activity } from '../../../class/activity';\r\nimport { ActivityService } from '../../../components/Management/Activities/Activity.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ActivityComponent from '../../../components/Management/Activities/Activity';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeActivities } from '../../store/activity/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\nimport { SelectColumnFilter } from '../../../share-components/Table/Filter/Filter';\r\n\r\ninterface ActivityContainerProps {\r\n    user: any,\r\n    storeActivities: typeof storeActivities\r\n}\r\ninterface ActivityContainerStates {\r\n    allActivity: Activity[],\r\n    activityList: Activity[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ActivityContainer extends Component<ActivityContainerProps, ActivityContainerStates> {\r\n    activityService: ActivityService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ActivityContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allActivity: [],\r\n            activityList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.activityService = new ActivityService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getActivityByFilter = this.getActivityByFilter.bind(this);\r\n        this.deleteActivityHandler = this.deleteActivityHandler.bind(this);\r\n        this.addActivityHandler = this.addActivityHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getActivityByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let activities = this.state.allActivity;\r\n        if (activities.length === 0) {\r\n            activities = await this.activityService.getAllData();\r\n            this.props.storeActivities(activities);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allActivity: activities,\r\n            activityList: activities.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete activity\r\n     * @param records deleted records\r\n     */\r\n    async deleteActivityHandler(records: Activity[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.activityService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addActivityHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/activities/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Description',\r\n                id: 'description',\r\n                accessor: 'description',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`activities/${row.original._id}`}>{row.original.description}</Link>)\r\n            },\r\n            {\r\n                Header: 'Implementation Plan',\r\n                id: 'implemetationPlan',\r\n                accessor: 'implemetationPlan',\r\n            },\r\n            {\r\n                Header: 'Plan date',\r\n                id: 'planDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'planStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.startDate) {\r\n                                let accessor = new Date(row.planDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'planEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.planDate && row.planDate.endDate) {\r\n                                let accessor = new Date(row.planDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Actual date',\r\n                id: 'actualDate',\r\n                columns: [\r\n                    {\r\n                        Header: 'Start date',\r\n                        id: 'actualStartDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.startDate) {\r\n                                let accessor = new Date(row.actualDate.startDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    },\r\n                    {\r\n                        Header: 'End date',\r\n                        id: 'actualEndDate',\r\n                        accessor: (row: Activity) => {\r\n                            let result = '';\r\n                            if (row.actualDate && row.actualDate.endDate) {\r\n                                let accessor = new Date(row.actualDate.endDate);\r\n                                result = this.commonService.convertDateToStringByFormat(accessor, this.config.datetimeFormat.yyyyMMdd)\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                Header: 'Status',\r\n                id: 'status',\r\n                // disableFilters: true,\r\n                Filter: SelectColumnFilter,\r\n                filter: 'includes',\r\n                accessor: (row: Activity) => {\r\n                    let result = '';\r\n                    if (row.status) {\r\n                        result = row.status.value\r\n                    }\r\n                    return result;\r\n                },\r\n            },\r\n            {\r\n                Header: 'Assigned to',\r\n                id: 'assignedTo',\r\n                accessor: (row: Activity) => row.assignedTo ? `${row.assignedTo.firstName} ${row.assignedTo.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/activities\">\r\n                        <ContainerDiv className=\"activity-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.activityList}\r\n                                pageCount={this.state.allActivity.length}\r\n                                fetchData={this.getActivityByFilter}\r\n                                deleteRecordHandler={this.deleteActivityHandler}\r\n                                addRecordHandler={this.addActivityHandler}\r\n                                TableName=\"Activities\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/activities/:activityId`}>\r\n                        <ActivityComponent loginUser={this.props.user.currentUser}></ActivityComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        activityList: store.activities\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeActivities\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ActivityContainer)","import { REMOVE_ACTIVITIES, STORE_ACTIVITIES } from \"./types\";\r\nimport { Activity } from \"../../../class/activity\";\r\n\r\nexport function storeActivities(acts: Activity[]) {\r\n  return {\r\n    type: STORE_ACTIVITIES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeActivities(timestamp: number) {\r\n  return {\r\n    type: REMOVE_ACTIVITIES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Activity } from \"../../../class/activity\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_ACTIVITIES = \"STORE_ACTIVITIES\";\r\nexport const REMOVE_ACTIVITIES = \"REMOVE_ACTIVITIES\";\r\n\r\ninterface StoreActivitiesAction {\r\n  type: typeof STORE_ACTIVITIES;\r\n  payload: Activity[];\r\n}\r\n\r\ninterface RemoveActivitiesAction {\r\n  type: typeof REMOVE_ACTIVITIES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ActivityActionTypes = StoreActivitiesAction | RemoveActivitiesAction;\r\n","export interface LoginProps {\r\n\tOnLogin: (form:LoginState) => void,\r\n\tForgotPasswordRedirectLink: string,\r\n\tRegisterPageRedirectLink: string\r\n}\r\n\r\nexport type LoginState = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe: boolean,\r\n\tdisableSubmitButton: boolean,\r\n\tredirectForgotPassword: boolean,\r\n\tredirectRegisterPage: boolean\r\n}\r\n\r\nexport const initialLoginState: LoginState = {\r\n\temail: '',\r\n\tpassword: '',\r\n\trememberMe: false,\r\n\tdisableSubmitButton: true,\r\n\tredirectForgotPassword: false,\r\n\tredirectRegisterPage: false\r\n}","//style Bootstrap\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { LoginProps, LoginState, initialLoginState } from \"./LoginPropsStates\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Container = styled.div`\r\n            background-color: #232323;\r\n            padding-top: 30px;\r\n            padding-bottom: 20px;\r\n        `;\r\nconst LoginDiv = styled.div`\r\n            width: 400px;\r\n            margin: auto;\r\n            background-color: #e9ecef;\r\n            padding: 40px;\r\n            border-radius: 15px;\r\n        `;\r\nconst LinkDiv = styled.div`\r\n            margin-top: 15px;\r\n        `;\r\nconst Margin0: React.CSSProperties = {\r\n    margin: 0\r\n};\r\nconst TextCenter: React.CSSProperties = {\r\n    textAlign: 'center'\r\n};\r\nconst LinkA = styled.a`\r\n    color: #149dcc !important;\r\n`;\r\nexport default class Login extends Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = initialLoginState;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeByClick = this.handleChangeByClick.bind(this);\r\n        this.handleForgotPassowrd = this.handleForgotPassowrd.bind(this);\r\n        this.handleRegisterPage = this.handleRegisterPage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Handle change form's fields\r\n     * @param event change event\r\n     */\r\n    handleChange(event: any) {\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.value\r\n        }, ()=>{\r\n            let disabled = this.state.email !== '' && this.state.password !== '' ? false : true;\r\n            this.setState({\r\n                disableSubmitButton: disabled\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle state change by click\r\n     * @param event click event\r\n     */\r\n    handleChangeByClick(event: any){\r\n        this.setState<never>({\r\n            [event.target.name]: event.target.checked\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle forgot password click link\r\n     */\r\n    handleForgotPassowrd(){\r\n        this.setState({\r\n            redirectForgotPassword: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handle click register page\r\n     */\r\n    handleRegisterPage(){\r\n        this.setState({\r\n            redirectRegisterPage: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //redirect to forgot password page\r\n        if(this.state.redirectForgotPassword){\r\n            return <Redirect push={true} to={this.props.ForgotPasswordRedirectLink} />\r\n        }\r\n        //redirect to register page\r\n        if(this.state.redirectRegisterPage){\r\n            return <Redirect push={true} to={this.props.RegisterPageRedirectLink}/>\r\n        }\r\n        //load login form\r\n        return (\r\n            <Container>\r\n                <LoginDiv>\r\n                    <form onSubmit={(e) => {e.preventDefault(); this.props.OnLogin(this.state)}}>\r\n                        <h3 style={TextCenter}>Login</h3>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Email address</strong></label>\r\n                            <input name=\"email\" \r\n                                type=\"email\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter email\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label><strong>Password</strong></label>\r\n                            <input name=\"password\" \r\n                                type=\"password\" \r\n                                onChange={this.handleChange} \r\n                                className=\"form-control\" \r\n                                placeholder=\"Enter password\" />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"custom-control custom-checkbox\">\r\n                                <input name=\"rememberMe\"\r\n                                    type=\"checkbox\" \r\n                                    className=\"custom-control-input\" \r\n                                    onClick={this.handleChangeByClick}\r\n                                    id=\"customCheck1\" />\r\n                                <label className=\"custom-control-label\" htmlFor=\"customCheck1\">\r\n                                    <strong>Remember me</strong>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <input style={Margin0} \r\n                            type=\"submit\" \r\n                            value=\"Submit\" \r\n                            className=\"btn btn-primary btn-block\" \r\n                            disabled={this.state.disableSubmitButton}\r\n                            />                        \r\n                        <LinkDiv>\r\n                            <p className=\"float-left\">\r\n                                <LinkA className=\"App-link\" onClick={this.handleRegisterPage}>Sign Up</LinkA>\r\n                            </p>\r\n                            <p className=\"float-right\">\r\n                                Forgot <LinkA onClick={this.handleForgotPassowrd}>password?</LinkA>\r\n                            </p>\r\n                        </LinkDiv>\r\n                    </form>\r\n                </LoginDiv>\r\n            </Container>\r\n        );\r\n    }\r\n}","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeBaseService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeBase[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeBases);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeBase> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeBase> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeBases}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeBase): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeBases}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeBase[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeBases}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\nexport class KnowledgeBase {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.owner = obj ? obj.owner : new User();\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    owner: User;\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeBaseProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeBaseStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeBase: KnowledgeBase,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeBaseStates: KnowledgeBaseStates = {\r\n    errors: {},\r\n    knowledgeBase: new KnowledgeBase(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { KnowledgeBaseProps, KnowledgeBaseStates, initialKnowledgeBaseStates } from './KnowledgeBasePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeBaseService } from './KnowledgeBase.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass KnowledgeBaseComponent extends React.Component<KnowledgeBaseProps, KnowledgeBaseStates> {\r\n    config: Config;\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeBaseStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getKnowledgeBaseUpdated = this.getKnowledgeBaseUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeBaseId = this.props.match.params['knowledgeBaseId'];\r\n        if (knowledgeBaseId !== \"createnew\") {\r\n            let knowledgeBase = await this.knowledgeBaseService.getById(this.props.match.params['knowledgeBaseId']);\r\n            this.setState({\r\n                knowledgeBase: knowledgeBase,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeBase object from dynamic form\r\n        let knowledgeBase = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.knowledgeBaseService.update(knowledgeBase);\r\n        }\r\n        else {\r\n            res = await this.knowledgeBaseService.createNew(knowledgeBase);\r\n        }\r\n        //find out which part is updated\r\n        let knowledgeBaseChanged = this.getKnowledgeBaseUpdated(knowledgeBase);\r\n        if (knowledgeBaseChanged !== \"\") {\r\n            let knowledgeBaseId = this.state.isEditRecord ? knowledgeBase._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: knowledgeBaseId,\r\n                comment: knowledgeBaseChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            knowledgeBase.comments.push(nComment);\r\n            //update comment\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            knowledgeBase: knowledgeBase\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted knowledgeBase with current knowledgeBase to find out which parts are updated\r\n     * use to show in knowledgeBase log\r\n     * @param knowledgeBase new knowledgeBase\r\n     */\r\n    getKnowledgeBaseUpdated(knowledgeBase: KnowledgeBase) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.knowledgeBase) !== JSON.stringify(knowledgeBase)) {\r\n            if (JSON.stringify(this.state.knowledgeBase.name) !== JSON.stringify(knowledgeBase.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    knowledgeBase.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.knowledgeBase.owner) !== JSON.stringify(knowledgeBase.owner)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Owner:</div>\r\n                                <div>Owner</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(knowledgeBase.owner && knowledgeBase.owner._id) ?\r\n                                        `${knowledgeBase.owner.firstName} ${knowledgeBase.owner.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeBase\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeBase {\r\n        let currentAct = this.state.knowledgeBase;\r\n        let formAct = new KnowledgeBase(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let knowledgeBase = this.state.knowledgeBase;\r\n        knowledgeBase.comments = form.comments;\r\n        knowledgeBase.comments.forEach((val) => {\r\n            val.target = knowledgeBase._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeBaseService.updateComment(knowledgeBase.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        knowledgeBase: knowledgeBase\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeBase questions\r\n     * @param knowledgeBase knowledgeBase object\r\n     */\r\n    getQuestion(knowledgeBase: KnowledgeBase) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: knowledgeBase.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add assigned to text\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'owner',\r\n            label: 'Owner',\r\n            value: knowledgeBase.owner,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        return questions;\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.knowledgeBase.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeBase);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeBaseComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeBase } from '../../../class/knowledgeBase';\r\nimport { KnowledgeBaseService } from '../../../components/Management/KnowledgeBase/KnowledgeBase.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeBaseComponent from '../../../components/Management/KnowledgeBase/KnowledgeBase';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeBases } from '../../store/knowledgeBase/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeBaseContainerProps {\r\n    user: any,\r\n    storeKnowledgeBases: typeof storeKnowledgeBases\r\n}\r\ninterface KnowledgeBaseContainerStates {\r\n    allKnowledgeBase: KnowledgeBase[],\r\n    knowledgeBaseList: KnowledgeBase[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass KnowledgeBaseContainer extends Component<KnowledgeBaseContainerProps, KnowledgeBaseContainerStates> {\r\n    knowledgeBaseService: KnowledgeBaseService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeBaseContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeBase: [],\r\n            knowledgeBaseList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeBaseService = new KnowledgeBaseService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeBaseByFilter = this.getKnowledgeBaseByFilter.bind(this);\r\n        this.deleteKnowledgeBaseHandler = this.deleteKnowledgeBaseHandler.bind(this);\r\n        this.addKnowledgeBaseHandler = this.addKnowledgeBaseHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeBaseByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeBases = this.state.allKnowledgeBase;\r\n        if (knowledgeBases.length === 0) {\r\n            knowledgeBases = await this.knowledgeBaseService.getAllData();\r\n            this.props.storeKnowledgeBases(knowledgeBases);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeBase: knowledgeBases,\r\n            knowledgeBaseList: knowledgeBases.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeBase\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeBaseHandler(records: KnowledgeBase[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeBaseService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeBaseHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgebases/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgebases/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Owner',\r\n                id: 'owner',\r\n                accessor: (row: KnowledgeBase) => row.owner ? `${row.owner.firstName} ${row.owner.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgebases\">\r\n                        <ContainerDiv className=\"knowledgeBase-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.knowledgeBaseList}\r\n                                pageCount={this.state.allKnowledgeBase.length}\r\n                                fetchData={this.getKnowledgeBaseByFilter}\r\n                                deleteRecordHandler={this.deleteKnowledgeBaseHandler}\r\n                                addRecordHandler={this.addKnowledgeBaseHandler}\r\n                                TableName=\"Knowledge Bases\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgebases/:knowledgeBaseId`}>\r\n                        <KnowledgeBaseComponent loginUser={this.props.user.currentUser}></KnowledgeBaseComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeBaseList: store.knowledgeBases\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeBases\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeBaseContainer)","import { REMOVE_KNOWLEDGE_BASES, STORE_KNOWLEDGE_BASES } from \"./types\";\r\nimport { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\nexport function storeKnowledgeBases(acts: KnowledgeBase[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_BASES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeBases(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_BASES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeBase } from \"../../../class/knowledgeBase\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_BASES = \"STORE_KNOWLEDGE_BASES\";\r\nexport const REMOVE_KNOWLEDGE_BASES = \"REMOVE_KNOWLEDGE_BASES\";\r\n\r\ninterface StoreKnowledgeBasesAction {\r\n  type: typeof STORE_KNOWLEDGE_BASES;\r\n  payload: KnowledgeBase[];\r\n}\r\n\r\ninterface RemoveKnowledgeBasesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_BASES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeBaseActionTypes = StoreKnowledgeBasesAction | RemoveKnowledgeBasesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class KnowledgeArticleService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<KnowledgeArticle[]> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle[]> = await commonAPI.get(this.configs.apiServiceURL.knowledgeArticles);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<KnowledgeArticle> {\r\n        try {\r\n            const res: AxiosResponse<KnowledgeArticle> = await commonAPI.get(`${this.configs.apiServiceURL.knowledgeArticles}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: KnowledgeArticle): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.knowledgeArticles}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: KnowledgeArticle[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.knowledgeArticles}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { KnowledgeBase } from \"./knowledgeBase\";\r\nexport class KnowledgeArticle {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.shortDescription = obj ? obj.shortDescription : '';\r\n        this.knowledgeBase = obj ? obj.knowledgeBase : new KnowledgeBase();\r\n        this.contents = obj ? obj.contents : '';\r\n        this.reviewer = obj ? obj.reviewer : new User();\r\n        this.version = obj ? obj.version : 0;\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    shortDescription: string;\r\n    knowledgeBase: KnowledgeBase;\r\n    contents: string;\r\n    reviewer: User;\r\n    version: number;\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface KnowledgeArticleProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface KnowledgeArticleStates {\r\n    errors:{[s:string]: string[]},\r\n    knowledgeArticle: KnowledgeArticle,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialKnowledgeArticleStates: KnowledgeArticleStates = {\r\n    errors: {},\r\n    knowledgeArticle: new KnowledgeArticle(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst DownloadContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nconst dropdownStyle: React.CSSProperties = {\r\n    height: '38px',\r\n    width: '100%',\r\n    fontWeight: 400,\r\n    fontSize: 'small',\r\n    borderRadius: '.25rem',\r\n    border: '1px solid #e8e8e8 !important',\r\n    padding: '1.07em 1em'\r\n};\r\nexport interface DocumentViewerProps {\r\n    contents: string\r\n}\r\nexport class DocumentViewer extends React.Component<DocumentViewerProps, {}> {\r\n    handleOnclick(type: string) {\r\n        switch (type) {\r\n            case 'PDF':\r\n                var printWindow = window.open('', '');\r\n                if (printWindow) {\r\n                    printWindow.document.write('<html><head><title></title>');\r\n                    printWindow.document.write('</head><body >');\r\n                    printWindow.document.write(this.props.contents);\r\n                    printWindow.document.write('</body></html>');\r\n                    printWindow.document.close();\r\n                    printWindow.print();\r\n                }\r\n                break;\r\n            case 'CSV':\r\n                //TODO: Implement\r\n                break;\r\n            case 'JSON':\r\n                //TODO: implement\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <ContainerDiv>\r\n                <DownloadContainerDiv>\r\n                    <Dropdown className=\"float-right\">\r\n                        <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\" style={dropdownStyle}>\r\n                            Download\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('PDF')}>PDF</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('CSV')}>CSV</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => this.handleOnclick('JSON')}>JSON</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </DownloadContainerDiv>\r\n                <div id=\"contents\" style={{ fontFamily: 'times' }} dangerouslySetInnerHTML={{ __html: this.props.contents }} ></div>\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { KnowledgeArticleProps, KnowledgeArticleStates, initialKnowledgeArticleStates } from './KnowledgeArticlePropsState';\r\nimport styled from 'styled-components';\r\nimport { KnowledgeArticleService } from './KnowledgeArticle.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion, CkeditorQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { Config } from '../../../configuration/config';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Button } from '@material-ui/core';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\nimport { DocumentViewer } from '../../../share-components/DocumentViewer/DocumentViewer';\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst PreviewContainerDiv = styled.div`\r\n    width: 100%;\r\n    display: inline-block;\r\n`;\r\nclass KnowledgeArticleComponent extends React.Component<KnowledgeArticleProps, KnowledgeArticleStates> {\r\n    config: Config;\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleProps) {\r\n        super(props);\r\n\r\n        this.state = initialKnowledgeArticleStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let knowledgeArticleId = this.props.match.params['knowledgeArticleId'];\r\n        if (knowledgeArticleId !== \"createnew\") {\r\n            let knowledgeArticle = await this.knowledgeArticleService.getById(this.props.match.params['knowledgeArticleId']);\r\n            this.setState({\r\n                knowledgeArticle: knowledgeArticle,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit KnowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    handleSubmit(form: DynamicFormStates) {\r\n        //get KnowledgeArticle object from dynamic form\r\n        let knowledgeArticle = this.convertFormToObject(form);\r\n        if (this.state.isEditRecord) {\r\n            this.knowledgeArticleService.update(knowledgeArticle)\r\n                .then((result) => {\r\n                    //TODO: show message\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            this.knowledgeArticleService.createNew(knowledgeArticle)\r\n                .then((result) => {\r\n                    if (this.state.isEditRecord) {\r\n                        this.setState({\r\n                            knowledgeArticle: knowledgeArticle\r\n                        });\r\n                    }\r\n                    else {\r\n                        window.location.reload(false);\r\n                    }\r\n\r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to knowledgeArticle\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): KnowledgeArticle {\r\n        let currentAct = this.state.knowledgeArticle;\r\n        let formAct = new KnowledgeArticle(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Generate knowledgeArticle questions\r\n     * @param knowledgeArticle knowledgeArticle object\r\n     */\r\n    getQuestion(knowledgeArticle: KnowledgeArticle) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Short description text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Short Description is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'shortDescription',\r\n            label: 'Short Description',\r\n            value: knowledgeArticle.shortDescription,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add knowledge base\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Knowledge Base is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'knowledgeBase',\r\n            label: 'Knowledge Base',\r\n            value: knowledgeArticle.knowledgeBase,\r\n            validators: validators,\r\n            serverUrl: this.config.apiServiceURL.knowledgeBases,\r\n            displayField: 'name',\r\n            listFields: ['name'],\r\n            searchBar: true,\r\n            order: 150\r\n        }));\r\n\r\n        //add contents\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Contents is required.'\r\n        };\r\n        questions.push(new CkeditorQuestion({\r\n            key: 'contents',\r\n            label: 'Contents',\r\n            value: knowledgeArticle.contents,\r\n            validators: validators,\r\n            order: 200\r\n        }));\r\n\r\n        //Add reviewer\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'reviewer',\r\n            label: 'Reviewer',\r\n            value: knowledgeArticle.reviewer,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.knowledgeArticle);\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <ContainerDiv>\r\n                            {\r\n                                this.state.isEditRecord ?\r\n                                    (\r\n                                        <PreviewContainerDiv>\r\n                                            <Button className=\"float-right\" variant=\"contained\" color=\"primary\">\r\n                                                <Link to={`${this.state.knowledgeArticle._id}/preview`} style={{color: 'white'}}>Preview</Link>\r\n                                            </Button>\r\n                                        </PreviewContainerDiv>\r\n                                    )\r\n                                    :\r\n                                    ('')\r\n                            }\r\n                            <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId/preview`}>\r\n                        <DocumentViewer contents={this.state.knowledgeArticle.contents}></DocumentViewer>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(KnowledgeArticleComponent);","import React, { Component } from 'react';\r\nimport { KnowledgeArticle } from '../../../class/knowledgeArticle';\r\nimport { KnowledgeArticleService } from '../../../components/Management/KnowledgeArticle/KnowledgeArticle.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport KnowledgeArticleComponent from '../../../components/Management/KnowledgeArticle/KnowledgeArticle';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeKnowledgeArticles } from '../../store/knowledgeArticle/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface KnowledgeArticleContainerProps {\r\n    user: any,\r\n    storeKnowledgeArticles: typeof storeKnowledgeArticles\r\n}\r\ninterface KnowledgeArticleContainerStates {\r\n    allKnowledgeArticle: KnowledgeArticle[],\r\n    knowledgeArticleList: KnowledgeArticle[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\nconst contentStyle:React.CSSProperties = {\r\n    maxHeight: '55px',\r\n    overflow: 'hidden'\r\n}\r\nclass KnowledgeArticleContainer extends Component<KnowledgeArticleContainerProps, KnowledgeArticleContainerStates> {\r\n    knowledgeArticleService: KnowledgeArticleService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: KnowledgeArticleContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allKnowledgeArticle: [],\r\n            knowledgeArticleList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.knowledgeArticleService = new KnowledgeArticleService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getKnowledgeArticleByFilter = this.getKnowledgeArticleByFilter.bind(this);\r\n        this.deleteKnowledgeArticleHandler = this.deleteKnowledgeArticleHandler.bind(this);\r\n        this.addKnowledgeArticleHandler = this.addKnowledgeArticleHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getKnowledgeArticleByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let knowledgeArticles = this.state.allKnowledgeArticle;\r\n        if (knowledgeArticles.length === 0) {\r\n            knowledgeArticles = await this.knowledgeArticleService.getAllData();\r\n            this.props.storeKnowledgeArticles(knowledgeArticles);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allKnowledgeArticle: knowledgeArticles,\r\n            knowledgeArticleList: knowledgeArticles.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete KnowledgeArticle\r\n     * @param records deleted records\r\n     */\r\n    async deleteKnowledgeArticleHandler(records: KnowledgeArticle[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.knowledgeArticleService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addKnowledgeArticleHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/knowledgearticles/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Short Description',\r\n                id: 'shortDescription',\r\n                accessor: 'shortDescription',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`knowledgearticles/${row.original._id}`}>{row.original.shortDescription}</Link>)\r\n            },\r\n            {\r\n                Header: 'Base',\r\n                id: 'knowledgeBase',\r\n                accessor: (row: KnowledgeArticle) => row.knowledgeBase ? `${row.knowledgeBase.name}` : ''\r\n            },\r\n            {\r\n                Header: 'Contents',\r\n                id: 'contents',\r\n                accessor: (row: KnowledgeArticle) => (<div style={contentStyle} dangerouslySetInnerHTML={{__html: row.contents}}></div>)\r\n            },\r\n            {\r\n                Header: 'Reviewer',\r\n                id: 'reviewer',\r\n                accessor: (row: KnowledgeArticle) => row.reviewer ? `${row.reviewer.firstName} ${row.reviewer.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/knowledgearticles\">\r\n                        <ContainerDiv className=\"knowledgeArticle-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.knowledgeArticleList}\r\n                                pageCount={this.state.allKnowledgeArticle.length}\r\n                                fetchData={this.getKnowledgeArticleByFilter}\r\n                                deleteRecordHandler={this.deleteKnowledgeArticleHandler}\r\n                                addRecordHandler={this.addKnowledgeArticleHandler}\r\n                                TableName=\"Knowledge Articles\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/knowledgearticles/:knowledgeArticleId`}>\r\n                        <KnowledgeArticleComponent loginUser={this.props.user.currentUser}></KnowledgeArticleComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        knowledgeArticleList: store.knowledgeArticles\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeKnowledgeArticles\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(KnowledgeArticleContainer)","import { REMOVE_KNOWLEDGE_ARTICLES, STORE_KNOWLEDGE_ARTICLES } from \"./types\";\r\nimport { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\nexport function storeKnowledgeArticles(acts: KnowledgeArticle[]) {\r\n  return {\r\n    type: STORE_KNOWLEDGE_ARTICLES,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeKnowledgeArticles(timestamp: number) {\r\n  return {\r\n    type: REMOVE_KNOWLEDGE_ARTICLES,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { KnowledgeArticle } from \"../../../class/knowledgeArticle\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_KNOWLEDGE_ARTICLES = \"STORE_KNOWLEDGE_ARTICLES\";\r\nexport const REMOVE_KNOWLEDGE_ARTICLES = \"REMOVE_KNOWLEDGE_ARTICLES\";\r\n\r\ninterface StoreKnowledgeArticlesAction {\r\n  type: typeof STORE_KNOWLEDGE_ARTICLES;\r\n  payload: KnowledgeArticle[];\r\n}\r\n\r\ninterface RemoveKnowledgeArticlesAction {\r\n  type: typeof REMOVE_KNOWLEDGE_ARTICLES;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type KnowledgeArticleActionTypes = StoreKnowledgeArticlesAction | RemoveKnowledgeArticlesAction;\r\n","\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Config } from \"../../../configuration/config\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { Comment } from \"../../../class/common/comment\";\r\nimport { commonAPI } from \"../../../service/common-api.service\";\r\nimport { apiConfig } from \"../../../configuration/api.config\";\r\nexport class ProjectService {\r\n    configs: Config;\r\n    axiosConfig: AxiosRequestConfig;\r\n    constructor() {\r\n        this.configs = new Config();\r\n        this.axiosConfig = apiConfig;\r\n\r\n        this.getAllData = this.getAllData.bind(this);\r\n        this.getById = this.getById.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Get all data\r\n     */\r\n    public async getAllData(): Promise<Project[]> {\r\n        try {\r\n            const res: AxiosResponse<Project[]> = await commonAPI.get(this.configs.apiServiceURL.projects);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get data by id\r\n     * @param id id\r\n     */\r\n    public async getById(id: any): Promise<Project> {\r\n        try {\r\n            const res: AxiosResponse<Project> = await commonAPI.get(`${this.configs.apiServiceURL.projects}/${id}`);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async createNew(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.post(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async update(obj: Project): Promise<any> {\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async updateComment(obj: Comment[]): Promise<any>{\r\n        try{\r\n            const res = await commonAPI.put(`${this.configs.apiServiceURL.projects}/comments`, obj);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public async deleteRecords(objs: Project[]) : Promise<any> {\r\n        try{\r\n            this.axiosConfig.data = objs;\r\n            const res = await commonAPI.delete(`${this.configs.apiServiceURL.projects}`, this.axiosConfig);\r\n            return commonAPI.success(res);\r\n        }\r\n        catch(e) {\r\n            throw e;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\nimport { Comment } from \"./common/comment\";\r\nexport class Project {\r\n    constructor(obj?:any){\r\n        this._id = obj ? obj._id : null;\r\n        this.name = obj ? obj.name : '';\r\n        this.manager = obj ? obj.manager : new User();\r\n        this.members = obj ? obj.members : [];\r\n        this.comments = obj ? obj.comment : [];\r\n\r\n        this.createdBy =  obj ? obj.createdBy : new User();\r\n        this.createdDate =  obj ? obj.createdDate: new Date();\r\n        this.updatedBy =  obj ? obj.updatedBy : new User();\r\n        this.updatedDate =  obj ? obj.updatedDate : new Date();\r\n    }\r\n    _id:any;\r\n    name: string;\r\n    manager: User;\r\n    members: any[];\r\n    comments: Comment[];\r\n\r\n    createdBy: User;\r\n    createdDate: Date;\r\n    updatedBy: User;\r\n    updatedDate: Date;\r\n}","import { RouteComponentProps } from \"react-router-dom\";\r\nimport { Project } from \"../../../class/project\";\r\nimport { User } from \"../../../class/user\";\r\nexport interface ProjectProps extends RouteComponentProps<any>{\r\n    loginUser: User\r\n}\r\n\r\nexport interface ProjectStates {\r\n    errors:{[s:string]: string[]},\r\n    project: Project,\r\n    isEditRecord: boolean   //to check this page is edit or create new\r\n}\r\n\r\nexport const initialProjectStates: ProjectStates = {\r\n    errors: {},\r\n    project: new Project(),\r\n    isEditRecord: false\r\n}","import React from 'react';\r\nimport { ProjectProps, ProjectStates, initialProjectStates } from './ProjectPropsState';\r\nimport styled from 'styled-components';\r\nimport { ProjectService } from './Project.service';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n    DynamicForm, FormConfig, Validator, QuestionBase, TextboxQuestion\r\n    , DynamicFormStates, ReferenceQuestion\r\n} from '../../../share-components/DynamicForm';\r\nimport { Project } from '../../../class/project';\r\nimport { Config } from '../../../configuration/config';\r\nimport { BreakLine } from '../../../share-components/Variables'\r\nimport { CommentLog } from '../../../share-components/CommentLog/CommentLog';\r\nimport { CommentStates } from '../../../share-components/CommentLog/CommentLogPropsStates';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Comment } from '../../../class/common/comment';\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\n\r\nconst ContainerDiv = styled.div`\r\n    width: 80%;\r\n    margin: auto;\r\n    padding-top: 50px;\r\n    padding-bottom: 100px;\r\n    font-size: small;\r\n    font-weight: 400;\r\n`;\r\nconst CommentLeftStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"right\",\r\n    paddingRight: \"10px\"\r\n}\r\nconst CommentRightStyle: React.CSSProperties = {\r\n    width: \"50%\",\r\n    display: \"inline-block\",\r\n    textAlign: \"left\",\r\n    paddingLeft: \"10px\"\r\n}\r\nconst CommentHeaderStyle: React.CSSProperties = {\r\n    textAlign: \"left\",\r\n    paddingLeft: \"20px\"\r\n}\r\nconst CommentBreakLineStyle: React.CSSProperties = {\r\n    margin: \"auto\",\r\n    paddingTop: \"15px\",\r\n    borderBottom: \"0.2px dashed #b0b0b0\",\r\n    width: \"50%\"\r\n}\r\nconst TextCenterStyle: React.CSSProperties = {\r\n    textAlign: \"center\",\r\n    paddingLeft: \"30px\"\r\n}\r\nclass ProjectComponent extends React.Component<ProjectProps, ProjectStates> {\r\n    config: Config;\r\n    projectService: ProjectService;\r\n    formConfig: FormConfig;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectProps) {\r\n        super(props);\r\n\r\n        this.state = initialProjectStates;\r\n        this.formConfig = new FormConfig();\r\n        this.config = new Config();\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitComment = this.handleSubmitComment.bind(this);\r\n        this.renderCommentLog = this.renderCommentLog.bind(this);\r\n        this.convertFormToObject = this.convertFormToObject.bind(this);\r\n        this.getProjectUpdated = this.getProjectUpdated.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let projectId = this.props.match.params['projectId'];\r\n        if (projectId !== \"createnew\") {\r\n            let project = await this.projectService.getById(projectId);\r\n            this.setState({\r\n                project: project,\r\n                isEditRecord: true\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle submit Project\r\n     * @param form Dynamic form state\r\n     */\r\n    async handleSubmit(form: DynamicFormStates) {\r\n        //get Project object from dynamic form\r\n        let project = this.convertFormToObject(form);\r\n        let res;\r\n        if (this.state.isEditRecord) {\r\n            res = await this.projectService.update(project);\r\n        }\r\n        else {\r\n            res = await this.projectService.createNew(project);\r\n        }\r\n        //find out which part is updated\r\n        let projectChanged = this.getProjectUpdated(project);\r\n        if (projectChanged !== \"\") {\r\n            let projectId = this.state.isEditRecord ? project._id : res;\r\n            //store changed as a comment\r\n            let nComment = new Comment({\r\n                target: projectId,\r\n                comment: projectChanged,\r\n                userComment: this.props.loginUser,\r\n                commentDate: new Date().toUTCString()\r\n            });\r\n            project.comments.push(nComment);\r\n            //update comment\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    if(this.state.isEditRecord){\r\n                        this.setState({\r\n                            project: project\r\n                        });\r\n                    }\r\n                    else{\r\n                        window.location.reload(false);\r\n                    }\r\n                    \r\n                })\r\n                .catch((err) => {\r\n                    //TODO: handle error\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compare new submitted Project with current Project to find out which parts are updated\r\n     * use to show in Project log\r\n     * @param project new Project\r\n     */\r\n    getProjectUpdated(project: Project) {\r\n        let result = [];\r\n        //only find out updated when there are some differences\r\n        if (JSON.stringify(this.state.project) !== JSON.stringify(project)) {\r\n            if (JSON.stringify(this.state.project.name) !== JSON.stringify(project.name)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Name:</div>\r\n                            </div>\r\n                            <div style={TextCenterStyle}>\r\n                                {\r\n                                    project.name\r\n                                }\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n\r\n            if (JSON.stringify(this.state.project.manager) !== JSON.stringify(project.manager)) {\r\n                result.push(\r\n                    ReactDOMServer.renderToString(\r\n                        <div>\r\n                            <div style={CommentLeftStyle}>\r\n                                <div style={CommentHeaderStyle}>Manager:</div>\r\n                                <div>Manager</div>\r\n                            </div>\r\n                            <div style={CommentRightStyle}>\r\n                                <div></div>\r\n                                <div>\r\n                                    {(project.manager && project.manager._id) ?\r\n                                        `${project.manager.firstName} ${project.manager.lastName}`\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <BreakLine cssProperties={CommentBreakLineStyle}></BreakLine>\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        }\r\n        return result.join('');\r\n    }\r\n\r\n    /**\r\n     * Convert object from dynamic form to Project\r\n     * @param form Dynamic form state\r\n     */\r\n    convertFormToObject(form: DynamicFormStates): Project {\r\n        let currentAct = this.state.project;\r\n        let formAct = new Project(form.listFields);\r\n        formAct._id = currentAct._id;\r\n        formAct.comments = currentAct.comments;\r\n        formAct.createdBy = currentAct.createdBy;\r\n        formAct.createdDate = currentAct.createdDate;\r\n        formAct.updatedBy = currentAct.updatedBy;\r\n        formAct.updatedDate = currentAct.updatedDate;\r\n        return formAct;\r\n    }\r\n\r\n    /**\r\n     * Handle when user submit comment\r\n     * @param form Comment state\r\n     */\r\n    handleSubmitComment(form: CommentStates) {\r\n        let project = this.state.project;\r\n        project.comments = form.comments;\r\n        project.comments.forEach((val) => {\r\n            val.target = project._id\r\n        });\r\n        if (this.state.isEditRecord) {\r\n            this.projectService.updateComment(project.comments)\r\n                .then((result) => {\r\n                    this.setState({\r\n                        project: project\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate Project questions\r\n     * @param record Project object\r\n     */\r\n    getQuestion(record: Project) {\r\n        let questions: QuestionBase<any>[] = [];\r\n        let validators: { [s: string]: Validator<any>; } = {};\r\n        //Add Name text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Name is required.'\r\n        };\r\n        questions.push(new TextboxQuestion({\r\n            key: 'name',\r\n            label: 'Name',\r\n            value: record.name,\r\n            validators: validators,\r\n            type: this.formConfig.inputTypeDef.text,\r\n            order: 100\r\n        }));\r\n\r\n        //Add manager text\r\n        validators = {}\r\n        validators[this.formConfig.formValidators.require] = {\r\n            value: true,\r\n            errorMessage: 'Manager is required.'\r\n        };\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'manager',\r\n            label: 'Manager',\r\n            value: record.manager,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            validators: validators,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            order: 200\r\n        }));\r\n\r\n        //Add member list\r\n        questions.push(new ReferenceQuestion({\r\n            key: 'members',\r\n            label: 'Member',\r\n            value: record.members,\r\n            serverUrl: this.config.apiServiceURL.users,\r\n            displayField: 'email',\r\n            listFields: ['email', 'firstName', 'lastName'],\r\n            searchBar: true,\r\n            multiple: true,\r\n            order: 300\r\n        }));\r\n\r\n        return questions;\r\n    }\r\n\r\n    /**\r\n     * Render comment log DOM\r\n     */\r\n    renderCommentLog() {\r\n        let result;\r\n        if (this.state.isEditRecord) {\r\n            result = (\r\n                <div>\r\n                    <BreakLine></BreakLine>\r\n                    <CommentLog loginUser={this.props.loginUser}\r\n                        comments={this.state.project.comments}\r\n                        onSubmitComment={this.handleSubmitComment}></CommentLog>\r\n                </div>\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let questions = this.getQuestion(this.state.project);\r\n        return (\r\n            <ContainerDiv>\r\n                <DynamicForm ListFields={questions} OnSubmitCallback={this.handleSubmit} />\r\n                {\r\n                    this.renderCommentLog()\r\n                }\r\n            </ContainerDiv>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ProjectComponent);","import React, { Component } from 'react';\r\nimport { Project } from '../../../class/project';\r\nimport { ProjectService } from '../../../components/Management/Project/Project.service';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { Link, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ProjectComponent from '../../../components/Management/Project/Project';\r\nimport { CommonService } from '../../../service/common.service';\r\nimport { Config } from '../../../configuration/config';\r\nimport { storeProjects } from '../../store/project/actions';\r\nimport { AppState } from '../../store';\r\nimport { Pagination } from '../../../interface/pagination';\r\nimport { Table } from '../../../share-components/Table/Table';\r\n\r\ninterface ProjectContainerProps {\r\n    user: any,\r\n    storeProjects: typeof storeProjects\r\n}\r\ninterface ProjectContainerStates {\r\n    allProject: Project[],\r\n    projectList: Project[],\r\n    isLoading: boolean,\r\n    redirectCreateNew: boolean\r\n}\r\n\r\nconst ContainerDiv = styled.div`\r\n    min-height: calc(100vh - 80px);\r\n`;\r\n\r\nclass ProjectContainer extends Component<ProjectContainerProps, ProjectContainerStates> {\r\n    projectService: ProjectService;\r\n    config: Config;\r\n    commonService: CommonService;\r\n    constructor(props: ProjectContainerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            allProject: [],\r\n            projectList: [],\r\n            isLoading: false,\r\n            redirectCreateNew: false\r\n        }\r\n        this.projectService = new ProjectService();\r\n        this.commonService = new CommonService();\r\n        this.config = new Config();\r\n\r\n        this.getProjectByFilter = this.getProjectByFilter.bind(this);\r\n        this.deleteProjectHandler = this.deleteProjectHandler.bind(this);\r\n        this.addProjectHandler = this.addProjectHandler.bind(this);\r\n        this.redirectToCreateNew = this.redirectToCreateNew.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.redirectCreateNew) {\r\n            //reset flag before redirect to new children component.\r\n            //if not then next time this flag is still true and could not redirect again\r\n            this.setState({\r\n                redirectCreateNew: false\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() { \r\n    }\r\n\r\n    /**\r\n     * Handle get data by filter\r\n     * @param pagination pagination object\r\n     */\r\n    async getProjectByFilter(pagination: Pagination) {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        let projects = this.state.allProject;\r\n        if (projects.length === 0) {\r\n            projects = await this.projectService.getAllData();\r\n            this.props.storeProjects(projects);\r\n        }\r\n        const startRow = pagination.pageSize * pagination.pageIndex\r\n        const endRow = startRow + pagination.pageSize\r\n        this.setState({\r\n            allProject: projects,\r\n            projectList: projects.slice(startRow, endRow),\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle delete Project\r\n     * @param records deleted records\r\n     */\r\n    async deleteProjectHandler(records: Project[]) {\r\n        if (window.confirm(\"Do you want to delete the selected record(s)?\")) {\r\n            await this.projectService.deleteRecords(records);\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move to create new page\r\n     */\r\n    addProjectHandler() {\r\n        this.setState({\r\n            redirectCreateNew: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * React-router redirect to create new page\r\n     */\r\n    redirectToCreateNew() {\r\n        if (this.state.redirectCreateNew) {\r\n            return (\r\n                <Redirect push={true} to=\"/management/projects/createnew\"></Redirect>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n                Header: 'Name',\r\n                id: 'name',\r\n                accessor: 'name',\r\n                Cell: ({ row }: { row: any }) => (<Link to={`projects/${row.original._id}`}>{row.original.name}</Link>)\r\n            },\r\n            {\r\n                Header: 'Manager',\r\n                id: 'manager',\r\n                accessor: (row: Project) => row.manager ? `${row.manager.firstName} ${row.manager.lastName}` : ''\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {\r\n                    this.redirectToCreateNew()\r\n                }\r\n                <Switch>\r\n                    <Route exact path=\"/management/projects\">\r\n                        <ContainerDiv className=\"project-list\">\r\n                            <Table columns={columns}\r\n                                data={this.state.projectList}\r\n                                pageCount={this.state.allProject.length}\r\n                                fetchData={this.getProjectByFilter}\r\n                                deleteRecordHandler={this.deleteProjectHandler}\r\n                                addRecordHandler={this.addProjectHandler}\r\n                                TableName=\"Projects\"\r\n                            />\r\n                        </ContainerDiv>\r\n                    </Route>\r\n                    <Route path={`/management/projects/:projectId`}>\r\n                        <ProjectComponent loginUser={this.props.user.currentUser}></ProjectComponent>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst MapStatesToProps = (store: AppState) => {\r\n    return {\r\n        user: store.user,\r\n        projectList: store.projects\r\n    };\r\n}\r\n\r\nconst MapDispatchToProps = {\r\n    storeProjects\r\n};\r\n\r\nexport default connect(MapStatesToProps, MapDispatchToProps)(ProjectContainer)","import { REMOVE_PROJECTS, STORE_PROJECTS } from \"./types\";\r\nimport { Project } from \"../../../class/project\";\r\n\r\nexport function storeProjects(acts: Project[]) {\r\n  return {\r\n    type: STORE_PROJECTS,\r\n    payload: acts\r\n  };\r\n}\r\n\r\nexport function removeProjects(timestamp: number) {\r\n  return {\r\n    type: REMOVE_PROJECTS,\r\n    meta: {\r\n      timestamp\r\n    }\r\n  };\r\n}\r\n","import { Project } from \"../../../class/project\";\r\n\r\n// Describing the different ACTION NAMES available\r\nexport const STORE_PROJECTS = \"STORE_PROJECTS\";\r\nexport const REMOVE_PROJECTS = \"REMOVE_PROJECTS\";\r\n\r\ninterface StoreProjectsAction {\r\n  type: typeof STORE_PROJECTS;\r\n  payload: Project[];\r\n}\r\n\r\ninterface RemoveProjectsAction {\r\n  type: typeof REMOVE_PROJECTS;\r\n  meta: {\r\n    timestamp: number;\r\n  };\r\n}\r\n\r\nexport type ProjectActionTypes = StoreProjectsAction | RemoveProjectsAction;\r\n","import React from 'react';\r\nimport {\r\n\tHashRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tRedirect\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport { About } from './components/About/About';\r\nimport { Home } from './components/Home/Home';\r\nimport Toolbar from './components/UI/Toolbar/Toolbar';\r\nimport { Contact } from './components/Contact/Contact';\r\nimport SignUp from './components/Auth/SignUp/SignUp';\r\nimport { SignUpState } from './components/Auth/SignUp/SignUpPropsStates';\r\nimport { UserServiceApi } from './components/Management/Users/User.service';\r\nimport * as apiConfig from './configuration/api.config';\r\nimport { User } from './class/user';\r\nimport { AlertDiv } from './share-components/Alert/AlertComponent';\r\nimport { Config } from './configuration/config';\r\nimport UserContainer from './redux/containers/Users/UserContainer';\r\nimport ActivityContainer from './redux/containers/Activities/ActivityContainer';\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from './redux/store';\r\nimport { loginUser } from './redux/store/user/actions';\r\nimport { LoginState } from './components/Auth/Login/LoginPropsStates';\r\nimport { Credentials } from './interface/Credentials';\r\nimport Login from './components/Auth/Login/Login';\r\nimport KnowledgeBaseContainer from './redux/containers/KnowledgeBases/KnowledgeBaseContainer';\r\nimport KnowledgeArticleContainer from './redux/containers/KnowledgeArticles/KnowledgeArticleContainer';\r\nimport ProjectContainer from './redux/containers/Projects/ProjectContainer';\r\n\r\ntype AppStates = {\r\n\tredirectLogin: boolean,\r\n\tredirectHome: boolean,\r\n\talertConfig: any\r\n}\r\ntype AppProps = {\r\n\tuser: any,\r\n\tloginUser: typeof loginUser;\r\n}\r\nclass App extends React.Component<AppProps, AppStates> {\r\n\tuserService: UserServiceApi;\t//user service\r\n\tconfig: Config;\r\n\tconstructor(props: AppProps) {\r\n\t\tsuper(props);\r\n\t\t//initial variables\r\n\t\tthis.state = {\r\n\t\t\tredirectLogin: false,\r\n\t\t\tredirectHome: false,\r\n\t\t\talertConfig: {}\r\n\t\t}\r\n\t\tthis.userService = new UserServiceApi(apiConfig.apiConfig);\r\n\t\tthis.config = new Config();\r\n\r\n\t\t//binding functions\r\n\t\t//login component\r\n\t\tthis.handleOnSubmitLoginForm = this.handleOnSubmitLoginForm.bind(this);\r\n\t\t//Sign up component\r\n\t\tthis.handleOnSubmitRegisterForm = this.handleOnSubmitRegisterForm.bind(this);\r\n\r\n\t\t//Router\r\n\t\tthis.handleRenderRedirectRouter = this.handleRenderRedirectRouter.bind(this);\r\n\r\n\t\t//Alert component\r\n\t\tthis.handleRenderAlert = this.handleRenderAlert.bind(this);\r\n\t\tthis.handleOnCloseAlert = this.handleOnCloseAlert.bind(this);\r\n\t}\r\n\r\n\t//------------------------------------------LOG IN COMPONENT-----------------------------\r\n\t/**\r\n\t * handle login form submit\r\n\t * @param form login state\r\n\t */\r\n\tasync handleOnSubmitLoginForm(form: LoginState) {\r\n\t\tlet credentials: Credentials = {\r\n\t\t\tusername: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\trememberMe: form.rememberMe\r\n\t\t}\r\n\t\tthis.userService.userLogin(credentials)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tlet user = new User(result);\r\n\t\t\t\t\tthis.props.loginUser(user);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectHome: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tvalue: this.config.commonMessage.userNotFound,\r\n\t\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch((err) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.loginError,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t//------------------------------------------SIGN UP COMPONENT----------------------------\r\n\t/**\r\n\t * handle sign up form submit\r\n\t * @param form sign up state\r\n\t */\r\n\thandleOnSubmitRegisterForm(form: SignUpState) {\r\n\t\tlet newUser = new User({\r\n\t\t\tfirstName: form.firstName,\r\n\t\t\tlastName: form.lastName,\r\n\t\t\temail: form.email,\r\n\t\t\tpassword: form.password,\r\n\t\t\tphone: form.phone,\r\n\t\t\taddress: form.address\r\n\t\t});\r\n\t\tthis.userService.userRegister(newUser)\r\n\t\t\t.then((result) => {\r\n\t\t\t\tif (result && result.email === form.email) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tredirectLogin: true\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\talertConfig: {\r\n\t\t\t\t\t\tshow: true,\r\n\t\t\t\t\t\tvalue: this.config.commonMessage.signUpError,\r\n\t\t\t\t\t\tvariant: this.config.alertVariants.danger\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the case system want to redirect new page\r\n\t */\r\n\thandleRenderRedirectRouter() {\r\n\t\tif (this.state.redirectLogin) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/login\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t\telse if (this.state.redirectHome) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect push={true} to=\"/\"></Redirect>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t//------------------------------------------ALERT COMPONENT------------------------------\r\n\t/**\r\n\t * Handle on close alert component\r\n\t */\r\n\thandleOnCloseAlert() {\r\n\t\tthis.setState({\r\n\t\t\talertConfig: {}\r\n\t\t});\r\n\t}\r\n\t/**\r\n\t * Handle render alert component\r\n\t */\r\n\thandleRenderAlert() {\r\n\t\tif (this.state.alertConfig.show) {\r\n\t\t\treturn (\r\n\t\t\t\t<AlertDiv variant={this.state.alertConfig.variant}\r\n\t\t\t\t\tshow={true}\r\n\t\t\t\t\tvalue={this.state.alertConfig.value}\r\n\t\t\t\t\tonClose={this.handleOnCloseAlert}\r\n\t\t\t\t>\r\n\t\t\t\t</AlertDiv>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t// // Before the component mounts, we initialise our state\r\n\t// componentWillMount() {\r\n\t// }\r\n\r\n\t// After the component did mount\r\n\tcomponentDidMount() {\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.state.redirectHome) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectHome: false\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if (this.state.redirectLogin) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tredirectLogin: false\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<Toolbar />\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.handleRenderAlert()\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.handleRenderRedirectRouter()\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/about\">\r\n\t\t\t\t\t\t\t<About />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/contact\">\r\n\t\t\t\t\t\t\t<Contact />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/projects\">\r\n\t\t\t\t\t\t\t<ProjectContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/activities\">\r\n\t\t\t\t\t\t\t<ActivityContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/knowledgebases\">\r\n\t\t\t\t\t\t\t<KnowledgeBaseContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/management/knowledgearticles\">\r\n\t\t\t\t\t\t\t<KnowledgeArticleContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/users\">\r\n\t\t\t\t\t\t\t<UserContainer />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.user.currentUser._id === undefined ?\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<Route exact path=\"/login\">\r\n\t\t\t\t\t\t\t\t\t\t<Login OnLogin={this.handleOnSubmitLoginForm}\r\n\t\t\t\t\t\t\t\t\t\t\tRegisterPageRedirectLink=\"/signup\"\r\n\t\t\t\t\t\t\t\t\t\t\tForgotPasswordRedirectLink=\"/forgotpassword\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t('')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<Route exact path=\"/signup\">\r\n\t\t\t\t\t\t\t<SignUp OnRegister={this.handleOnSubmitRegisterForm}\r\n\t\t\t\t\t\t\t\tLoginRedirectLink=\"/login\" />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t\t\t<Home />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n\tuser: state.user\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\t{ loginUser }\r\n)(App);","import React from 'react';\r\nexport class Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"cid-s05i0OO9sN\" id=\"footer\">\r\n                <div className=\"container\">\r\n                    <div className=\"media-container-row content text-white\">\r\n                        <div className=\"col-12 col-md-3\">\r\n                            <div className=\"media-wrap\">\r\n                                <a href=\"/\">\r\n                                    <img src={`${process.env.PUBLIC_URL}/assets/images/mbr-192x108.jpg`} alt=\"GrownUp\" title=\"\" />\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-3 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Address\r\n                            </h5>\r\n                            <p className=\"mbr-text\">36 Bo Bao Tan Thang,<br />Tan Phu, Ho Chi Minh, VN</p>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6 mbr-fonts-style display-7\">\r\n                            <h5 className=\"pb-3\">\r\n                                Contacts\r\n                            </h5>\r\n                            <p className=\"mbr-text\">\r\n                                Email: robertvo.developer.93@gmail.com &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<br />Phone: +84 (0) 33 870 5850\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"footer-lower\">\r\n                        <div className=\"media-container-row\">\r\n                            <div className=\"col-sm-12\">\r\n                                <hr />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"media-container-row mbr-white\">\r\n                            <div className=\"col-sm-6 copyright\">\r\n                                <p className=\"mbr-text mbr-fonts-style display-7\">\r\n                                    © Copyright 2020 GrownUp - All Rights Reserved {process.env.REACT_APP_ACTIVITY_LOGS_SERVER}\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"social-list align-right\">\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://twitter.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-twitter socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.facebook.com/pages/Mobirise/1616226671953247\" target=\"_blank\">\r\n                                            <span className=\"socicon-facebook socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.youtube.com/c/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-youtube socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://instagram.com/mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-instagram socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://plus.google.com/u/0/+Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-googleplus socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"soc-item\">\r\n                                        <a rel=\"noopener noreferrer\" href=\"https://www.behance.net/Mobirise\" target=\"_blank\">\r\n                                            <span className=\"socicon-behance socicon mbr-iconfont mbr-iconfont-social\"></span>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import {\r\n  USER_LOGIN,\r\n  USER_LOGOUT,\r\n  UserActionTypes,\r\n  STORE_USER\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  currentUser: {},\r\n  userList: []\r\n}\r\n\r\nexport function userReducer(\r\n  state = initialState,\r\n  action: UserActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case USER_LOGIN:\r\n      return {\r\n        ...state, currentUser: action.payload\r\n      };\r\n    case USER_LOGOUT:\r\n      return {\r\n        ...state, currentUser: {}\r\n      };\r\n    case STORE_USER:\r\n      return {\r\n        ...state, userList: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_ACTIVITIES,\r\n  REMOVE_ACTIVITIES,\r\n  ActivityActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  activities: []\r\n}\r\n\r\nexport function activityReducer(\r\n  state = initialState,\r\n  action: ActivityActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: action.payload\r\n      };\r\n    case REMOVE_ACTIVITIES:\r\n      return {\r\n        ...state, activities: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const UPDATE_REQUEST = \"UPDATE_REQUEST\";\r\n\r\nexport interface UpdateRequestsAction {\r\n  type: typeof UPDATE_REQUEST;\r\n  payload: number;\r\n}\r\n\r\nexport type RequestActionTypes = UpdateRequestsAction;\r\n","import {\r\n  UPDATE_REQUEST,\r\n  RequestActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  numberOfRequest: 0\r\n}\r\n\r\nexport function requestReducer(\r\n  state = initialState,\r\n  action: RequestActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case UPDATE_REQUEST:\r\n      return {\r\n        ...state, numberOfRequest: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_KNOWLEDGE_BASES,\r\n  REMOVE_KNOWLEDGE_BASES,\r\n  KnowledgeBaseActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeBases: []\r\n}\r\n\r\nexport function knowledgeBaseReducer(\r\n  state = initialState,\r\n  action: KnowledgeBaseActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_BASES:\r\n      return {\r\n        ...state, knowledgeBases: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  STORE_KNOWLEDGE_ARTICLES,\r\n  REMOVE_KNOWLEDGE_ARTICLES,\r\n  KnowledgeArticleActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  knowledgeArticles: []\r\n}\r\n\r\nexport function knowledgeArticleReducer(\r\n  state = initialState,\r\n  action: KnowledgeArticleActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: action.payload\r\n      };\r\n    case REMOVE_KNOWLEDGE_ARTICLES:\r\n      return {\r\n        ...state, knowledgeArticles: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { UpdateRequestsAction, UPDATE_REQUEST } from \"./types\";\r\n\r\nexport function updateRequest(noRequests: number): UpdateRequestsAction{\r\n  return {\r\n    type: UPDATE_REQUEST,\r\n    payload: noRequests\r\n  };\r\n}\r\n","import {\r\n  STORE_PROJECTS,\r\n  REMOVE_PROJECTS,\r\n  ProjectActionTypes\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n  projects: []\r\n}\r\n\r\nexport function projectReducer(\r\n  state = initialState,\r\n  action: ProjectActionTypes\r\n): any {\r\n  switch (action.type) {\r\n    case STORE_PROJECTS:\r\n      return {\r\n        ...state, projects: action.payload\r\n      };\r\n    case REMOVE_PROJECTS:\r\n      return {\r\n        ...state, projects: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { persistStore, persistReducer } from 'redux-persist';\t//https://github.com/rt2zz/redux-persist\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport { userReducer } from \"./user/reducers\";\r\nimport { activityReducer } from \"./activity/reducers\";\r\nimport { requestReducer } from \"./request/reducers\";\r\nimport { knowledgeBaseReducer } from \"./knowledgeBase/reducers\";\r\nimport { knowledgeArticleReducer } from \"./knowledgeArticle/reducers\";\r\nimport axiosMiddleware from 'redux-axios-middleware';\r\nimport { commonAPI } from \"../../service/common-api.service\";\r\nimport { updateRequest } from \"./request/actions\";\r\nimport { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { projectReducer } from \"./project/reducers\";\r\n\r\n//define persistConfig\r\nconst persistConfig = {\r\n\tkey: 'root',\r\n\tstorage,\r\n}\r\n//combine all reducer\r\nconst rootReducer = combineReducers({\r\n\tuser: userReducer,\r\n\tactivities: activityReducer,\r\n\trequest: requestReducer,\r\n\tknowledgeBases: knowledgeBaseReducer,\r\n\tknowledgeArticles: knowledgeArticleReducer,\r\n\tprojects: projectReducer\r\n});\r\n//define AppState\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n//persist reducer\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n//add middleware redux-thunk => could view on chrome browser\r\nconst middlewares = [thunkMiddleware];\r\nlet numberOfRequest = 0;\r\nconst middlewareConfig = {\r\n\tinterceptors: {\r\n\t\trequest: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, req : AxiosRequestConfig) {\r\n\t\t\t\tlet appState:AppState = getState();\r\n\t\t\t\treq.headers.Authorization =  `bearer ${appState.user.currentUser.token}`;\r\n\t\t\t\tnumberOfRequest++;\r\n\t\t\t\tconsole.log(numberOfRequest);\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn req;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t],\r\n\t\tresponse: [{\r\n\t\t\tsuccess: function ({ getState, dispatch, getSourceAction } : any, res : AxiosResponse) {\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn res;\r\n\t\t\t},\r\n\t\t\terror: function ({ getState, dispatch, getSourceAction } : any, error : any) {\r\n\t\t\t\t//TODO: Redirect to login page if not loged in: 401\r\n\t\t\t\tnumberOfRequest--;\r\n\t\t\t\tdispatch(updateRequest(numberOfRequest));\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t\t]\r\n\t}\r\n};\r\nconst middleWareEnhancer = applyMiddleware(...middlewares\r\n\t, axiosMiddleware(commonAPI.api, middlewareConfig)\r\n\t);\r\nexport default () => {\r\n\tlet store: any = createStore(\r\n\t\tpersistedReducer\r\n\t\t, composeWithDevTools(middleWareEnhancer)\r\n\t)\r\n\tlet persistor = persistStore(store)\r\n\treturn { store, persistor }\r\n}","import React from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\"; //https://github.com/davidhu2000/react-spinners\r\nimport { connect } from 'react-redux';\r\nimport { AppState } from \"../../redux/store\";\r\nimport styled from \"styled-components\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\ndisplay: block;\r\nmargin: 0 auto;\r\nmargin-top: 200px;\r\nborder-color: red;\r\n`;\r\nconst ContainerDiv = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 10000;\r\n    opacity: 0.5;\r\n    background-color: gray;\r\n    top: 0px;\r\n`;\r\ninterface LoadingSpinnerProps {\r\n    numberOfRequest: number\r\n}\r\ninterface LoadingSpinnerStates {\r\n\r\n}\r\nclass LoadingSpinner extends React.Component<LoadingSpinnerProps, LoadingSpinnerStates> {\r\n    componentDidUpdate() {\r\n        console.log(this.props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.numberOfRequest > 0 ?\r\n                        (\r\n                            <ContainerDiv className=\"sweet-loading\">\r\n                                <BounceLoader\r\n                                    css={override}\r\n                                    size={100}\r\n                                    color={\"#123abc\"}\r\n                                    loading={this.props.numberOfRequest > 0}\r\n                                />\r\n                            </ContainerDiv>\r\n                        )\r\n                        : ('')\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    numberOfRequest: state.request.numberOfRequest\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {}\r\n)(LoadingSpinner);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from \"./App\";\r\nimport { Footer } from './components/Footer/Footer';\r\nimport * as persistStore from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport LoadingSpinner from './share-components/Spinner/LoadingSpinner';\r\n\r\nReactDOM.render(\r\n\t<Provider store={persistStore.default().store}>\r\n\t\t<PersistGate loading={null} persistor={persistStore.default().persistor}>\r\n\t\t\t<LoadingSpinner />\r\n\t\t\t<App />\r\n\t\t\t<Footer />\r\n\t\t</PersistGate>\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","import { Validator } from \"../class/validator\";\r\n\r\nexport class QuestionBase<T> {\r\n\tvalue?: T;\r\n\tkey: string;\r\n\tlabel: string;\r\n\trequired: boolean;\r\n\torder: number;\r\n\tcontrolType: string;\r\n\ttype: string;\r\n\toptions: { key: string, value: string }[];\r\n\tvalidators: {[s:string]: Validator<any>};\r\n\tmultiple: boolean;    //dropdown list multiple\r\n\trows: number;       //number of rows in text area\r\n\treadonly: boolean;  //question is readonly or not\r\n\tsearchBar: boolean;\r\n\tserverUrl: string;\r\n\tdisplayField: string;\r\n\tlistFields: string[];\r\n\tfilterCondition: string;\r\n\r\n\tconstructor(options: {\r\n\t\tvalue?: T,\r\n\t\tkey?: string,\r\n\t\tlabel?: string,\r\n\t\trequired?: boolean,\r\n\t\torder?: number,\r\n\t\tcontrolType?: string,\r\n\t\ttype?: string,\r\n\t\toptions?: { key: string, value: string }[],\r\n\t\tvalidators?: any,\r\n\t\tmultiple?: boolean,\r\n\t\trows?: number,\r\n\t\treadonly?: boolean,\r\n\t\tsearchBar?: boolean,\r\n\t\tserverUrl?: string,\r\n\t\tdisplayField?: string,\r\n\t\tlistFields?: string[],\r\n\t\tfilterCondition?: string\r\n\t} = {}) {\r\n\t\tthis.value = options.value;\r\n\t\tthis.key = options.key || '';\r\n\t\tthis.label = options.label || '';\r\n\t\tthis.required = !!options.required;\r\n\t\tthis.order = options.order === undefined ? 1 : options.order;\r\n\t\tthis.controlType = options.controlType || '';\r\n\t\tthis.type = options.type || '';\r\n\t\tthis.options = options.options || [];\r\n\t\tthis.validators = options.validators || [];\r\n\t\tthis.multiple = !!options.multiple;\r\n\t\tthis.rows = options.rows === undefined ? 1 : options.rows;\r\n\t\tthis.readonly = !!options.readonly;\r\n\t\tthis.searchBar = !!options.searchBar;\r\n\t\tthis.serverUrl = options.serverUrl || '';\r\n\t\tthis.displayField = options.displayField || '';\r\n\t\tthis.listFields = options.listFields || [];\r\n\t\tthis.filterCondition = options.filterCondition || '';\r\n\t}\r\n}\r\n","export class KeyValue{\r\n    constructor(obj?: KeyValue){\r\n        this.key = obj ? obj.key : null;\r\n        this.value = obj ? obj.value : null;\r\n    }\r\n    key: any;\r\n    value: any;\r\n}","export class ODateRange{\r\n    constructor(obj?: any){\r\n        this.startDate = obj ? obj.startDate : null;\r\n        this.endDate = obj ? obj.endDate : null;\r\n    }\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n}"],"sourceRoot":""}